
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00001404  00001498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000b4  008000b4  000014ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001763  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  00002dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a64  00000000  00000000  00003657  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  000040bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048b  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000101b  00000000  00000000  00004763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000577e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	6b 02       	muls	r22, r27
      56:	6e 02       	muls	r22, r30
      58:	71 02       	muls	r23, r17
      5a:	74 02       	muls	r23, r20
      5c:	77 02       	muls	r23, r23
      5e:	7a 02       	muls	r23, r26
      60:	7d 02       	muls	r23, r29

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e4 e0       	ldi	r30, 0x04	; 4
      76:	f4 e1       	ldi	r31, 0x14	; 20
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a4 3b       	cpi	r26, 0xB4	; 180
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a4 eb       	ldi	r26, 0xB4	; 180
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a8 3b       	cpi	r26, 0xB8	; 184
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <main>
      98:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <time>:
      a0:	fc 01       	movw	r30, r24
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <__data_end>
      aa:	70 91 b5 00 	lds	r23, 0x00B5	; 0x8000b5 <__data_end+0x1>
      ae:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x2>
      b2:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x3>
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	30 97       	sbiw	r30, 0x00	; 0
      ba:	21 f0       	breq	.+8      	; 0xc4 <time+0x24>
      bc:	60 83       	st	Z, r22
      be:	71 83       	std	Z+1, r23	; 0x01
      c0:	82 83       	std	Z+2, r24	; 0x02
      c2:	93 83       	std	Z+3, r25	; 0x03
      c4:	08 95       	ret

000000c6 <LDR>:

//-----------------LDR-------------------

void LDR(){
	
	if((PINA & 0b00000100)==0b00000100){
      c6:	ca 9b       	sbis	0x19, 2	; 25
      c8:	07 c0       	rjmp	.+14     	; 0xd8 <LDR+0x12>
		DDRD|=0x10;
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	80 61       	ori	r24, 0x10	; 16
      ce:	81 bb       	out	0x11, r24	; 17
		PORTD|=0x10;
      d0:	82 b3       	in	r24, 0x12	; 18
      d2:	80 61       	ori	r24, 0x10	; 16
      d4:	82 bb       	out	0x12, r24	; 18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <LDR+0x16>
	}
	else if((PINA & 0b00000100)==0b00000000){
      d8:	ca 9b       	sbis	0x19, 2	; 25
		PORTD=0x00;
      da:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      dc:	2f ef       	ldi	r18, 0xFF	; 255
      de:	80 e7       	ldi	r24, 0x70	; 112
      e0:	92 e0       	ldi	r25, 0x02	; 2
      e2:	21 50       	subi	r18, 0x01	; 1
      e4:	80 40       	sbci	r24, 0x00	; 0
      e6:	90 40       	sbci	r25, 0x00	; 0
      e8:	e1 f7       	brne	.-8      	; 0xe2 <LDR+0x1c>
      ea:	00 c0       	rjmp	.+0      	; 0xec <LDR+0x26>
      ec:	00 00       	nop
      ee:	08 95       	ret

000000f0 <Servo_INIT>:

//--------------------------------Servo Motor-----------------

void Servo_INIT(){
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11); //NON Inverted PWM
      f0:	8f b5       	in	r24, 0x2f	; 47
      f2:	82 6a       	ori	r24, 0xA2	; 162
      f4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11); //PRESCALER=8 (FAST PWM)
      f6:	8e b5       	in	r24, 0x2e	; 46
      f8:	8a 61       	ori	r24, 0x1A	; 26
      fa:	8e bd       	out	0x2e, r24	; 46
	ICR1=39999; //fPWM=50Hz (Period = 20ms Standard).
      fc:	8f e3       	ldi	r24, 0x3F	; 63
      fe:	9c e9       	ldi	r25, 0x9C	; 156
     100:	97 bd       	out	0x27, r25	; 39
     102:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PD4)|(1<<PD5); //PWM Pins as Out
     104:	81 b3       	in	r24, 0x11	; 17
     106:	80 63       	ori	r24, 0x30	; 48
     108:	81 bb       	out	0x11, r24	; 17
     10a:	08 95       	ret

0000010c <ADC_Init>:


//-------------------------Temperature Sensonr---------------

void ADC_Init(){
	DDRA = 0x00;	        /* Make ADC port as input */
     10c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;          /* Enable ADC, with freq/128  */
     10e:	87 e8       	ldi	r24, 0x87	; 135
     110:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;           /* Vref: Avcc, ADC channel: 0 */
     112:	80 e4       	ldi	r24, 0x40	; 64
     114:	87 b9       	out	0x07, r24	; 7
     116:	08 95       	ret

00000118 <ADC_Read>:
}

int ADC_Read(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
     118:	87 70       	andi	r24, 0x07	; 7
     11a:	80 64       	ori	r24, 0x40	; 64
     11c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
     11e:	86 b1       	in	r24, 0x06	; 6
     120:	80 64       	ori	r24, 0x40	; 64
     122:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
     124:	34 9b       	sbis	0x06, 4	; 6
     126:	fe cf       	rjmp	.-4      	; 0x124 <ADC_Read+0xc>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
     128:	86 b1       	in	r24, 0x06	; 6
     12a:	80 61       	ori	r24, 0x10	; 16
     12c:	86 b9       	out	0x06, r24	; 6
     12e:	8f e9       	ldi	r24, 0x9F	; 159
     130:	9f e0       	ldi	r25, 0x0F	; 15
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <ADC_Read+0x1a>
     136:	00 c0       	rjmp	.+0      	; 0x138 <ADC_Read+0x20>
     138:	00 00       	nop
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
     13a:	84 b1       	in	r24, 0x04	; 4
     13c:	95 b1       	in	r25, 0x05	; 5
}
     13e:	08 95       	ret

00000140 <lcdCommand>:

//-----------------LCD------------------

void lcdCommand( unsigned char cmd )
{
	LCD_port = (LCD_port & 0x0F) | (cmd & 0xF0); //send upper nibble (1111 0000)
     140:	98 b3       	in	r25, 0x18	; 24
     142:	9f 70       	andi	r25, 0x0F	; 15
     144:	28 2f       	mov	r18, r24
     146:	20 7f       	andi	r18, 0xF0	; 240
     148:	92 2b       	or	r25, r18
     14a:	98 bb       	out	0x18, r25	; 24
	//this is doing to using LCD in 4 bit mode
	
	LCD_port &= ~ (1<<RS);
     14c:	98 b3       	in	r25, 0x18	; 24
     14e:	9e 7f       	andi	r25, 0xFE	; 254
     150:	98 bb       	out	0x18, r25	; 24
	
	
	LCD_port |= (1<<EN);
     152:	98 b3       	in	r25, 0x18	; 24
     154:	92 60       	ori	r25, 0x02	; 2
     156:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	35 e0       	ldi	r19, 0x05	; 5
     15a:	3a 95       	dec	r19
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcdCommand+0x1a>
     15e:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~(1<<EN);
     160:	98 b3       	in	r25, 0x18	; 24
     162:	9d 7f       	andi	r25, 0xFD	; 253
     164:	98 bb       	out	0x18, r25	; 24
     166:	ef e1       	ldi	r30, 0x1F	; 31
     168:	f3 e0       	ldi	r31, 0x03	; 3
     16a:	31 97       	sbiw	r30, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <lcdCommand+0x2a>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <lcdCommand+0x30>
     170:	00 00       	nop

	_delay_us(200);

	LCD_port = (LCD_port & 0x0F) | (cmd << 4);  //send low nibble
     172:	28 b3       	in	r18, 0x18	; 24
     174:	f0 e1       	ldi	r31, 0x10	; 16
     176:	8f 9f       	mul	r24, r31
     178:	c0 01       	movw	r24, r0
     17a:	11 24       	eor	r1, r1
     17c:	92 2f       	mov	r25, r18
     17e:	9f 70       	andi	r25, 0x0F	; 15
     180:	89 2b       	or	r24, r25
     182:	88 bb       	out	0x18, r24	; 24
	LCD_port |= (1<<EN);
     184:	88 b3       	in	r24, 0x18	; 24
     186:	82 60       	ori	r24, 0x02	; 2
     188:	88 bb       	out	0x18, r24	; 24
     18a:	35 e0       	ldi	r19, 0x05	; 5
     18c:	3a 95       	dec	r19
     18e:	f1 f7       	brne	.-4      	; 0x18c <lcdCommand+0x4c>
     190:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~ (1<<EN);
     192:	88 b3       	in	r24, 0x18	; 24
     194:	8d 7f       	andi	r24, 0xFD	; 253
     196:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     198:	8f e3       	ldi	r24, 0x3F	; 63
     19a:	9f e1       	ldi	r25, 0x1F	; 31
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcdCommand+0x5c>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcdCommand+0x62>
     1a2:	00 00       	nop
     1a4:	08 95       	ret

000001a6 <lcddata>:
	
	_delay_ms(2);
}
void lcddata( unsigned char data )
{
	LCD_port = (LCD_port & 0x0F) | (data & 0xF0);  // sending upper nibble
     1a6:	98 b3       	in	r25, 0x18	; 24
     1a8:	9f 70       	andi	r25, 0x0F	; 15
     1aa:	28 2f       	mov	r18, r24
     1ac:	20 7f       	andi	r18, 0xF0	; 240
     1ae:	92 2b       	or	r25, r18
     1b0:	98 bb       	out	0x18, r25	; 24
	LCD_port |= (1<<RS);
     1b2:	98 b3       	in	r25, 0x18	; 24
     1b4:	91 60       	ori	r25, 0x01	; 1
     1b6:	98 bb       	out	0x18, r25	; 24
	LCD_port|= (1<<EN);
     1b8:	98 b3       	in	r25, 0x18	; 24
     1ba:	92 60       	ori	r25, 0x02	; 2
     1bc:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	35 e0       	ldi	r19, 0x05	; 5
     1c0:	3a 95       	dec	r19
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcddata+0x1a>
     1c4:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~ (1<<EN);
     1c6:	98 b3       	in	r25, 0x18	; 24
     1c8:	9d 7f       	andi	r25, 0xFD	; 253
     1ca:	98 bb       	out	0x18, r25	; 24
     1cc:	ef e1       	ldi	r30, 0x1F	; 31
     1ce:	f3 e0       	ldi	r31, 0x03	; 3
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcddata+0x2a>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcddata+0x30>
     1d6:	00 00       	nop

	_delay_us(200);

	LCD_port = (LCD_port & 0x0F) | (data << 4);
     1d8:	28 b3       	in	r18, 0x18	; 24
     1da:	f0 e1       	ldi	r31, 0x10	; 16
     1dc:	8f 9f       	mul	r24, r31
     1de:	c0 01       	movw	r24, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	92 2f       	mov	r25, r18
     1e4:	9f 70       	andi	r25, 0x0F	; 15
     1e6:	89 2b       	or	r24, r25
     1e8:	88 bb       	out	0x18, r24	; 24
	LCD_port |= (1<<EN);
     1ea:	88 b3       	in	r24, 0x18	; 24
     1ec:	82 60       	ori	r24, 0x02	; 2
     1ee:	88 bb       	out	0x18, r24	; 24
     1f0:	35 e0       	ldi	r19, 0x05	; 5
     1f2:	3a 95       	dec	r19
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcddata+0x4c>
     1f6:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~ (1<<EN);
     1f8:	88 b3       	in	r24, 0x18	; 24
     1fa:	8d 7f       	andi	r24, 0xFD	; 253
     1fc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	8f e3       	ldi	r24, 0x3F	; 63
     200:	9f e1       	ldi	r25, 0x1F	; 31
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcddata+0x5c>
     206:	00 c0       	rjmp	.+0      	; 0x208 <lcddata+0x62>
     208:	00 00       	nop
     20a:	08 95       	ret

0000020c <lcdInit>:
	
	_delay_ms(2);
}
void lcdInit(void)
{
	DDRB = 0xFF;
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	87 bb       	out	0x17, r24	; 23
     210:	2f ef       	ldi	r18, 0xFF	; 255
     212:	89 ef       	ldi	r24, 0xF9	; 249
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	21 50       	subi	r18, 0x01	; 1
     218:	80 40       	sbci	r24, 0x00	; 0
     21a:	90 40       	sbci	r25, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <lcdInit+0xa>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <lcdInit+0x14>
     220:	00 00       	nop
	_delay_ms(20);
	
	lcdCommand(0x02);		// send for 4 bit initialization of LCD
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
	lcdCommand(0x28);        // 2 line, 5*7 matrix in 4-bit mode
     228:	88 e2       	ldi	r24, 0x28	; 40
     22a:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
	lcdCommand(0x0E);        // Display on cursor on(we can send 0x0c or 0x0E)
     22e:	8e e0       	ldi	r24, 0x0E	; 14
     230:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
	lcdCommand(0x06);        // Increment cursor (shift cursor to right)
     234:	86 e0       	ldi	r24, 0x06	; 6
     236:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
	lcdCommand(0x01);        //Clear display screen
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
     240:	8f e3       	ldi	r24, 0x3F	; 63
     242:	9f e1       	ldi	r25, 0x1F	; 31
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcdInit+0x38>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcdInit+0x3e>
     24a:	00 00       	nop
     24c:	08 95       	ret

0000024e <lcd_Print>:
	_delay_ms(2);
	
}
void lcd_Print (char *str)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)
     258:	c0 e0       	ldi	r28, 0x00	; 0
     25a:	d0 e0       	ldi	r29, 0x00	; 0
     25c:	03 c0       	rjmp	.+6      	; 0x264 <lcd_Print+0x16>
	{
		lcddata (str[i]);
     25e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcddata>
	
}
void lcd_Print (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
     262:	21 96       	adiw	r28, 0x01	; 1
     264:	f8 01       	movw	r30, r16
     266:	ec 0f       	add	r30, r28
     268:	fd 1f       	adc	r31, r29
     26a:	80 81       	ld	r24, Z
     26c:	81 11       	cpse	r24, r1
     26e:	f7 cf       	rjmp	.-18     	; 0x25e <lcd_Print+0x10>
	{
		lcddata (str[i]);
	}
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	08 95       	ret

0000027a <LCD_Clear>:
void LCD_Clear()
{
	lcdCommand (0x01);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
     280:	8f e3       	ldi	r24, 0x3F	; 63
     282:	9f e1       	ldi	r25, 0x1F	; 31
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Clear+0xa>
     288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_Clear+0x10>
     28a:	00 00       	nop
	_delay_ms(2);
	lcdCommand (0x80);
     28c:	80 e8       	ldi	r24, 0x80	; 128
     28e:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
     292:	08 95       	ret

00000294 <keypad>:

//----------------------------Keypad------------------

unsigned char keypad()
{
	PORTC = 0b11111110;
     294:	8e ef       	ldi	r24, 0xFE	; 254
     296:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1<<PINC4)) == 0)
     298:	9c 99       	sbic	0x13, 4	; 19
     29a:	0b c0       	rjmp	.+22     	; 0x2b2 <keypad+0x1e>
     29c:	2f ef       	ldi	r18, 0xFF	; 255
     29e:	89 ef       	ldi	r24, 0xF9	; 249
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	21 50       	subi	r18, 0x01	; 1
     2a4:	80 40       	sbci	r24, 0x00	; 0
     2a6:	90 40       	sbci	r25, 0x00	; 0
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <keypad+0xe>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <keypad+0x18>
     2ac:	00 00       	nop
	{
		_delay_ms(20);
		return '7';
     2ae:	87 e3       	ldi	r24, 0x37	; 55
     2b0:	08 95       	ret
	}
	else if((PINC & (1<<PINC5)) == 0)
     2b2:	9d 99       	sbic	0x13, 5	; 19
     2b4:	0b c0       	rjmp	.+22     	; 0x2cc <keypad+0x38>
     2b6:	2f ef       	ldi	r18, 0xFF	; 255
     2b8:	89 ef       	ldi	r24, 0xF9	; 249
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	21 50       	subi	r18, 0x01	; 1
     2be:	80 40       	sbci	r24, 0x00	; 0
     2c0:	90 40       	sbci	r25, 0x00	; 0
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <keypad+0x28>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <keypad+0x32>
     2c6:	00 00       	nop
	{
		_delay_ms(20);
		return '8';
     2c8:	88 e3       	ldi	r24, 0x38	; 56
     2ca:	08 95       	ret
	}
	else if((PINC & (1<<PINC6)) == 0)
     2cc:	9e 99       	sbic	0x13, 6	; 19
     2ce:	0b c0       	rjmp	.+22     	; 0x2e6 <keypad+0x52>
     2d0:	2f ef       	ldi	r18, 0xFF	; 255
     2d2:	89 ef       	ldi	r24, 0xF9	; 249
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	21 50       	subi	r18, 0x01	; 1
     2d8:	80 40       	sbci	r24, 0x00	; 0
     2da:	90 40       	sbci	r25, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <keypad+0x42>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <keypad+0x4c>
     2e0:	00 00       	nop
	{
		_delay_ms(20);
		return '9';
     2e2:	89 e3       	ldi	r24, 0x39	; 57
     2e4:	08 95       	ret
	}
	PORTC = 0b11111101;
     2e6:	8d ef       	ldi	r24, 0xFD	; 253
     2e8:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1<<PINC4)) == 0)
     2ea:	9c 99       	sbic	0x13, 4	; 19
     2ec:	0b c0       	rjmp	.+22     	; 0x304 <keypad+0x70>
     2ee:	2f ef       	ldi	r18, 0xFF	; 255
     2f0:	89 ef       	ldi	r24, 0xF9	; 249
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	90 40       	sbci	r25, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <keypad+0x60>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <keypad+0x6a>
     2fe:	00 00       	nop
	{
		_delay_ms(20);
		return '4';
     300:	84 e3       	ldi	r24, 0x34	; 52
     302:	08 95       	ret
	}
	else if((PINC & (1<<PINC5)) == 0)
     304:	9d 99       	sbic	0x13, 5	; 19
     306:	0b c0       	rjmp	.+22     	; 0x31e <keypad+0x8a>
     308:	2f ef       	ldi	r18, 0xFF	; 255
     30a:	89 ef       	ldi	r24, 0xF9	; 249
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	21 50       	subi	r18, 0x01	; 1
     310:	80 40       	sbci	r24, 0x00	; 0
     312:	90 40       	sbci	r25, 0x00	; 0
     314:	e1 f7       	brne	.-8      	; 0x30e <keypad+0x7a>
     316:	00 c0       	rjmp	.+0      	; 0x318 <keypad+0x84>
     318:	00 00       	nop
	{
		_delay_ms(20);
		return '5';
     31a:	85 e3       	ldi	r24, 0x35	; 53
     31c:	08 95       	ret
	}
	else if((PINC & (1<<PINC6)) == 0)
     31e:	9e 99       	sbic	0x13, 6	; 19
     320:	0b c0       	rjmp	.+22     	; 0x338 <keypad+0xa4>
     322:	2f ef       	ldi	r18, 0xFF	; 255
     324:	89 ef       	ldi	r24, 0xF9	; 249
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	21 50       	subi	r18, 0x01	; 1
     32a:	80 40       	sbci	r24, 0x00	; 0
     32c:	90 40       	sbci	r25, 0x00	; 0
     32e:	e1 f7       	brne	.-8      	; 0x328 <keypad+0x94>
     330:	00 c0       	rjmp	.+0      	; 0x332 <keypad+0x9e>
     332:	00 00       	nop
	{
		_delay_ms(20);
		return '6';
     334:	86 e3       	ldi	r24, 0x36	; 54
     336:	08 95       	ret
	}
	PORTC = 0b11111011;
     338:	8b ef       	ldi	r24, 0xFB	; 251
     33a:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1<<PINC4)) == 0)
     33c:	9c 99       	sbic	0x13, 4	; 19
     33e:	0b c0       	rjmp	.+22     	; 0x356 <keypad+0xc2>
     340:	2f ef       	ldi	r18, 0xFF	; 255
     342:	89 ef       	ldi	r24, 0xF9	; 249
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	21 50       	subi	r18, 0x01	; 1
     348:	80 40       	sbci	r24, 0x00	; 0
     34a:	90 40       	sbci	r25, 0x00	; 0
     34c:	e1 f7       	brne	.-8      	; 0x346 <keypad+0xb2>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <keypad+0xbc>
     350:	00 00       	nop
	{
		_delay_ms(20);
		return '1';
     352:	81 e3       	ldi	r24, 0x31	; 49
     354:	08 95       	ret
	}
	else if ((PINC & (1<<PINC5)) == 0)
     356:	9d 99       	sbic	0x13, 5	; 19
     358:	0b c0       	rjmp	.+22     	; 0x370 <keypad+0xdc>
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	89 ef       	ldi	r24, 0xF9	; 249
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <keypad+0xcc>
     368:	00 c0       	rjmp	.+0      	; 0x36a <keypad+0xd6>
     36a:	00 00       	nop
	{
		_delay_ms(20);
		return '2';
     36c:	82 e3       	ldi	r24, 0x32	; 50
     36e:	08 95       	ret
	}
	else if((PINC & (1<<PINC6)) == 0)
     370:	9e 99       	sbic	0x13, 6	; 19
     372:	0b c0       	rjmp	.+22     	; 0x38a <keypad+0xf6>
     374:	2f ef       	ldi	r18, 0xFF	; 255
     376:	89 ef       	ldi	r24, 0xF9	; 249
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	21 50       	subi	r18, 0x01	; 1
     37c:	80 40       	sbci	r24, 0x00	; 0
     37e:	90 40       	sbci	r25, 0x00	; 0
     380:	e1 f7       	brne	.-8      	; 0x37a <keypad+0xe6>
     382:	00 c0       	rjmp	.+0      	; 0x384 <keypad+0xf0>
     384:	00 00       	nop
	{
		_delay_ms(20);
		return '3';
     386:	83 e3       	ldi	r24, 0x33	; 51
     388:	08 95       	ret
	}
	PORTC = 0b11110111;
     38a:	87 ef       	ldi	r24, 0xF7	; 247
     38c:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1<<PINC5)) == 0)
     38e:	9d 99       	sbic	0x13, 5	; 19
     390:	0b c0       	rjmp	.+22     	; 0x3a8 <keypad+0x114>
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	89 ef       	ldi	r24, 0xF9	; 249
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <keypad+0x104>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <keypad+0x10e>
     3a2:	00 00       	nop
	{
		_delay_ms(20);
		return '0';
     3a4:	80 e3       	ldi	r24, 0x30	; 48
     3a6:	08 95       	ret
	}
	
}
     3a8:	08 95       	ret

000003aa <ball_holder_stepper>:
//------------------------------  Ball Holder STEPPER MOTORS-----------------

void ball_holder_stepper(char a){

	
	DDRD |= 0x0F;
     3aa:	91 b3       	in	r25, 0x11	; 17
     3ac:	9f 60       	ori	r25, 0x0F	; 15
     3ae:	91 bb       	out	0x11, r25	; 17
	int period;
	//DDRD = 0x0F;		/* Make PORTD lower pins as output */
	period = 50;		/* Set period in between two steps */
	
	if(a=='a'){
     3b0:	81 36       	cpi	r24, 0x61	; 97
     3b2:	61 f4       	brne	.+24     	; 0x3cc <ball_holder_stepper+0x22>
		PORTD = 0x06;
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	82 bb       	out	0x12, r24	; 18
     3b8:	2f ef       	ldi	r18, 0xFF	; 255
     3ba:	80 e7       	ldi	r24, 0x70	; 112
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <ball_holder_stepper+0x14>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <ball_holder_stepper+0x1e>
     3c8:	00 00       	nop
     3ca:	08 95       	ret
		_delay_ms(period);
	}
	else if(a=='b'){
     3cc:	82 36       	cpi	r24, 0x62	; 98
     3ce:	61 f4       	brne	.+24     	; 0x3e8 <ball_holder_stepper+0x3e>
		PORTD = 0x03;
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	82 bb       	out	0x12, r24	; 18
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	80 e7       	ldi	r24, 0x70	; 112
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	90 40       	sbci	r25, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <ball_holder_stepper+0x30>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <ball_holder_stepper+0x3a>
     3e4:	00 00       	nop
     3e6:	08 95       	ret
		_delay_ms(period);
	}
	else if(a=='c'){
     3e8:	83 36       	cpi	r24, 0x63	; 99
     3ea:	61 f4       	brne	.+24     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		PORTD = 0x09;
     3ec:	89 e0       	ldi	r24, 0x09	; 9
     3ee:	82 bb       	out	0x12, r24	; 18
     3f0:	2f ef       	ldi	r18, 0xFF	; 255
     3f2:	80 e7       	ldi	r24, 0x70	; 112
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	21 50       	subi	r18, 0x01	; 1
     3f8:	80 40       	sbci	r24, 0x00	; 0
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <ball_holder_stepper+0x4c>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
     402:	08 95       	ret
		_delay_ms(period);
	}
	else{
		PORTD = 0x0C;
     404:	8c e0       	ldi	r24, 0x0C	; 12
     406:	82 bb       	out	0x12, r24	; 18
     408:	2f ef       	ldi	r18, 0xFF	; 255
     40a:	80 e7       	ldi	r24, 0x70	; 112
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	21 50       	subi	r18, 0x01	; 1
     410:	80 40       	sbci	r24, 0x00	; 0
     412:	90 40       	sbci	r25, 0x00	; 0
     414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     418:	00 00       	nop
     41a:	08 95       	ret

0000041c <A>:
}

// -------------Angle making stepper motor-------------

int A(){
	PORTA=0x20;
     41c:	80 e2       	ldi	r24, 0x20	; 32
     41e:	8b bb       	out	0x1b, r24	; 27
     420:	2f ef       	ldi	r18, 0xFF	; 255
     422:	80 e7       	ldi	r24, 0x70	; 112
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	21 50       	subi	r18, 0x01	; 1
     428:	80 40       	sbci	r24, 0x00	; 0
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	e1 f7       	brne	.-8      	; 0x426 <A+0xa>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <A+0x14>
     430:	00 00       	nop
	_delay_ms(50);
}
     432:	08 95       	ret

00000434 <B>:
int B(){
	
	PORTA=0x40;
     434:	80 e4       	ldi	r24, 0x40	; 64
     436:	8b bb       	out	0x1b, r24	; 27
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	80 e7       	ldi	r24, 0x70	; 112
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <B+0xa>
     446:	00 c0       	rjmp	.+0      	; 0x448 <B+0x14>
     448:	00 00       	nop
	_delay_ms(50);
}
     44a:	08 95       	ret

0000044c <C>:
int C(){
	
	PORTA=0x30;
     44c:	80 e3       	ldi	r24, 0x30	; 48
     44e:	8b bb       	out	0x1b, r24	; 27
     450:	2f ef       	ldi	r18, 0xFF	; 255
     452:	80 e7       	ldi	r24, 0x70	; 112
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	21 50       	subi	r18, 0x01	; 1
     458:	80 40       	sbci	r24, 0x00	; 0
     45a:	90 40       	sbci	r25, 0x00	; 0
     45c:	e1 f7       	brne	.-8      	; 0x456 <C+0xa>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <C+0x14>
     460:	00 00       	nop
	_delay_ms(50);
}
     462:	08 95       	ret

00000464 <D>:
int D(){
	
	PORTA=0xc0;
     464:	80 ec       	ldi	r24, 0xC0	; 192
     466:	8b bb       	out	0x1b, r24	; 27
     468:	2f ef       	ldi	r18, 0xFF	; 255
     46a:	80 e7       	ldi	r24, 0x70	; 112
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	80 40       	sbci	r24, 0x00	; 0
     472:	90 40       	sbci	r25, 0x00	; 0
     474:	e1 f7       	brne	.-8      	; 0x46e <D+0xa>
     476:	00 c0       	rjmp	.+0      	; 0x478 <D+0x14>
     478:	00 00       	nop
	_delay_ms(50);
}
     47a:	08 95       	ret

0000047c <E>:
int E(){
	
	PORTA=0x10;
     47c:	80 e1       	ldi	r24, 0x10	; 16
     47e:	8b bb       	out	0x1b, r24	; 27
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	80 e7       	ldi	r24, 0x70	; 112
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	21 50       	subi	r18, 0x01	; 1
     488:	80 40       	sbci	r24, 0x00	; 0
     48a:	90 40       	sbci	r25, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <E+0xa>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <E+0x14>
     490:	00 00       	nop
	_delay_ms(50);
}
     492:	08 95       	ret

00000494 <F>:
int F(){
	
	PORTA=0x08;
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	8b bb       	out	0x1b, r24	; 27
     498:	2f ef       	ldi	r18, 0xFF	; 255
     49a:	80 e7       	ldi	r24, 0x70	; 112
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	21 50       	subi	r18, 0x01	; 1
     4a0:	80 40       	sbci	r24, 0x00	; 0
     4a2:	90 40       	sbci	r25, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <F+0xa>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <F+0x14>
     4a8:	00 00       	nop
	_delay_ms(50);
}
     4aa:	08 95       	ret

000004ac <G>:
int G(){
	
	PORTA=0x50;
     4ac:	80 e5       	ldi	r24, 0x50	; 80
     4ae:	8b bb       	out	0x1b, r24	; 27
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	80 e7       	ldi	r24, 0x70	; 112
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	21 50       	subi	r18, 0x01	; 1
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <G+0xa>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <G+0x14>
     4c0:	00 00       	nop
	_delay_ms(50);
}
     4c2:	08 95       	ret

000004c4 <stepper_motor>:

int stepper_motor(int k){
	
	switch(k){
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	87 30       	cpi	r24, 0x07	; 7
     4c8:	91 05       	cpc	r25, r1
     4ca:	c8 f4       	brcc	.+50     	; 0x4fe <stepper_motor+0x3a>
     4cc:	86 5d       	subi	r24, 0xD6	; 214
     4ce:	9f 4f       	sbci	r25, 0xFF	; 255
     4d0:	fc 01       	movw	r30, r24
     4d2:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__tablejump2__>
		case 1:
		A();
     4d6:	0e 94 0e 02 	call	0x41c	; 0x41c <A>
		break;
     4da:	11 c0       	rjmp	.+34     	; 0x4fe <stepper_motor+0x3a>
		case 2:
		B();
     4dc:	0e 94 1a 02 	call	0x434	; 0x434 <B>
		break;
     4e0:	0e c0       	rjmp	.+28     	; 0x4fe <stepper_motor+0x3a>
		case 3:
		C();
     4e2:	0e 94 26 02 	call	0x44c	; 0x44c <C>
		break;
     4e6:	0b c0       	rjmp	.+22     	; 0x4fe <stepper_motor+0x3a>
		case 4:
		D();
     4e8:	0e 94 32 02 	call	0x464	; 0x464 <D>
		break;
     4ec:	08 c0       	rjmp	.+16     	; 0x4fe <stepper_motor+0x3a>
		case 5:
		E();
     4ee:	0e 94 3e 02 	call	0x47c	; 0x47c <E>
		break;
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <stepper_motor+0x3a>
		case 6:
		F();
     4f4:	0e 94 4a 02 	call	0x494	; 0x494 <F>
		break;
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <stepper_motor+0x3a>
		case 7:
		G();
     4fa:	0e 94 56 02 	call	0x4ac	; 0x4ac <G>
		break;
	}
	return 0;
}
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	08 95       	ret

00000504 <InitPWM1>:

//------------------------DC Motor 1/2-------------------

void InitPWM1()
{
	TCCR2 |= (1<<WGM20)|(1<<WGM21|1<<COM21)|(1<<CS20)|(0<<CS21)|(0<<CS22);
     504:	85 b5       	in	r24, 0x25	; 37
     506:	89 66       	ori	r24, 0x69	; 105
     508:	85 bd       	out	0x25, r24	; 37
	DDRD |= (1<<PD7);
     50a:	81 b3       	in	r24, 0x11	; 17
     50c:	80 68       	ori	r24, 0x80	; 128
     50e:	81 bb       	out	0x11, r24	; 17
     510:	08 95       	ret

00000512 <InitPWM2>:
}

void InitPWM2()
{
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
     512:	89 e6       	ldi	r24, 0x69	; 105
     514:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);
     516:	87 b3       	in	r24, 0x17	; 23
     518:	88 60       	ori	r24, 0x08	; 8
     51a:	87 bb       	out	0x17, r24	; 23
     51c:	08 95       	ret

0000051e <SetPWMOutput1>:
}

void SetPWMOutput1(uint8_t duty)
{
	OCR2=duty;
     51e:	83 bd       	out	0x23, r24	; 35
     520:	08 95       	ret

00000522 <SetPWMOutput2>:
}

void SetPWMOutput2(uint8_t duty)
{
	OCR0=duty;
     522:	8c bf       	out	0x3c, r24	; 60
     524:	08 95       	ret

00000526 <temperature>:



//---------------Temperature----------------

int temperature(){
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	2a 97       	sbiw	r28, 0x0a	; 10
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
	
	char Temperature[10];
	float celsius;

	lcdInit();                 // initialize 16x2 LCD
     542:	0e 94 06 01 	call	0x20c	; 0x20c <lcdInit>
	ADC_Init();                 // initialize ADC
     546:	0e 94 86 00 	call	0x10c	; 0x10c <ADC_Init>

	LCD_Clear();
     54a:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Clear>
	//lcd_Print("Temperature:");
	celsius = (ADC_Read(0)*4.88);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	0e 94 8c 00 	call	0x118	; 0x118 <ADC_Read>
     554:	bc 01       	movw	r22, r24
     556:	99 0f       	add	r25, r25
     558:	88 0b       	sbc	r24, r24
     55a:	99 0b       	sbc	r25, r25
     55c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__floatsisf>
     560:	26 ef       	ldi	r18, 0xF6	; 246
     562:	38 e2       	ldi	r19, 0x28	; 40
     564:	4c e9       	ldi	r20, 0x9C	; 156
     566:	50 e4       	ldi	r21, 0x40	; 64
     568:	0e 94 87 05 	call	0xb0e	; 0xb0e <__mulsf3>
	celsius = (celsius/10.00);
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e2       	ldi	r20, 0x20	; 32
     572:	51 e4       	ldi	r21, 0x41	; 65
     574:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__divsf3>
	int ret=(int)celsius;
     578:	0e 94 c3 04 	call	0x986	; 0x986 <__fixsfsi>
     57c:	86 2f       	mov	r24, r22
     57e:	97 2f       	mov	r25, r23
     580:	8c 01       	movw	r16, r24
	sprintf(Temperature,"%d%cC", (int)celsius, degree_sysmbol);//convert integer value to ASCII string
     582:	1f 92       	push	r1
     584:	8f ed       	ldi	r24, 0xDF	; 223
     586:	8f 93       	push	r24
     588:	7f 93       	push	r23
     58a:	6f 93       	push	r22
     58c:	84 e6       	ldi	r24, 0x64	; 100
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	7c 01       	movw	r14, r24
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 a3 06 	call	0xd46	; 0xd46 <sprintf>
	//lcd_Print(Temperature);//send string data for printing
	//_delay_ms(1000);
	memset(Temperature,0,10);
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	f7 01       	movw	r30, r14
     5a6:	11 92       	st	Z+, r1
     5a8:	8a 95       	dec	r24
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <temperature+0x80>
	
	if(ret>25){
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	0a 31       	cpi	r16, 0x1A	; 26
     5b8:	11 05       	cpc	r17, r1
     5ba:	1c f0       	brlt	.+6      	; 0x5c2 <temperature+0x9c>
		return 0;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <temperature+0xa0>
	}
	else{
		return 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     5c6:	2a 96       	adiw	r28, 0x0a	; 10
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	08 95       	ret

000005e0 <main>:


int main(void)
{
     5e0:	8f 92       	push	r8
     5e2:	9f 92       	push	r9
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <main+0x18>
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <main+0x1a>
     5fa:	1f 92       	push	r1
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
	srand(time(NULL));
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 50 00 	call	0xa0	; 0xa0 <time>
     608:	cb 01       	movw	r24, r22
     60a:	0e 94 73 06 	call	0xce6	; 0xce6 <srand>
	//-------------------------------enter minimum speed------------------------
	
	unsigned char x;
	DDRC = 0x0F ;
     60e:	8f e0       	ldi	r24, 0x0F	; 15
     610:	84 bb       	out	0x14, r24	; 20
	PORTC =0xF0;//11110000 Make all 4 columns 1 and rows 0
     612:	80 ef       	ldi	r24, 0xF0	; 240
     614:	85 bb       	out	0x15, r24	; 21
	
	lcdInit();
     616:	0e 94 06 01 	call	0x20c	; 0x20c <lcdInit>
	lcd_Print("Enter Minimun Speed:");
     61a:	8a e6       	ldi	r24, 0x6A	; 106
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_Print>
	lcdCommand(0xC0);
     622:	80 ec       	ldi	r24, 0xC0	; 192
     624:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
	
	int w=3;
	int temp=0;
	int speed1=0;
     628:	a1 2c       	mov	r10, r1
     62a:	b1 2c       	mov	r11, r1
	
	lcdInit();
	lcd_Print("Enter Minimun Speed:");
	lcdCommand(0xC0);
	
	int w=3;
     62c:	0f 2e       	mov	r0, r31
     62e:	f3 e0       	ldi	r31, 0x03	; 3
     630:	cf 2e       	mov	r12, r31
     632:	d1 2c       	mov	r13, r1
     634:	f0 2d       	mov	r31, r0
	int temp=0;
	int speed1=0;
	while(w>0){
     636:	19 c0       	rjmp	.+50     	; 0x66a <main+0x8a>
		x = keypad();
     638:	0e 94 4a 01 	call	0x294	; 0x294 <keypad>
     63c:	18 2f       	mov	r17, r24
		if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     63e:	80 ed       	ldi	r24, 0xD0	; 208
     640:	81 0f       	add	r24, r17
     642:	8a 30       	cpi	r24, 0x0A	; 10
     644:	90 f4       	brcc	.+36     	; 0x66a <main+0x8a>
			lcddata(x);
     646:	81 2f       	mov	r24, r17
     648:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcddata>
			temp=(int)x-48;
     64c:	81 2f       	mov	r24, r17
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	c0 97       	sbiw	r24, 0x30	; 48
			speed1=speed1*10+temp;
     652:	4a e0       	ldi	r20, 0x0A	; 10
     654:	4a 9d       	mul	r20, r10
     656:	90 01       	movw	r18, r0
     658:	4b 9d       	mul	r20, r11
     65a:	30 0d       	add	r19, r0
     65c:	11 24       	eor	r1, r1
     65e:	5c 01       	movw	r10, r24
     660:	a2 0e       	add	r10, r18
     662:	b3 1e       	adc	r11, r19
			w-=1;
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	c2 1a       	sub	r12, r18
     668:	d1 08       	sbc	r13, r1
	lcdCommand(0xC0);
	
	int w=3;
	int temp=0;
	int speed1=0;
	while(w>0){
     66a:	1c 14       	cp	r1, r12
     66c:	1d 04       	cpc	r1, r13
     66e:	24 f3       	brlt	.-56     	; 0x638 <main+0x58>
		}
	}
	
	//------------------------Enter Maximum Speed---------------------------------------
	
	lcdInit();
     670:	0e 94 06 01 	call	0x20c	; 0x20c <lcdInit>
	lcd_Print("Enter Maximum Speed:");
     674:	8f e7       	ldi	r24, 0x7F	; 127
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_Print>
	lcdCommand(0xC0);
     67c:	80 ec       	ldi	r24, 0xC0	; 192
     67e:	0e 94 a0 00 	call	0x140	; 0x140 <lcdCommand>
	
	w=3;
	int speed2=0;
     682:	81 2c       	mov	r8, r1
     684:	91 2c       	mov	r9, r1
	
	lcdInit();
	lcd_Print("Enter Maximum Speed:");
	lcdCommand(0xC0);
	
	w=3;
     686:	03 e0       	ldi	r16, 0x03	; 3
     688:	10 e0       	ldi	r17, 0x00	; 0
	int speed2=0;
	while(w>0){
     68a:	18 c0       	rjmp	.+48     	; 0x6bc <main+0xdc>
		x = keypad();
     68c:	0e 94 4a 01 	call	0x294	; 0x294 <keypad>
     690:	f8 2e       	mov	r15, r24
		if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     692:	80 ed       	ldi	r24, 0xD0	; 208
     694:	8f 0d       	add	r24, r15
     696:	8a 30       	cpi	r24, 0x0A	; 10
     698:	88 f4       	brcc	.+34     	; 0x6bc <main+0xdc>
			lcddata(x);
     69a:	8f 2d       	mov	r24, r15
     69c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcddata>
			temp=(int)x-48;
     6a0:	8f 2d       	mov	r24, r15
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	c0 97       	sbiw	r24, 0x30	; 48
			speed2=speed2*10+temp;
     6a6:	4a e0       	ldi	r20, 0x0A	; 10
     6a8:	48 9d       	mul	r20, r8
     6aa:	90 01       	movw	r18, r0
     6ac:	49 9d       	mul	r20, r9
     6ae:	30 0d       	add	r19, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	4c 01       	movw	r8, r24
     6b4:	82 0e       	add	r8, r18
     6b6:	93 1e       	adc	r9, r19
			w-=1;
     6b8:	01 50       	subi	r16, 0x01	; 1
     6ba:	11 09       	sbc	r17, r1
	lcd_Print("Enter Maximum Speed:");
	lcdCommand(0xC0);
	
	w=3;
	int speed2=0;
	while(w>0){
     6bc:	10 16       	cp	r1, r16
     6be:	11 06       	cpc	r1, r17
     6c0:	2c f3       	brlt	.-54     	; 0x68c <main+0xac>
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	90 e7       	ldi	r25, 0x70	; 112
     6c6:	22 e0       	ldi	r18, 0x02	; 2
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	90 40       	sbci	r25, 0x00	; 0
     6cc:	20 40       	sbci	r18, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0xe8>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0xf2>
     6d2:	00 00       	nop
	
	//----------get ready notification-------------
	
	
	_delay_ms(50);
	LCD_Clear();
     6d4:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Clear>
	lcd_Print("Get ready");
     6d8:	84 e9       	ldi	r24, 0x94	; 148
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_Print>
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	90 e7       	ldi	r25, 0x70	; 112
     6e4:	22 e0       	ldi	r18, 0x02	; 2
     6e6:	81 50       	subi	r24, 0x01	; 1
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	20 40       	sbci	r18, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x106>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x110>
     6f0:	00 00       	nop
	_delay_ms(50);
	LCD_Clear();
     6f2:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Clear>
	

	int lower =speed1, upper = speed2;
	char pos='a';
	int k;
	for(int g=0;g<20;g++){
     6f6:	c1 2c       	mov	r12, r1
     6f8:	d1 2c       	mov	r13, r1
	LCD_Clear();
	
	

	int lower =speed1, upper = speed2;
	char pos='a';
     6fa:	0f 2e       	mov	r0, r31
     6fc:	f1 e6       	ldi	r31, 0x61	; 97
     6fe:	ff 2e       	mov	r15, r31
     700:	f0 2d       	mov	r31, r0
	int k;
	for(int g=0;g<20;g++){
     702:	b7 c0       	rjmp	.+366    	; 0x872 <__stack+0x13>
		
		if(temperature()==1){
     704:	0e 94 93 02 	call	0x526	; 0x526 <temperature>
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	09 f0       	breq	.+2      	; 0x70e <main+0x12e>
     70c:	a8 c0       	rjmp	.+336    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			
			LDR();
     70e:	0e 94 63 00 	call	0xc6	; 0xc6 <LDR>
			//----------dc motor speed control-------------
			
			uint8_t num = (rand() % (upper - lower + 1)) + lower;
     712:	0e 94 6e 06 	call	0xcdc	; 0xcdc <rand>
     716:	b4 01       	movw	r22, r8
     718:	6a 19       	sub	r22, r10
     71a:	7b 09       	sbc	r23, r11
     71c:	6f 5f       	subi	r22, 0xFF	; 255
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__divmodhi4>
     724:	8a 0d       	add	r24, r10
			
			int num1 = num;
     726:	08 2f       	mov	r16, r24
     728:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     72a:	4a e0       	ldi	r20, 0x0A	; 10
     72c:	be 01       	movw	r22, r28
     72e:	6f 5f       	subi	r22, 0xFF	; 255
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	c8 01       	movw	r24, r16
     734:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__itoa_ncheck>
			char snum[5];
			itoa(num1, snum, 10);
			lcd_Print(snum);
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_Print>
			lcd_Print(" kmh");
     740:	8e e9       	ldi	r24, 0x9E	; 158
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_Print>
			
			//----------make the direction of the machine-------------
			
			
			
			DDRA=0xF0;
     748:	80 ef       	ldi	r24, 0xF0	; 240
     74a:	8a bb       	out	0x1a, r24	; 26
			k=(rand()%7)+1;
     74c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <rand>
     750:	67 e0       	ldi	r22, 0x07	; 7
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__divmodhi4>
			stepper_motor(k);
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <stepper_motor>
			
			Servo_INIT();
     75e:	0e 94 78 00 	call	0xf0	; 0xf0 <Servo_INIT>
			OCR1A=124 + (rand() % 125);
     762:	0e 94 6e 06 	call	0xcdc	; 0xcdc <rand>
     766:	6d e7       	ldi	r22, 0x7D	; 125
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__divmodhi4>
     76e:	84 58       	subi	r24, 0x84	; 132
     770:	9f 4f       	sbci	r25, 0xFF	; 255
     772:	9b bd       	out	0x2b, r25	; 43
     774:	8a bd       	out	0x2a, r24	; 42
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	91 ee       	ldi	r25, 0xE1	; 225
     77a:	24 e0       	ldi	r18, 0x04	; 4
     77c:	81 50       	subi	r24, 0x01	; 1
     77e:	90 40       	sbci	r25, 0x00	; 0
     780:	20 40       	sbci	r18, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <main+0x19c>
     784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x1a6>
     786:	00 00       	nop
			_delay_ms(100);
			
			//----------mControl Speed----------------
			
			InitPWM1();
     788:	0e 94 82 02 	call	0x504	; 0x504 <InitPWM1>
			InitPWM2();
     78c:	0e 94 89 02 	call	0x512	; 0x512 <InitPWM2>
			
			if(num1>80 && num1<120){
     790:	c8 01       	movw	r24, r16
     792:	81 55       	subi	r24, 0x51	; 81
     794:	91 09       	sbc	r25, r1
     796:	87 97       	sbiw	r24, 0x27	; 39
     798:	38 f4       	brcc	.+14     	; 0x7a8 <main+0x1c8>
				SetPWMOutput1(250);
     79a:	8a ef       	ldi	r24, 0xFA	; 250
     79c:	0e 94 8f 02 	call	0x51e	; 0x51e <SetPWMOutput1>
				SetPWMOutput2(10);
     7a0:	8a e0       	ldi	r24, 0x0A	; 10
     7a2:	0e 94 91 02 	call	0x522	; 0x522 <SetPWMOutput2>
     7a6:	12 c0       	rjmp	.+36     	; 0x7cc <main+0x1ec>
			}
			else if(num1>120 && num1<130){
     7a8:	09 57       	subi	r16, 0x79	; 121
     7aa:	11 09       	sbc	r17, r1
     7ac:	09 30       	cpi	r16, 0x09	; 9
     7ae:	11 05       	cpc	r17, r1
     7b0:	38 f4       	brcc	.+14     	; 0x7c0 <main+0x1e0>
				SetPWMOutput1(10);
     7b2:	8a e0       	ldi	r24, 0x0A	; 10
     7b4:	0e 94 8f 02 	call	0x51e	; 0x51e <SetPWMOutput1>
				SetPWMOutput2(250);
     7b8:	8a ef       	ldi	r24, 0xFA	; 250
     7ba:	0e 94 91 02 	call	0x522	; 0x522 <SetPWMOutput2>
     7be:	06 c0       	rjmp	.+12     	; 0x7cc <main+0x1ec>
			}
			else{
				SetPWMOutput1(10);
     7c0:	8a e0       	ldi	r24, 0x0A	; 10
     7c2:	0e 94 8f 02 	call	0x51e	; 0x51e <SetPWMOutput1>
				SetPWMOutput2(10);
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	0e 94 91 02 	call	0x522	; 0x522 <SetPWMOutput2>
     7cc:	8f e3       	ldi	r24, 0x3F	; 63
     7ce:	9c e9       	ldi	r25, 0x9C	; 156
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <main+0x1f0>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x1f6>
     7d6:	00 00       	nop
			
			_delay_ms(10);
			
			//-------------Buzzer Alarm---------------
			
			DDRA=0x08;
     7d8:	88 e0       	ldi	r24, 0x08	; 8
     7da:	8a bb       	out	0x1a, r24	; 26
			PORTA=0x08;
     7dc:	8b bb       	out	0x1b, r24	; 27
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	20 e7       	ldi	r18, 0x70	; 112
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	91 50       	subi	r25, 0x01	; 1
     7e6:	20 40       	sbci	r18, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <main+0x204>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0x20e>
     7ee:	00 00       	nop
			_delay_ms(50);
			PORTA=0x00;
     7f0:	1b ba       	out	0x1b, r1	; 27
			
			//----------ball holder rotation-------------
			
			DDRD |= 0xFF;
     7f2:	81 b3       	in	r24, 0x11	; 17
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	81 bb       	out	0x11, r24	; 17
			PORTD |= 0xFF;
     7f8:	92 b3       	in	r25, 0x12	; 18
     7fa:	82 bb       	out	0x12, r24	; 18
			
			if(pos=='a'){
     7fc:	91 e6       	ldi	r25, 0x61	; 97
     7fe:	f9 12       	cpse	r15, r25
     800:	08 c0       	rjmp	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
				ball_holder_stepper(pos);
     802:	8f 2d       	mov	r24, r15
     804:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ball_holder_stepper>
				pos='b';
     808:	0f 2e       	mov	r0, r31
     80a:	f2 e6       	ldi	r31, 0x62	; 98
     80c:	ff 2e       	mov	r15, r31
     80e:	f0 2d       	mov	r31, r0
     810:	20 c0       	rjmp	.+64     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			}
			else if(pos=='b'){
     812:	22 e6       	ldi	r18, 0x62	; 98
     814:	f2 12       	cpse	r15, r18
     816:	08 c0       	rjmp	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
				ball_holder_stepper(pos);
     818:	8f 2d       	mov	r24, r15
     81a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ball_holder_stepper>
				pos='c';
     81e:	0f 2e       	mov	r0, r31
     820:	f3 e6       	ldi	r31, 0x63	; 99
     822:	ff 2e       	mov	r15, r31
     824:	f0 2d       	mov	r31, r0
     826:	15 c0       	rjmp	.+42     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			}
			else if(pos=='c'){
     828:	83 e6       	ldi	r24, 0x63	; 99
     82a:	f8 12       	cpse	r15, r24
     82c:	08 c0       	rjmp	.+16     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
				ball_holder_stepper(pos);
     82e:	8f 2d       	mov	r24, r15
     830:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ball_holder_stepper>
				pos='d';
     834:	0f 2e       	mov	r0, r31
     836:	f4 e6       	ldi	r31, 0x64	; 100
     838:	ff 2e       	mov	r15, r31
     83a:	f0 2d       	mov	r31, r0
     83c:	0a c0       	rjmp	.+20     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			}
			else if(pos=='d'){
     83e:	94 e6       	ldi	r25, 0x64	; 100
     840:	f9 12       	cpse	r15, r25
     842:	07 c0       	rjmp	.+14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
				ball_holder_stepper(pos);
     844:	8f 2d       	mov	r24, r15
     846:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ball_holder_stepper>
				pos='a';
     84a:	0f 2e       	mov	r0, r31
     84c:	f1 e6       	ldi	r31, 0x61	; 97
     84e:	ff 2e       	mov	r15, r31
     850:	f0 2d       	mov	r31, r0
			}
			
			else{
			}
			
			LCD_Clear();
     852:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Clear>
	

	int lower =speed1, upper = speed2;
	char pos='a';
	int k;
	for(int g=0;g<20;g++){
     856:	2f ef       	ldi	r18, 0xFF	; 255
     858:	c2 1a       	sub	r12, r18
     85a:	d2 0a       	sbc	r13, r18
     85c:	0a c0       	rjmp	.+20     	; 0x872 <__stack+0x13>
			
			LCD_Clear();
		}
		
		else{
			lcdInit();
     85e:	0e 94 06 01 	call	0x20c	; 0x20c <lcdInit>
			lcd_Print("High Temperature");
     862:	83 ea       	ldi	r24, 0xA3	; 163
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_Print>
			DDRA=0x02;
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	8a bb       	out	0x1a, r24	; 26
			PORTA=0x02;
     86e:	8b bb       	out	0x1b, r24	; 27
     870:	ff cf       	rjmp	.-2      	; 0x870 <__stack+0x11>
	

	int lower =speed1, upper = speed2;
	char pos='a';
	int k;
	for(int g=0;g<20;g++){
     872:	84 e1       	ldi	r24, 0x14	; 20
     874:	c8 16       	cp	r12, r24
     876:	d1 04       	cpc	r13, r1
     878:	0c f4       	brge	.+2      	; 0x87c <__stack+0x1d>
     87a:	44 cf       	rjmp	.-376    	; 0x704 <main+0x124>
		}
	}

	return 0;

     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	08 95       	ret

000008a2 <__divsf3>:
     8a2:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3x>
     8a6:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_round>
     8aa:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_pscB>
     8ae:	58 f0       	brcs	.+22     	; 0x8c6 <__divsf3+0x24>
     8b0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__fp_pscA>
     8b4:	40 f0       	brcs	.+16     	; 0x8c6 <__divsf3+0x24>
     8b6:	29 f4       	brne	.+10     	; 0x8c2 <__divsf3+0x20>
     8b8:	5f 3f       	cpi	r21, 0xFF	; 255
     8ba:	29 f0       	breq	.+10     	; 0x8c6 <__divsf3+0x24>
     8bc:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_inf>
     8c0:	51 11       	cpse	r21, r1
     8c2:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>
     8c6:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_nan>

000008ca <__divsf3x>:
     8ca:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_split3>
     8ce:	68 f3       	brcs	.-38     	; 0x8aa <__divsf3+0x8>

000008d0 <__divsf3_pse>:
     8d0:	99 23       	and	r25, r25
     8d2:	b1 f3       	breq	.-20     	; 0x8c0 <__divsf3+0x1e>
     8d4:	55 23       	and	r21, r21
     8d6:	91 f3       	breq	.-28     	; 0x8bc <__divsf3+0x1a>
     8d8:	95 1b       	sub	r25, r21
     8da:	55 0b       	sbc	r21, r21
     8dc:	bb 27       	eor	r27, r27
     8de:	aa 27       	eor	r26, r26
     8e0:	62 17       	cp	r22, r18
     8e2:	73 07       	cpc	r23, r19
     8e4:	84 07       	cpc	r24, r20
     8e6:	38 f0       	brcs	.+14     	; 0x8f6 <__divsf3_pse+0x26>
     8e8:	9f 5f       	subi	r25, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	22 0f       	add	r18, r18
     8ee:	33 1f       	adc	r19, r19
     8f0:	44 1f       	adc	r20, r20
     8f2:	aa 1f       	adc	r26, r26
     8f4:	a9 f3       	breq	.-22     	; 0x8e0 <__divsf3_pse+0x10>
     8f6:	35 d0       	rcall	.+106    	; 0x962 <__divsf3_pse+0x92>
     8f8:	0e 2e       	mov	r0, r30
     8fa:	3a f0       	brmi	.+14     	; 0x90a <__divsf3_pse+0x3a>
     8fc:	e0 e8       	ldi	r30, 0x80	; 128
     8fe:	32 d0       	rcall	.+100    	; 0x964 <__divsf3_pse+0x94>
     900:	91 50       	subi	r25, 0x01	; 1
     902:	50 40       	sbci	r21, 0x00	; 0
     904:	e6 95       	lsr	r30
     906:	00 1c       	adc	r0, r0
     908:	ca f7       	brpl	.-14     	; 0x8fc <__divsf3_pse+0x2c>
     90a:	2b d0       	rcall	.+86     	; 0x962 <__divsf3_pse+0x92>
     90c:	fe 2f       	mov	r31, r30
     90e:	29 d0       	rcall	.+82     	; 0x962 <__divsf3_pse+0x92>
     910:	66 0f       	add	r22, r22
     912:	77 1f       	adc	r23, r23
     914:	88 1f       	adc	r24, r24
     916:	bb 1f       	adc	r27, r27
     918:	26 17       	cp	r18, r22
     91a:	37 07       	cpc	r19, r23
     91c:	48 07       	cpc	r20, r24
     91e:	ab 07       	cpc	r26, r27
     920:	b0 e8       	ldi	r27, 0x80	; 128
     922:	09 f0       	breq	.+2      	; 0x926 <__divsf3_pse+0x56>
     924:	bb 0b       	sbc	r27, r27
     926:	80 2d       	mov	r24, r0
     928:	bf 01       	movw	r22, r30
     92a:	ff 27       	eor	r31, r31
     92c:	93 58       	subi	r25, 0x83	; 131
     92e:	5f 4f       	sbci	r21, 0xFF	; 255
     930:	3a f0       	brmi	.+14     	; 0x940 <__divsf3_pse+0x70>
     932:	9e 3f       	cpi	r25, 0xFE	; 254
     934:	51 05       	cpc	r21, r1
     936:	78 f0       	brcs	.+30     	; 0x956 <__divsf3_pse+0x86>
     938:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_inf>
     93c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>
     940:	5f 3f       	cpi	r21, 0xFF	; 255
     942:	e4 f3       	brlt	.-8      	; 0x93c <__divsf3_pse+0x6c>
     944:	98 3e       	cpi	r25, 0xE8	; 232
     946:	d4 f3       	brlt	.-12     	; 0x93c <__divsf3_pse+0x6c>
     948:	86 95       	lsr	r24
     94a:	77 95       	ror	r23
     94c:	67 95       	ror	r22
     94e:	b7 95       	ror	r27
     950:	f7 95       	ror	r31
     952:	9f 5f       	subi	r25, 0xFF	; 255
     954:	c9 f7       	brne	.-14     	; 0x948 <__divsf3_pse+0x78>
     956:	88 0f       	add	r24, r24
     958:	91 1d       	adc	r25, r1
     95a:	96 95       	lsr	r25
     95c:	87 95       	ror	r24
     95e:	97 f9       	bld	r25, 7
     960:	08 95       	ret
     962:	e1 e0       	ldi	r30, 0x01	; 1
     964:	66 0f       	add	r22, r22
     966:	77 1f       	adc	r23, r23
     968:	88 1f       	adc	r24, r24
     96a:	bb 1f       	adc	r27, r27
     96c:	62 17       	cp	r22, r18
     96e:	73 07       	cpc	r23, r19
     970:	84 07       	cpc	r24, r20
     972:	ba 07       	cpc	r27, r26
     974:	20 f0       	brcs	.+8      	; 0x97e <__divsf3_pse+0xae>
     976:	62 1b       	sub	r22, r18
     978:	73 0b       	sbc	r23, r19
     97a:	84 0b       	sbc	r24, r20
     97c:	ba 0b       	sbc	r27, r26
     97e:	ee 1f       	adc	r30, r30
     980:	88 f7       	brcc	.-30     	; 0x964 <__divsf3_pse+0x94>
     982:	e0 95       	com	r30
     984:	08 95       	ret

00000986 <__fixsfsi>:
     986:	0e 94 ca 04 	call	0x994	; 0x994 <__fixunssfsi>
     98a:	68 94       	set
     98c:	b1 11       	cpse	r27, r1
     98e:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>
     992:	08 95       	ret

00000994 <__fixunssfsi>:
     994:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_splitA>
     998:	88 f0       	brcs	.+34     	; 0x9bc <__fixunssfsi+0x28>
     99a:	9f 57       	subi	r25, 0x7F	; 127
     99c:	98 f0       	brcs	.+38     	; 0x9c4 <__fixunssfsi+0x30>
     99e:	b9 2f       	mov	r27, r25
     9a0:	99 27       	eor	r25, r25
     9a2:	b7 51       	subi	r27, 0x17	; 23
     9a4:	b0 f0       	brcs	.+44     	; 0x9d2 <__fixunssfsi+0x3e>
     9a6:	e1 f0       	breq	.+56     	; 0x9e0 <__fixunssfsi+0x4c>
     9a8:	66 0f       	add	r22, r22
     9aa:	77 1f       	adc	r23, r23
     9ac:	88 1f       	adc	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	1a f0       	brmi	.+6      	; 0x9b8 <__fixunssfsi+0x24>
     9b2:	ba 95       	dec	r27
     9b4:	c9 f7       	brne	.-14     	; 0x9a8 <__fixunssfsi+0x14>
     9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <__fixunssfsi+0x4c>
     9b8:	b1 30       	cpi	r27, 0x01	; 1
     9ba:	91 f0       	breq	.+36     	; 0x9e0 <__fixunssfsi+0x4c>
     9bc:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_zero>
     9c0:	b1 e0       	ldi	r27, 0x01	; 1
     9c2:	08 95       	ret
     9c4:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_zero>
     9c8:	67 2f       	mov	r22, r23
     9ca:	78 2f       	mov	r23, r24
     9cc:	88 27       	eor	r24, r24
     9ce:	b8 5f       	subi	r27, 0xF8	; 248
     9d0:	39 f0       	breq	.+14     	; 0x9e0 <__fixunssfsi+0x4c>
     9d2:	b9 3f       	cpi	r27, 0xF9	; 249
     9d4:	cc f3       	brlt	.-14     	; 0x9c8 <__fixunssfsi+0x34>
     9d6:	86 95       	lsr	r24
     9d8:	77 95       	ror	r23
     9da:	67 95       	ror	r22
     9dc:	b3 95       	inc	r27
     9de:	d9 f7       	brne	.-10     	; 0x9d6 <__fixunssfsi+0x42>
     9e0:	3e f4       	brtc	.+14     	; 0x9f0 <__fixunssfsi+0x5c>
     9e2:	90 95       	com	r25
     9e4:	80 95       	com	r24
     9e6:	70 95       	com	r23
     9e8:	61 95       	neg	r22
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	8f 4f       	sbci	r24, 0xFF	; 255
     9ee:	9f 4f       	sbci	r25, 0xFF	; 255
     9f0:	08 95       	ret

000009f2 <__floatunsisf>:
     9f2:	e8 94       	clt
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <__floatsisf+0x12>

000009f6 <__floatsisf>:
     9f6:	97 fb       	bst	r25, 7
     9f8:	3e f4       	brtc	.+14     	; 0xa08 <__floatsisf+0x12>
     9fa:	90 95       	com	r25
     9fc:	80 95       	com	r24
     9fe:	70 95       	com	r23
     a00:	61 95       	neg	r22
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	8f 4f       	sbci	r24, 0xFF	; 255
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	99 23       	and	r25, r25
     a0a:	a9 f0       	breq	.+42     	; 0xa36 <__floatsisf+0x40>
     a0c:	f9 2f       	mov	r31, r25
     a0e:	96 e9       	ldi	r25, 0x96	; 150
     a10:	bb 27       	eor	r27, r27
     a12:	93 95       	inc	r25
     a14:	f6 95       	lsr	r31
     a16:	87 95       	ror	r24
     a18:	77 95       	ror	r23
     a1a:	67 95       	ror	r22
     a1c:	b7 95       	ror	r27
     a1e:	f1 11       	cpse	r31, r1
     a20:	f8 cf       	rjmp	.-16     	; 0xa12 <__floatsisf+0x1c>
     a22:	fa f4       	brpl	.+62     	; 0xa62 <__floatsisf+0x6c>
     a24:	bb 0f       	add	r27, r27
     a26:	11 f4       	brne	.+4      	; 0xa2c <__floatsisf+0x36>
     a28:	60 ff       	sbrs	r22, 0
     a2a:	1b c0       	rjmp	.+54     	; 0xa62 <__floatsisf+0x6c>
     a2c:	6f 5f       	subi	r22, 0xFF	; 255
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	8f 4f       	sbci	r24, 0xFF	; 255
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	16 c0       	rjmp	.+44     	; 0xa62 <__floatsisf+0x6c>
     a36:	88 23       	and	r24, r24
     a38:	11 f0       	breq	.+4      	; 0xa3e <__floatsisf+0x48>
     a3a:	96 e9       	ldi	r25, 0x96	; 150
     a3c:	11 c0       	rjmp	.+34     	; 0xa60 <__floatsisf+0x6a>
     a3e:	77 23       	and	r23, r23
     a40:	21 f0       	breq	.+8      	; 0xa4a <__floatsisf+0x54>
     a42:	9e e8       	ldi	r25, 0x8E	; 142
     a44:	87 2f       	mov	r24, r23
     a46:	76 2f       	mov	r23, r22
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <__floatsisf+0x5e>
     a4a:	66 23       	and	r22, r22
     a4c:	71 f0       	breq	.+28     	; 0xa6a <__floatsisf+0x74>
     a4e:	96 e8       	ldi	r25, 0x86	; 134
     a50:	86 2f       	mov	r24, r22
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	2a f0       	brmi	.+10     	; 0xa62 <__floatsisf+0x6c>
     a58:	9a 95       	dec	r25
     a5a:	66 0f       	add	r22, r22
     a5c:	77 1f       	adc	r23, r23
     a5e:	88 1f       	adc	r24, r24
     a60:	da f7       	brpl	.-10     	; 0xa58 <__floatsisf+0x62>
     a62:	88 0f       	add	r24, r24
     a64:	96 95       	lsr	r25
     a66:	87 95       	ror	r24
     a68:	97 f9       	bld	r25, 7
     a6a:	08 95       	ret

00000a6c <__fp_inf>:
     a6c:	97 f9       	bld	r25, 7
     a6e:	9f 67       	ori	r25, 0x7F	; 127
     a70:	80 e8       	ldi	r24, 0x80	; 128
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	08 95       	ret

00000a78 <__fp_nan>:
     a78:	9f ef       	ldi	r25, 0xFF	; 255
     a7a:	80 ec       	ldi	r24, 0xC0	; 192
     a7c:	08 95       	ret

00000a7e <__fp_pscA>:
     a7e:	00 24       	eor	r0, r0
     a80:	0a 94       	dec	r0
     a82:	16 16       	cp	r1, r22
     a84:	17 06       	cpc	r1, r23
     a86:	18 06       	cpc	r1, r24
     a88:	09 06       	cpc	r0, r25
     a8a:	08 95       	ret

00000a8c <__fp_pscB>:
     a8c:	00 24       	eor	r0, r0
     a8e:	0a 94       	dec	r0
     a90:	12 16       	cp	r1, r18
     a92:	13 06       	cpc	r1, r19
     a94:	14 06       	cpc	r1, r20
     a96:	05 06       	cpc	r0, r21
     a98:	08 95       	ret

00000a9a <__fp_round>:
     a9a:	09 2e       	mov	r0, r25
     a9c:	03 94       	inc	r0
     a9e:	00 0c       	add	r0, r0
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <__fp_round+0xc>
     aa2:	88 23       	and	r24, r24
     aa4:	52 f0       	brmi	.+20     	; 0xaba <__fp_round+0x20>
     aa6:	bb 0f       	add	r27, r27
     aa8:	40 f4       	brcc	.+16     	; 0xaba <__fp_round+0x20>
     aaa:	bf 2b       	or	r27, r31
     aac:	11 f4       	brne	.+4      	; 0xab2 <__fp_round+0x18>
     aae:	60 ff       	sbrs	r22, 0
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <__fp_round+0x20>
     ab2:	6f 5f       	subi	r22, 0xFF	; 255
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	8f 4f       	sbci	r24, 0xFF	; 255
     ab8:	9f 4f       	sbci	r25, 0xFF	; 255
     aba:	08 95       	ret

00000abc <__fp_split3>:
     abc:	57 fd       	sbrc	r21, 7
     abe:	90 58       	subi	r25, 0x80	; 128
     ac0:	44 0f       	add	r20, r20
     ac2:	55 1f       	adc	r21, r21
     ac4:	59 f0       	breq	.+22     	; 0xadc <__fp_splitA+0x10>
     ac6:	5f 3f       	cpi	r21, 0xFF	; 255
     ac8:	71 f0       	breq	.+28     	; 0xae6 <__fp_splitA+0x1a>
     aca:	47 95       	ror	r20

00000acc <__fp_splitA>:
     acc:	88 0f       	add	r24, r24
     ace:	97 fb       	bst	r25, 7
     ad0:	99 1f       	adc	r25, r25
     ad2:	61 f0       	breq	.+24     	; 0xaec <__fp_splitA+0x20>
     ad4:	9f 3f       	cpi	r25, 0xFF	; 255
     ad6:	79 f0       	breq	.+30     	; 0xaf6 <__fp_splitA+0x2a>
     ad8:	87 95       	ror	r24
     ada:	08 95       	ret
     adc:	12 16       	cp	r1, r18
     ade:	13 06       	cpc	r1, r19
     ae0:	14 06       	cpc	r1, r20
     ae2:	55 1f       	adc	r21, r21
     ae4:	f2 cf       	rjmp	.-28     	; 0xaca <__fp_split3+0xe>
     ae6:	46 95       	lsr	r20
     ae8:	f1 df       	rcall	.-30     	; 0xacc <__fp_splitA>
     aea:	08 c0       	rjmp	.+16     	; 0xafc <__fp_splitA+0x30>
     aec:	16 16       	cp	r1, r22
     aee:	17 06       	cpc	r1, r23
     af0:	18 06       	cpc	r1, r24
     af2:	99 1f       	adc	r25, r25
     af4:	f1 cf       	rjmp	.-30     	; 0xad8 <__fp_splitA+0xc>
     af6:	86 95       	lsr	r24
     af8:	71 05       	cpc	r23, r1
     afa:	61 05       	cpc	r22, r1
     afc:	08 94       	sec
     afe:	08 95       	ret

00000b00 <__fp_zero>:
     b00:	e8 94       	clt

00000b02 <__fp_szero>:
     b02:	bb 27       	eor	r27, r27
     b04:	66 27       	eor	r22, r22
     b06:	77 27       	eor	r23, r23
     b08:	cb 01       	movw	r24, r22
     b0a:	97 f9       	bld	r25, 7
     b0c:	08 95       	ret

00000b0e <__mulsf3>:
     b0e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__mulsf3x>
     b12:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_round>
     b16:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__fp_pscA>
     b1a:	38 f0       	brcs	.+14     	; 0xb2a <__mulsf3+0x1c>
     b1c:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_pscB>
     b20:	20 f0       	brcs	.+8      	; 0xb2a <__mulsf3+0x1c>
     b22:	95 23       	and	r25, r21
     b24:	11 f0       	breq	.+4      	; 0xb2a <__mulsf3+0x1c>
     b26:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_inf>
     b2a:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_nan>
     b2e:	11 24       	eor	r1, r1
     b30:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>

00000b34 <__mulsf3x>:
     b34:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_split3>
     b38:	70 f3       	brcs	.-36     	; 0xb16 <__mulsf3+0x8>

00000b3a <__mulsf3_pse>:
     b3a:	95 9f       	mul	r25, r21
     b3c:	c1 f3       	breq	.-16     	; 0xb2e <__mulsf3+0x20>
     b3e:	95 0f       	add	r25, r21
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	55 1f       	adc	r21, r21
     b44:	62 9f       	mul	r22, r18
     b46:	f0 01       	movw	r30, r0
     b48:	72 9f       	mul	r23, r18
     b4a:	bb 27       	eor	r27, r27
     b4c:	f0 0d       	add	r31, r0
     b4e:	b1 1d       	adc	r27, r1
     b50:	63 9f       	mul	r22, r19
     b52:	aa 27       	eor	r26, r26
     b54:	f0 0d       	add	r31, r0
     b56:	b1 1d       	adc	r27, r1
     b58:	aa 1f       	adc	r26, r26
     b5a:	64 9f       	mul	r22, r20
     b5c:	66 27       	eor	r22, r22
     b5e:	b0 0d       	add	r27, r0
     b60:	a1 1d       	adc	r26, r1
     b62:	66 1f       	adc	r22, r22
     b64:	82 9f       	mul	r24, r18
     b66:	22 27       	eor	r18, r18
     b68:	b0 0d       	add	r27, r0
     b6a:	a1 1d       	adc	r26, r1
     b6c:	62 1f       	adc	r22, r18
     b6e:	73 9f       	mul	r23, r19
     b70:	b0 0d       	add	r27, r0
     b72:	a1 1d       	adc	r26, r1
     b74:	62 1f       	adc	r22, r18
     b76:	83 9f       	mul	r24, r19
     b78:	a0 0d       	add	r26, r0
     b7a:	61 1d       	adc	r22, r1
     b7c:	22 1f       	adc	r18, r18
     b7e:	74 9f       	mul	r23, r20
     b80:	33 27       	eor	r19, r19
     b82:	a0 0d       	add	r26, r0
     b84:	61 1d       	adc	r22, r1
     b86:	23 1f       	adc	r18, r19
     b88:	84 9f       	mul	r24, r20
     b8a:	60 0d       	add	r22, r0
     b8c:	21 1d       	adc	r18, r1
     b8e:	82 2f       	mov	r24, r18
     b90:	76 2f       	mov	r23, r22
     b92:	6a 2f       	mov	r22, r26
     b94:	11 24       	eor	r1, r1
     b96:	9f 57       	subi	r25, 0x7F	; 127
     b98:	50 40       	sbci	r21, 0x00	; 0
     b9a:	9a f0       	brmi	.+38     	; 0xbc2 <__mulsf3_pse+0x88>
     b9c:	f1 f0       	breq	.+60     	; 0xbda <__mulsf3_pse+0xa0>
     b9e:	88 23       	and	r24, r24
     ba0:	4a f0       	brmi	.+18     	; 0xbb4 <__mulsf3_pse+0x7a>
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	bb 1f       	adc	r27, r27
     ba8:	66 1f       	adc	r22, r22
     baa:	77 1f       	adc	r23, r23
     bac:	88 1f       	adc	r24, r24
     bae:	91 50       	subi	r25, 0x01	; 1
     bb0:	50 40       	sbci	r21, 0x00	; 0
     bb2:	a9 f7       	brne	.-22     	; 0xb9e <__mulsf3_pse+0x64>
     bb4:	9e 3f       	cpi	r25, 0xFE	; 254
     bb6:	51 05       	cpc	r21, r1
     bb8:	80 f0       	brcs	.+32     	; 0xbda <__mulsf3_pse+0xa0>
     bba:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_inf>
     bbe:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>
     bc2:	5f 3f       	cpi	r21, 0xFF	; 255
     bc4:	e4 f3       	brlt	.-8      	; 0xbbe <__mulsf3_pse+0x84>
     bc6:	98 3e       	cpi	r25, 0xE8	; 232
     bc8:	d4 f3       	brlt	.-12     	; 0xbbe <__mulsf3_pse+0x84>
     bca:	86 95       	lsr	r24
     bcc:	77 95       	ror	r23
     bce:	67 95       	ror	r22
     bd0:	b7 95       	ror	r27
     bd2:	f7 95       	ror	r31
     bd4:	e7 95       	ror	r30
     bd6:	9f 5f       	subi	r25, 0xFF	; 255
     bd8:	c1 f7       	brne	.-16     	; 0xbca <__mulsf3_pse+0x90>
     bda:	fe 2b       	or	r31, r30
     bdc:	88 0f       	add	r24, r24
     bde:	91 1d       	adc	r25, r1
     be0:	96 95       	lsr	r25
     be2:	87 95       	ror	r24
     be4:	97 f9       	bld	r25, 7
     be6:	08 95       	ret

00000be8 <__divmodhi4>:
     be8:	97 fb       	bst	r25, 7
     bea:	07 2e       	mov	r0, r23
     bec:	16 f4       	brtc	.+4      	; 0xbf2 <__divmodhi4+0xa>
     bee:	00 94       	com	r0
     bf0:	07 d0       	rcall	.+14     	; 0xc00 <__divmodhi4_neg1>
     bf2:	77 fd       	sbrc	r23, 7
     bf4:	09 d0       	rcall	.+18     	; 0xc08 <__divmodhi4_neg2>
     bf6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__udivmodhi4>
     bfa:	07 fc       	sbrc	r0, 7
     bfc:	05 d0       	rcall	.+10     	; 0xc08 <__divmodhi4_neg2>
     bfe:	3e f4       	brtc	.+14     	; 0xc0e <__divmodhi4_exit>

00000c00 <__divmodhi4_neg1>:
     c00:	90 95       	com	r25
     c02:	81 95       	neg	r24
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	08 95       	ret

00000c08 <__divmodhi4_neg2>:
     c08:	70 95       	com	r23
     c0a:	61 95       	neg	r22
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c0e <__divmodhi4_exit>:
     c0e:	08 95       	ret

00000c10 <__tablejump2__>:
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	05 90       	lpm	r0, Z+
     c16:	f4 91       	lpm	r31, Z
     c18:	e0 2d       	mov	r30, r0
     c1a:	09 94       	ijmp

00000c1c <__udivmodhi4>:
     c1c:	aa 1b       	sub	r26, r26
     c1e:	bb 1b       	sub	r27, r27
     c20:	51 e1       	ldi	r21, 0x11	; 17
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <__udivmodhi4_ep>

00000c24 <__udivmodhi4_loop>:
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	a6 17       	cp	r26, r22
     c2a:	b7 07       	cpc	r27, r23
     c2c:	10 f0       	brcs	.+4      	; 0xc32 <__udivmodhi4_ep>
     c2e:	a6 1b       	sub	r26, r22
     c30:	b7 0b       	sbc	r27, r23

00000c32 <__udivmodhi4_ep>:
     c32:	88 1f       	adc	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	5a 95       	dec	r21
     c38:	a9 f7       	brne	.-22     	; 0xc24 <__udivmodhi4_loop>
     c3a:	80 95       	com	r24
     c3c:	90 95       	com	r25
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	08 95       	ret

00000c44 <do_rand>:
     c44:	8f 92       	push	r8
     c46:	9f 92       	push	r9
     c48:	af 92       	push	r10
     c4a:	bf 92       	push	r11
     c4c:	cf 92       	push	r12
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
     c5a:	68 81       	ld	r22, Y
     c5c:	79 81       	ldd	r23, Y+1	; 0x01
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	61 15       	cp	r22, r1
     c64:	71 05       	cpc	r23, r1
     c66:	81 05       	cpc	r24, r1
     c68:	91 05       	cpc	r25, r1
     c6a:	21 f4       	brne	.+8      	; 0xc74 <do_rand+0x30>
     c6c:	64 e2       	ldi	r22, 0x24	; 36
     c6e:	79 ed       	ldi	r23, 0xD9	; 217
     c70:	8b e5       	ldi	r24, 0x5B	; 91
     c72:	97 e0       	ldi	r25, 0x07	; 7
     c74:	2d e1       	ldi	r18, 0x1D	; 29
     c76:	33 ef       	ldi	r19, 0xF3	; 243
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	0e 94 66 09 	call	0x12cc	; 0x12cc <__divmodsi4>
     c80:	49 01       	movw	r8, r18
     c82:	5a 01       	movw	r10, r20
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	a7 ea       	ldi	r26, 0xA7	; 167
     c8a:	b1 e4       	ldi	r27, 0x41	; 65
     c8c:	0e 94 85 09 	call	0x130a	; 0x130a <__muluhisi3>
     c90:	6b 01       	movw	r12, r22
     c92:	7c 01       	movw	r14, r24
     c94:	ac ee       	ldi	r26, 0xEC	; 236
     c96:	b4 ef       	ldi	r27, 0xF4	; 244
     c98:	a5 01       	movw	r20, r10
     c9a:	94 01       	movw	r18, r8
     c9c:	0e 94 93 09 	call	0x1326	; 0x1326 <__mulohisi3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	8c 0d       	add	r24, r12
     ca6:	9d 1d       	adc	r25, r13
     ca8:	ae 1d       	adc	r26, r14
     caa:	bf 1d       	adc	r27, r15
     cac:	b7 ff       	sbrs	r27, 7
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <do_rand+0x72>
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	a1 09       	sbc	r26, r1
     cb4:	b0 48       	sbci	r27, 0x80	; 128
     cb6:	88 83       	st	Y, r24
     cb8:	99 83       	std	Y+1, r25	; 0x01
     cba:	aa 83       	std	Y+2, r26	; 0x02
     cbc:	bb 83       	std	Y+3, r27	; 0x03
     cbe:	9f 77       	andi	r25, 0x7F	; 127
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	9f 90       	pop	r9
     cd2:	8f 90       	pop	r8
     cd4:	08 95       	ret

00000cd6 <rand_r>:
     cd6:	0e 94 22 06 	call	0xc44	; 0xc44 <do_rand>
     cda:	08 95       	ret

00000cdc <rand>:
     cdc:	80 e6       	ldi	r24, 0x60	; 96
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 22 06 	call	0xc44	; 0xc44 <do_rand>
     ce4:	08 95       	ret

00000ce6 <srand>:
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     cee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     cf2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     cf6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     cfa:	08 95       	ret

00000cfc <__itoa_ncheck>:
     cfc:	bb 27       	eor	r27, r27
     cfe:	4a 30       	cpi	r20, 0x0A	; 10
     d00:	31 f4       	brne	.+12     	; 0xd0e <__itoa_ncheck+0x12>
     d02:	99 23       	and	r25, r25
     d04:	22 f4       	brpl	.+8      	; 0xd0e <__itoa_ncheck+0x12>
     d06:	bd e2       	ldi	r27, 0x2D	; 45
     d08:	90 95       	com	r25
     d0a:	81 95       	neg	r24
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__utoa_common>

00000d12 <__utoa_ncheck>:
     d12:	bb 27       	eor	r27, r27

00000d14 <__utoa_common>:
     d14:	fb 01       	movw	r30, r22
     d16:	55 27       	eor	r21, r21
     d18:	aa 27       	eor	r26, r26
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	aa 1f       	adc	r26, r26
     d20:	a4 17       	cp	r26, r20
     d22:	10 f0       	brcs	.+4      	; 0xd28 <__utoa_common+0x14>
     d24:	a4 1b       	sub	r26, r20
     d26:	83 95       	inc	r24
     d28:	50 51       	subi	r21, 0x10	; 16
     d2a:	b9 f7       	brne	.-18     	; 0xd1a <__utoa_common+0x6>
     d2c:	a0 5d       	subi	r26, 0xD0	; 208
     d2e:	aa 33       	cpi	r26, 0x3A	; 58
     d30:	08 f0       	brcs	.+2      	; 0xd34 <__utoa_common+0x20>
     d32:	a9 5d       	subi	r26, 0xD9	; 217
     d34:	a1 93       	st	Z+, r26
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	79 f7       	brne	.-34     	; 0xd18 <__utoa_common+0x4>
     d3a:	b1 11       	cpse	r27, r1
     d3c:	b1 93       	st	Z+, r27
     d3e:	11 92       	st	Z+, r1
     d40:	cb 01       	movw	r24, r22
     d42:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <strrev>

00000d46 <sprintf>:
     d46:	ae e0       	ldi	r26, 0x0E	; 14
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e9 ea       	ldi	r30, 0xA9	; 169
     d4c:	f6 e0       	ldi	r31, 0x06	; 6
     d4e:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__prologue_saves__+0x1c>
     d52:	0d 89       	ldd	r16, Y+21	; 0x15
     d54:	1e 89       	ldd	r17, Y+22	; 0x16
     d56:	86 e0       	ldi	r24, 0x06	; 6
     d58:	8c 83       	std	Y+4, r24	; 0x04
     d5a:	1a 83       	std	Y+2, r17	; 0x02
     d5c:	09 83       	std	Y+1, r16	; 0x01
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	9f e7       	ldi	r25, 0x7F	; 127
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	ae 01       	movw	r20, r28
     d68:	47 5e       	subi	r20, 0xE7	; 231
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	6f 89       	ldd	r22, Y+23	; 0x17
     d6e:	78 8d       	ldd	r23, Y+24	; 0x18
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vfprintf>
     d78:	ef 81       	ldd	r30, Y+7	; 0x07
     d7a:	f8 85       	ldd	r31, Y+8	; 0x08
     d7c:	e0 0f       	add	r30, r16
     d7e:	f1 1f       	adc	r31, r17
     d80:	10 82       	st	Z, r1
     d82:	2e 96       	adiw	r28, 0x0e	; 14
     d84:	e4 e0       	ldi	r30, 0x04	; 4
     d86:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__epilogue_restores__+0x1c>

00000d8a <vfprintf>:
     d8a:	ab e0       	ldi	r26, 0x0B	; 11
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb ec       	ldi	r30, 0xCB	; 203
     d90:	f6 e0       	ldi	r31, 0x06	; 6
     d92:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__prologue_saves__>
     d96:	6c 01       	movw	r12, r24
     d98:	7b 01       	movw	r14, r22
     d9a:	8a 01       	movw	r16, r20
     d9c:	fc 01       	movw	r30, r24
     d9e:	17 82       	std	Z+7, r1	; 0x07
     da0:	16 82       	std	Z+6, r1	; 0x06
     da2:	83 81       	ldd	r24, Z+3	; 0x03
     da4:	81 ff       	sbrs	r24, 1
     da6:	cc c1       	rjmp	.+920    	; 0x1140 <vfprintf+0x3b6>
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	3c 01       	movw	r6, r24
     dae:	f6 01       	movw	r30, r12
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	f7 01       	movw	r30, r14
     db4:	93 fd       	sbrc	r25, 3
     db6:	85 91       	lpm	r24, Z+
     db8:	93 ff       	sbrs	r25, 3
     dba:	81 91       	ld	r24, Z+
     dbc:	7f 01       	movw	r14, r30
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <vfprintf+0x3a>
     dc2:	ba c1       	rjmp	.+884    	; 0x1138 <vfprintf+0x3ae>
     dc4:	85 32       	cpi	r24, 0x25	; 37
     dc6:	39 f4       	brne	.+14     	; 0xdd6 <vfprintf+0x4c>
     dc8:	93 fd       	sbrc	r25, 3
     dca:	85 91       	lpm	r24, Z+
     dcc:	93 ff       	sbrs	r25, 3
     dce:	81 91       	ld	r24, Z+
     dd0:	7f 01       	movw	r14, r30
     dd2:	85 32       	cpi	r24, 0x25	; 37
     dd4:	29 f4       	brne	.+10     	; 0xde0 <vfprintf+0x56>
     dd6:	b6 01       	movw	r22, r12
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
     dde:	e7 cf       	rjmp	.-50     	; 0xdae <vfprintf+0x24>
     de0:	91 2c       	mov	r9, r1
     de2:	21 2c       	mov	r2, r1
     de4:	31 2c       	mov	r3, r1
     de6:	ff e1       	ldi	r31, 0x1F	; 31
     de8:	f3 15       	cp	r31, r3
     dea:	d8 f0       	brcs	.+54     	; 0xe22 <vfprintf+0x98>
     dec:	8b 32       	cpi	r24, 0x2B	; 43
     dee:	79 f0       	breq	.+30     	; 0xe0e <vfprintf+0x84>
     df0:	38 f4       	brcc	.+14     	; 0xe00 <vfprintf+0x76>
     df2:	80 32       	cpi	r24, 0x20	; 32
     df4:	79 f0       	breq	.+30     	; 0xe14 <vfprintf+0x8a>
     df6:	83 32       	cpi	r24, 0x23	; 35
     df8:	a1 f4       	brne	.+40     	; 0xe22 <vfprintf+0x98>
     dfa:	23 2d       	mov	r18, r3
     dfc:	20 61       	ori	r18, 0x10	; 16
     dfe:	1d c0       	rjmp	.+58     	; 0xe3a <vfprintf+0xb0>
     e00:	8d 32       	cpi	r24, 0x2D	; 45
     e02:	61 f0       	breq	.+24     	; 0xe1c <vfprintf+0x92>
     e04:	80 33       	cpi	r24, 0x30	; 48
     e06:	69 f4       	brne	.+26     	; 0xe22 <vfprintf+0x98>
     e08:	23 2d       	mov	r18, r3
     e0a:	21 60       	ori	r18, 0x01	; 1
     e0c:	16 c0       	rjmp	.+44     	; 0xe3a <vfprintf+0xb0>
     e0e:	83 2d       	mov	r24, r3
     e10:	82 60       	ori	r24, 0x02	; 2
     e12:	38 2e       	mov	r3, r24
     e14:	e3 2d       	mov	r30, r3
     e16:	e4 60       	ori	r30, 0x04	; 4
     e18:	3e 2e       	mov	r3, r30
     e1a:	2a c0       	rjmp	.+84     	; 0xe70 <vfprintf+0xe6>
     e1c:	f3 2d       	mov	r31, r3
     e1e:	f8 60       	ori	r31, 0x08	; 8
     e20:	1d c0       	rjmp	.+58     	; 0xe5c <vfprintf+0xd2>
     e22:	37 fc       	sbrc	r3, 7
     e24:	2d c0       	rjmp	.+90     	; 0xe80 <vfprintf+0xf6>
     e26:	20 ed       	ldi	r18, 0xD0	; 208
     e28:	28 0f       	add	r18, r24
     e2a:	2a 30       	cpi	r18, 0x0A	; 10
     e2c:	40 f0       	brcs	.+16     	; 0xe3e <vfprintf+0xb4>
     e2e:	8e 32       	cpi	r24, 0x2E	; 46
     e30:	b9 f4       	brne	.+46     	; 0xe60 <vfprintf+0xd6>
     e32:	36 fc       	sbrc	r3, 6
     e34:	81 c1       	rjmp	.+770    	; 0x1138 <vfprintf+0x3ae>
     e36:	23 2d       	mov	r18, r3
     e38:	20 64       	ori	r18, 0x40	; 64
     e3a:	32 2e       	mov	r3, r18
     e3c:	19 c0       	rjmp	.+50     	; 0xe70 <vfprintf+0xe6>
     e3e:	36 fe       	sbrs	r3, 6
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0xc4>
     e42:	8a e0       	ldi	r24, 0x0A	; 10
     e44:	98 9e       	mul	r9, r24
     e46:	20 0d       	add	r18, r0
     e48:	11 24       	eor	r1, r1
     e4a:	92 2e       	mov	r9, r18
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <vfprintf+0xe6>
     e4e:	ea e0       	ldi	r30, 0x0A	; 10
     e50:	2e 9e       	mul	r2, r30
     e52:	20 0d       	add	r18, r0
     e54:	11 24       	eor	r1, r1
     e56:	22 2e       	mov	r2, r18
     e58:	f3 2d       	mov	r31, r3
     e5a:	f0 62       	ori	r31, 0x20	; 32
     e5c:	3f 2e       	mov	r3, r31
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <vfprintf+0xe6>
     e60:	8c 36       	cpi	r24, 0x6C	; 108
     e62:	21 f4       	brne	.+8      	; 0xe6c <vfprintf+0xe2>
     e64:	83 2d       	mov	r24, r3
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	38 2e       	mov	r3, r24
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0xe6>
     e6c:	88 36       	cpi	r24, 0x68	; 104
     e6e:	41 f4       	brne	.+16     	; 0xe80 <vfprintf+0xf6>
     e70:	f7 01       	movw	r30, r14
     e72:	93 fd       	sbrc	r25, 3
     e74:	85 91       	lpm	r24, Z+
     e76:	93 ff       	sbrs	r25, 3
     e78:	81 91       	ld	r24, Z+
     e7a:	7f 01       	movw	r14, r30
     e7c:	81 11       	cpse	r24, r1
     e7e:	b3 cf       	rjmp	.-154    	; 0xde6 <vfprintf+0x5c>
     e80:	98 2f       	mov	r25, r24
     e82:	9f 7d       	andi	r25, 0xDF	; 223
     e84:	95 54       	subi	r25, 0x45	; 69
     e86:	93 30       	cpi	r25, 0x03	; 3
     e88:	28 f4       	brcc	.+10     	; 0xe94 <vfprintf+0x10a>
     e8a:	0c 5f       	subi	r16, 0xFC	; 252
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	9f e3       	ldi	r25, 0x3F	; 63
     e90:	99 83       	std	Y+1, r25	; 0x01
     e92:	0d c0       	rjmp	.+26     	; 0xeae <vfprintf+0x124>
     e94:	83 36       	cpi	r24, 0x63	; 99
     e96:	31 f0       	breq	.+12     	; 0xea4 <vfprintf+0x11a>
     e98:	83 37       	cpi	r24, 0x73	; 115
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <vfprintf+0x12e>
     e9c:	83 35       	cpi	r24, 0x53	; 83
     e9e:	09 f0       	breq	.+2      	; 0xea2 <vfprintf+0x118>
     ea0:	59 c0       	rjmp	.+178    	; 0xf54 <vfprintf+0x1ca>
     ea2:	21 c0       	rjmp	.+66     	; 0xee6 <vfprintf+0x15c>
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 81       	ld	r24, Z
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	0e 5f       	subi	r16, 0xFE	; 254
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	88 24       	eor	r8, r8
     eb0:	83 94       	inc	r8
     eb2:	91 2c       	mov	r9, r1
     eb4:	53 01       	movw	r10, r6
     eb6:	13 c0       	rjmp	.+38     	; 0xede <vfprintf+0x154>
     eb8:	28 01       	movw	r4, r16
     eba:	f2 e0       	ldi	r31, 0x02	; 2
     ebc:	4f 0e       	add	r4, r31
     ebe:	51 1c       	adc	r5, r1
     ec0:	f8 01       	movw	r30, r16
     ec2:	a0 80       	ld	r10, Z
     ec4:	b1 80       	ldd	r11, Z+1	; 0x01
     ec6:	36 fe       	sbrs	r3, 6
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <vfprintf+0x146>
     eca:	69 2d       	mov	r22, r9
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x14a>
     ed0:	6f ef       	ldi	r22, 0xFF	; 255
     ed2:	7f ef       	ldi	r23, 0xFF	; 255
     ed4:	c5 01       	movw	r24, r10
     ed6:	0e 94 b1 08 	call	0x1162	; 0x1162 <strnlen>
     eda:	4c 01       	movw	r8, r24
     edc:	82 01       	movw	r16, r4
     ede:	f3 2d       	mov	r31, r3
     ee0:	ff 77       	andi	r31, 0x7F	; 127
     ee2:	3f 2e       	mov	r3, r31
     ee4:	16 c0       	rjmp	.+44     	; 0xf12 <vfprintf+0x188>
     ee6:	28 01       	movw	r4, r16
     ee8:	22 e0       	ldi	r18, 0x02	; 2
     eea:	42 0e       	add	r4, r18
     eec:	51 1c       	adc	r5, r1
     eee:	f8 01       	movw	r30, r16
     ef0:	a0 80       	ld	r10, Z
     ef2:	b1 80       	ldd	r11, Z+1	; 0x01
     ef4:	36 fe       	sbrs	r3, 6
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <vfprintf+0x174>
     ef8:	69 2d       	mov	r22, r9
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfprintf+0x178>
     efe:	6f ef       	ldi	r22, 0xFF	; 255
     f00:	7f ef       	ldi	r23, 0xFF	; 255
     f02:	c5 01       	movw	r24, r10
     f04:	0e 94 a6 08 	call	0x114c	; 0x114c <strnlen_P>
     f08:	4c 01       	movw	r8, r24
     f0a:	f3 2d       	mov	r31, r3
     f0c:	f0 68       	ori	r31, 0x80	; 128
     f0e:	3f 2e       	mov	r3, r31
     f10:	82 01       	movw	r16, r4
     f12:	33 fc       	sbrc	r3, 3
     f14:	1b c0       	rjmp	.+54     	; 0xf4c <vfprintf+0x1c2>
     f16:	82 2d       	mov	r24, r2
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	88 16       	cp	r8, r24
     f1c:	99 06       	cpc	r9, r25
     f1e:	b0 f4       	brcc	.+44     	; 0xf4c <vfprintf+0x1c2>
     f20:	b6 01       	movw	r22, r12
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
     f2a:	2a 94       	dec	r2
     f2c:	f4 cf       	rjmp	.-24     	; 0xf16 <vfprintf+0x18c>
     f2e:	f5 01       	movw	r30, r10
     f30:	37 fc       	sbrc	r3, 7
     f32:	85 91       	lpm	r24, Z+
     f34:	37 fe       	sbrs	r3, 7
     f36:	81 91       	ld	r24, Z+
     f38:	5f 01       	movw	r10, r30
     f3a:	b6 01       	movw	r22, r12
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
     f42:	21 10       	cpse	r2, r1
     f44:	2a 94       	dec	r2
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	82 1a       	sub	r8, r18
     f4a:	91 08       	sbc	r9, r1
     f4c:	81 14       	cp	r8, r1
     f4e:	91 04       	cpc	r9, r1
     f50:	71 f7       	brne	.-36     	; 0xf2e <vfprintf+0x1a4>
     f52:	e8 c0       	rjmp	.+464    	; 0x1124 <vfprintf+0x39a>
     f54:	84 36       	cpi	r24, 0x64	; 100
     f56:	11 f0       	breq	.+4      	; 0xf5c <vfprintf+0x1d2>
     f58:	89 36       	cpi	r24, 0x69	; 105
     f5a:	41 f5       	brne	.+80     	; 0xfac <vfprintf+0x222>
     f5c:	f8 01       	movw	r30, r16
     f5e:	37 fe       	sbrs	r3, 7
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <vfprintf+0x1e6>
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	0c 5f       	subi	r16, 0xFC	; 252
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	08 c0       	rjmp	.+16     	; 0xf80 <vfprintf+0x1f6>
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	07 2e       	mov	r0, r23
     f76:	00 0c       	add	r0, r0
     f78:	88 0b       	sbc	r24, r24
     f7a:	99 0b       	sbc	r25, r25
     f7c:	0e 5f       	subi	r16, 0xFE	; 254
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	f3 2d       	mov	r31, r3
     f82:	ff 76       	andi	r31, 0x6F	; 111
     f84:	3f 2e       	mov	r3, r31
     f86:	97 ff       	sbrs	r25, 7
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <vfprintf+0x212>
     f8a:	90 95       	com	r25
     f8c:	80 95       	com	r24
     f8e:	70 95       	com	r23
     f90:	61 95       	neg	r22
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	f0 68       	ori	r31, 0x80	; 128
     f9a:	3f 2e       	mov	r3, r31
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	a3 01       	movw	r20, r6
     fa2:	0e 94 08 09 	call	0x1210	; 0x1210 <__ultoa_invert>
     fa6:	88 2e       	mov	r8, r24
     fa8:	86 18       	sub	r8, r6
     faa:	45 c0       	rjmp	.+138    	; 0x1036 <vfprintf+0x2ac>
     fac:	85 37       	cpi	r24, 0x75	; 117
     fae:	31 f4       	brne	.+12     	; 0xfbc <vfprintf+0x232>
     fb0:	23 2d       	mov	r18, r3
     fb2:	2f 7e       	andi	r18, 0xEF	; 239
     fb4:	b2 2e       	mov	r11, r18
     fb6:	2a e0       	ldi	r18, 0x0A	; 10
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	25 c0       	rjmp	.+74     	; 0x1006 <vfprintf+0x27c>
     fbc:	93 2d       	mov	r25, r3
     fbe:	99 7f       	andi	r25, 0xF9	; 249
     fc0:	b9 2e       	mov	r11, r25
     fc2:	8f 36       	cpi	r24, 0x6F	; 111
     fc4:	c1 f0       	breq	.+48     	; 0xff6 <vfprintf+0x26c>
     fc6:	18 f4       	brcc	.+6      	; 0xfce <vfprintf+0x244>
     fc8:	88 35       	cpi	r24, 0x58	; 88
     fca:	79 f0       	breq	.+30     	; 0xfea <vfprintf+0x260>
     fcc:	b5 c0       	rjmp	.+362    	; 0x1138 <vfprintf+0x3ae>
     fce:	80 37       	cpi	r24, 0x70	; 112
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <vfprintf+0x24e>
     fd2:	88 37       	cpi	r24, 0x78	; 120
     fd4:	21 f0       	breq	.+8      	; 0xfde <vfprintf+0x254>
     fd6:	b0 c0       	rjmp	.+352    	; 0x1138 <vfprintf+0x3ae>
     fd8:	e9 2f       	mov	r30, r25
     fda:	e0 61       	ori	r30, 0x10	; 16
     fdc:	be 2e       	mov	r11, r30
     fde:	b4 fe       	sbrs	r11, 4
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <vfprintf+0x272>
     fe2:	fb 2d       	mov	r31, r11
     fe4:	f4 60       	ori	r31, 0x04	; 4
     fe6:	bf 2e       	mov	r11, r31
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <vfprintf+0x272>
     fea:	34 fe       	sbrs	r3, 4
     fec:	0a c0       	rjmp	.+20     	; 0x1002 <vfprintf+0x278>
     fee:	29 2f       	mov	r18, r25
     ff0:	26 60       	ori	r18, 0x06	; 6
     ff2:	b2 2e       	mov	r11, r18
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <vfprintf+0x278>
     ff6:	28 e0       	ldi	r18, 0x08	; 8
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <vfprintf+0x27c>
     ffc:	20 e1       	ldi	r18, 0x10	; 16
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <vfprintf+0x27c>
    1002:	20 e1       	ldi	r18, 0x10	; 16
    1004:	32 e0       	ldi	r19, 0x02	; 2
    1006:	f8 01       	movw	r30, r16
    1008:	b7 fe       	sbrs	r11, 7
    100a:	07 c0       	rjmp	.+14     	; 0x101a <vfprintf+0x290>
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	0c 5f       	subi	r16, 0xFC	; 252
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <vfprintf+0x29c>
    101a:	60 81       	ld	r22, Z
    101c:	71 81       	ldd	r23, Z+1	; 0x01
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 5f       	subi	r16, 0xFE	; 254
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	a3 01       	movw	r20, r6
    1028:	0e 94 08 09 	call	0x1210	; 0x1210 <__ultoa_invert>
    102c:	88 2e       	mov	r8, r24
    102e:	86 18       	sub	r8, r6
    1030:	fb 2d       	mov	r31, r11
    1032:	ff 77       	andi	r31, 0x7F	; 127
    1034:	3f 2e       	mov	r3, r31
    1036:	36 fe       	sbrs	r3, 6
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <vfprintf+0x2ca>
    103a:	23 2d       	mov	r18, r3
    103c:	2e 7f       	andi	r18, 0xFE	; 254
    103e:	a2 2e       	mov	r10, r18
    1040:	89 14       	cp	r8, r9
    1042:	58 f4       	brcc	.+22     	; 0x105a <vfprintf+0x2d0>
    1044:	34 fe       	sbrs	r3, 4
    1046:	0b c0       	rjmp	.+22     	; 0x105e <vfprintf+0x2d4>
    1048:	32 fc       	sbrc	r3, 2
    104a:	09 c0       	rjmp	.+18     	; 0x105e <vfprintf+0x2d4>
    104c:	83 2d       	mov	r24, r3
    104e:	8e 7e       	andi	r24, 0xEE	; 238
    1050:	a8 2e       	mov	r10, r24
    1052:	05 c0       	rjmp	.+10     	; 0x105e <vfprintf+0x2d4>
    1054:	b8 2c       	mov	r11, r8
    1056:	a3 2c       	mov	r10, r3
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x2d6>
    105a:	b8 2c       	mov	r11, r8
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <vfprintf+0x2d6>
    105e:	b9 2c       	mov	r11, r9
    1060:	a4 fe       	sbrs	r10, 4
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <vfprintf+0x2f8>
    1064:	fe 01       	movw	r30, r28
    1066:	e8 0d       	add	r30, r8
    1068:	f1 1d       	adc	r31, r1
    106a:	80 81       	ld	r24, Z
    106c:	80 33       	cpi	r24, 0x30	; 48
    106e:	21 f4       	brne	.+8      	; 0x1078 <vfprintf+0x2ee>
    1070:	9a 2d       	mov	r25, r10
    1072:	99 7e       	andi	r25, 0xE9	; 233
    1074:	a9 2e       	mov	r10, r25
    1076:	09 c0       	rjmp	.+18     	; 0x108a <vfprintf+0x300>
    1078:	a2 fe       	sbrs	r10, 2
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0x2fe>
    107c:	b3 94       	inc	r11
    107e:	b3 94       	inc	r11
    1080:	04 c0       	rjmp	.+8      	; 0x108a <vfprintf+0x300>
    1082:	8a 2d       	mov	r24, r10
    1084:	86 78       	andi	r24, 0x86	; 134
    1086:	09 f0       	breq	.+2      	; 0x108a <vfprintf+0x300>
    1088:	b3 94       	inc	r11
    108a:	a3 fc       	sbrc	r10, 3
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <vfprintf+0x326>
    108e:	a0 fe       	sbrs	r10, 0
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0x314>
    1092:	b2 14       	cp	r11, r2
    1094:	88 f4       	brcc	.+34     	; 0x10b8 <vfprintf+0x32e>
    1096:	28 0c       	add	r2, r8
    1098:	92 2c       	mov	r9, r2
    109a:	9b 18       	sub	r9, r11
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <vfprintf+0x330>
    109e:	b2 14       	cp	r11, r2
    10a0:	60 f4       	brcc	.+24     	; 0x10ba <vfprintf+0x330>
    10a2:	b6 01       	movw	r22, r12
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
    10ac:	b3 94       	inc	r11
    10ae:	f7 cf       	rjmp	.-18     	; 0x109e <vfprintf+0x314>
    10b0:	b2 14       	cp	r11, r2
    10b2:	18 f4       	brcc	.+6      	; 0x10ba <vfprintf+0x330>
    10b4:	2b 18       	sub	r2, r11
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <vfprintf+0x332>
    10b8:	98 2c       	mov	r9, r8
    10ba:	21 2c       	mov	r2, r1
    10bc:	a4 fe       	sbrs	r10, 4
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <vfprintf+0x356>
    10c0:	b6 01       	movw	r22, r12
    10c2:	80 e3       	ldi	r24, 0x30	; 48
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
    10ca:	a2 fe       	sbrs	r10, 2
    10cc:	17 c0       	rjmp	.+46     	; 0x10fc <vfprintf+0x372>
    10ce:	a1 fc       	sbrc	r10, 1
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <vfprintf+0x34e>
    10d2:	88 e7       	ldi	r24, 0x78	; 120
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0x352>
    10d8:	88 e5       	ldi	r24, 0x58	; 88
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	b6 01       	movw	r22, r12
    10de:	0c c0       	rjmp	.+24     	; 0x10f8 <vfprintf+0x36e>
    10e0:	8a 2d       	mov	r24, r10
    10e2:	86 78       	andi	r24, 0x86	; 134
    10e4:	59 f0       	breq	.+22     	; 0x10fc <vfprintf+0x372>
    10e6:	a1 fe       	sbrs	r10, 1
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <vfprintf+0x364>
    10ea:	8b e2       	ldi	r24, 0x2B	; 43
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <vfprintf+0x366>
    10ee:	80 e2       	ldi	r24, 0x20	; 32
    10f0:	a7 fc       	sbrc	r10, 7
    10f2:	8d e2       	ldi	r24, 0x2D	; 45
    10f4:	b6 01       	movw	r22, r12
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
    10fc:	89 14       	cp	r8, r9
    10fe:	38 f4       	brcc	.+14     	; 0x110e <vfprintf+0x384>
    1100:	b6 01       	movw	r22, r12
    1102:	80 e3       	ldi	r24, 0x30	; 48
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
    110a:	9a 94       	dec	r9
    110c:	f7 cf       	rjmp	.-18     	; 0x10fc <vfprintf+0x372>
    110e:	8a 94       	dec	r8
    1110:	f3 01       	movw	r30, r6
    1112:	e8 0d       	add	r30, r8
    1114:	f1 1d       	adc	r31, r1
    1116:	80 81       	ld	r24, Z
    1118:	b6 01       	movw	r22, r12
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
    1120:	81 10       	cpse	r8, r1
    1122:	f5 cf       	rjmp	.-22     	; 0x110e <vfprintf+0x384>
    1124:	22 20       	and	r2, r2
    1126:	09 f4       	brne	.+2      	; 0x112a <vfprintf+0x3a0>
    1128:	42 ce       	rjmp	.-892    	; 0xdae <vfprintf+0x24>
    112a:	b6 01       	movw	r22, r12
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 cc 08 	call	0x1198	; 0x1198 <fputc>
    1134:	2a 94       	dec	r2
    1136:	f6 cf       	rjmp	.-20     	; 0x1124 <vfprintf+0x39a>
    1138:	f6 01       	movw	r30, r12
    113a:	86 81       	ldd	r24, Z+6	; 0x06
    113c:	97 81       	ldd	r25, Z+7	; 0x07
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <vfprintf+0x3ba>
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	2b 96       	adiw	r28, 0x0b	; 11
    1146:	e2 e1       	ldi	r30, 0x12	; 18
    1148:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__epilogue_restores__>

0000114c <strnlen_P>:
    114c:	fc 01       	movw	r30, r24
    114e:	05 90       	lpm	r0, Z+
    1150:	61 50       	subi	r22, 0x01	; 1
    1152:	70 40       	sbci	r23, 0x00	; 0
    1154:	01 10       	cpse	r0, r1
    1156:	d8 f7       	brcc	.-10     	; 0x114e <strnlen_P+0x2>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	8e 0f       	add	r24, r30
    115e:	9f 1f       	adc	r25, r31
    1160:	08 95       	ret

00001162 <strnlen>:
    1162:	fc 01       	movw	r30, r24
    1164:	61 50       	subi	r22, 0x01	; 1
    1166:	70 40       	sbci	r23, 0x00	; 0
    1168:	01 90       	ld	r0, Z+
    116a:	01 10       	cpse	r0, r1
    116c:	d8 f7       	brcc	.-10     	; 0x1164 <strnlen+0x2>
    116e:	80 95       	com	r24
    1170:	90 95       	com	r25
    1172:	8e 0f       	add	r24, r30
    1174:	9f 1f       	adc	r25, r31
    1176:	08 95       	ret

00001178 <strrev>:
    1178:	dc 01       	movw	r26, r24
    117a:	fc 01       	movw	r30, r24
    117c:	67 2f       	mov	r22, r23
    117e:	71 91       	ld	r23, Z+
    1180:	77 23       	and	r23, r23
    1182:	e1 f7       	brne	.-8      	; 0x117c <strrev+0x4>
    1184:	32 97       	sbiw	r30, 0x02	; 2
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <strrev+0x18>
    1188:	7c 91       	ld	r23, X
    118a:	6d 93       	st	X+, r22
    118c:	70 83       	st	Z, r23
    118e:	62 91       	ld	r22, -Z
    1190:	ae 17       	cp	r26, r30
    1192:	bf 07       	cpc	r27, r31
    1194:	c8 f3       	brcs	.-14     	; 0x1188 <strrev+0x10>
    1196:	08 95       	ret

00001198 <fputc>:
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	fb 01       	movw	r30, r22
    11a2:	23 81       	ldd	r18, Z+3	; 0x03
    11a4:	21 fd       	sbrc	r18, 1
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <fputc+0x16>
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	2c c0       	rjmp	.+88     	; 0x1206 <fputc+0x6e>
    11ae:	22 ff       	sbrs	r18, 2
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <fputc+0x46>
    11b2:	46 81       	ldd	r20, Z+6	; 0x06
    11b4:	57 81       	ldd	r21, Z+7	; 0x07
    11b6:	24 81       	ldd	r18, Z+4	; 0x04
    11b8:	35 81       	ldd	r19, Z+5	; 0x05
    11ba:	42 17       	cp	r20, r18
    11bc:	53 07       	cpc	r21, r19
    11be:	44 f4       	brge	.+16     	; 0x11d0 <fputc+0x38>
    11c0:	a0 81       	ld	r26, Z
    11c2:	b1 81       	ldd	r27, Z+1	; 0x01
    11c4:	9d 01       	movw	r18, r26
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	31 83       	std	Z+1, r19	; 0x01
    11cc:	20 83       	st	Z, r18
    11ce:	8c 93       	st	X, r24
    11d0:	26 81       	ldd	r18, Z+6	; 0x06
    11d2:	37 81       	ldd	r19, Z+7	; 0x07
    11d4:	2f 5f       	subi	r18, 0xFF	; 255
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	37 83       	std	Z+7, r19	; 0x07
    11da:	26 83       	std	Z+6, r18	; 0x06
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <fputc+0x6e>
    11de:	8b 01       	movw	r16, r22
    11e0:	ec 01       	movw	r28, r24
    11e2:	fb 01       	movw	r30, r22
    11e4:	00 84       	ldd	r0, Z+8	; 0x08
    11e6:	f1 85       	ldd	r31, Z+9	; 0x09
    11e8:	e0 2d       	mov	r30, r0
    11ea:	09 95       	icall
    11ec:	89 2b       	or	r24, r25
    11ee:	e1 f6       	brne	.-72     	; 0x11a8 <fputc+0x10>
    11f0:	d8 01       	movw	r26, r16
    11f2:	16 96       	adiw	r26, 0x06	; 6
    11f4:	8d 91       	ld	r24, X+
    11f6:	9c 91       	ld	r25, X
    11f8:	17 97       	sbiw	r26, 0x07	; 7
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	17 96       	adiw	r26, 0x07	; 7
    11fe:	9c 93       	st	X, r25
    1200:	8e 93       	st	-X, r24
    1202:	16 97       	sbiw	r26, 0x06	; 6
    1204:	ce 01       	movw	r24, r28
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <__ultoa_invert>:
    1210:	fa 01       	movw	r30, r20
    1212:	aa 27       	eor	r26, r26
    1214:	28 30       	cpi	r18, 0x08	; 8
    1216:	51 f1       	breq	.+84     	; 0x126c <__ultoa_invert+0x5c>
    1218:	20 31       	cpi	r18, 0x10	; 16
    121a:	81 f1       	breq	.+96     	; 0x127c <__ultoa_invert+0x6c>
    121c:	e8 94       	clt
    121e:	6f 93       	push	r22
    1220:	6e 7f       	andi	r22, 0xFE	; 254
    1222:	6e 5f       	subi	r22, 0xFE	; 254
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	8f 4f       	sbci	r24, 0xFF	; 255
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	af 4f       	sbci	r26, 0xFF	; 255
    122c:	b1 e0       	ldi	r27, 0x01	; 1
    122e:	3e d0       	rcall	.+124    	; 0x12ac <__ultoa_invert+0x9c>
    1230:	b4 e0       	ldi	r27, 0x04	; 4
    1232:	3c d0       	rcall	.+120    	; 0x12ac <__ultoa_invert+0x9c>
    1234:	67 0f       	add	r22, r23
    1236:	78 1f       	adc	r23, r24
    1238:	89 1f       	adc	r24, r25
    123a:	9a 1f       	adc	r25, r26
    123c:	a1 1d       	adc	r26, r1
    123e:	68 0f       	add	r22, r24
    1240:	79 1f       	adc	r23, r25
    1242:	8a 1f       	adc	r24, r26
    1244:	91 1d       	adc	r25, r1
    1246:	a1 1d       	adc	r26, r1
    1248:	6a 0f       	add	r22, r26
    124a:	71 1d       	adc	r23, r1
    124c:	81 1d       	adc	r24, r1
    124e:	91 1d       	adc	r25, r1
    1250:	a1 1d       	adc	r26, r1
    1252:	20 d0       	rcall	.+64     	; 0x1294 <__ultoa_invert+0x84>
    1254:	09 f4       	brne	.+2      	; 0x1258 <__ultoa_invert+0x48>
    1256:	68 94       	set
    1258:	3f 91       	pop	r19
    125a:	2a e0       	ldi	r18, 0x0A	; 10
    125c:	26 9f       	mul	r18, r22
    125e:	11 24       	eor	r1, r1
    1260:	30 19       	sub	r19, r0
    1262:	30 5d       	subi	r19, 0xD0	; 208
    1264:	31 93       	st	Z+, r19
    1266:	de f6       	brtc	.-74     	; 0x121e <__ultoa_invert+0xe>
    1268:	cf 01       	movw	r24, r30
    126a:	08 95       	ret
    126c:	46 2f       	mov	r20, r22
    126e:	47 70       	andi	r20, 0x07	; 7
    1270:	40 5d       	subi	r20, 0xD0	; 208
    1272:	41 93       	st	Z+, r20
    1274:	b3 e0       	ldi	r27, 0x03	; 3
    1276:	0f d0       	rcall	.+30     	; 0x1296 <__ultoa_invert+0x86>
    1278:	c9 f7       	brne	.-14     	; 0x126c <__ultoa_invert+0x5c>
    127a:	f6 cf       	rjmp	.-20     	; 0x1268 <__ultoa_invert+0x58>
    127c:	46 2f       	mov	r20, r22
    127e:	4f 70       	andi	r20, 0x0F	; 15
    1280:	40 5d       	subi	r20, 0xD0	; 208
    1282:	4a 33       	cpi	r20, 0x3A	; 58
    1284:	18 f0       	brcs	.+6      	; 0x128c <__ultoa_invert+0x7c>
    1286:	49 5d       	subi	r20, 0xD9	; 217
    1288:	31 fd       	sbrc	r19, 1
    128a:	40 52       	subi	r20, 0x20	; 32
    128c:	41 93       	st	Z+, r20
    128e:	02 d0       	rcall	.+4      	; 0x1294 <__ultoa_invert+0x84>
    1290:	a9 f7       	brne	.-22     	; 0x127c <__ultoa_invert+0x6c>
    1292:	ea cf       	rjmp	.-44     	; 0x1268 <__ultoa_invert+0x58>
    1294:	b4 e0       	ldi	r27, 0x04	; 4
    1296:	a6 95       	lsr	r26
    1298:	97 95       	ror	r25
    129a:	87 95       	ror	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	ba 95       	dec	r27
    12a2:	c9 f7       	brne	.-14     	; 0x1296 <__ultoa_invert+0x86>
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	61 05       	cpc	r22, r1
    12a8:	71 05       	cpc	r23, r1
    12aa:	08 95       	ret
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	0a 2e       	mov	r0, r26
    12b2:	06 94       	lsr	r0
    12b4:	57 95       	ror	r21
    12b6:	47 95       	ror	r20
    12b8:	37 95       	ror	r19
    12ba:	27 95       	ror	r18
    12bc:	ba 95       	dec	r27
    12be:	c9 f7       	brne	.-14     	; 0x12b2 <__ultoa_invert+0xa2>
    12c0:	62 0f       	add	r22, r18
    12c2:	73 1f       	adc	r23, r19
    12c4:	84 1f       	adc	r24, r20
    12c6:	95 1f       	adc	r25, r21
    12c8:	a0 1d       	adc	r26, r0
    12ca:	08 95       	ret

000012cc <__divmodsi4>:
    12cc:	05 2e       	mov	r0, r21
    12ce:	97 fb       	bst	r25, 7
    12d0:	1e f4       	brtc	.+6      	; 0x12d8 <__divmodsi4+0xc>
    12d2:	00 94       	com	r0
    12d4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__negsi2>
    12d8:	57 fd       	sbrc	r21, 7
    12da:	07 d0       	rcall	.+14     	; 0x12ea <__divmodsi4_neg2>
    12dc:	0e 94 cf 09 	call	0x139e	; 0x139e <__udivmodsi4>
    12e0:	07 fc       	sbrc	r0, 7
    12e2:	03 d0       	rcall	.+6      	; 0x12ea <__divmodsi4_neg2>
    12e4:	4e f4       	brtc	.+18     	; 0x12f8 <__divmodsi4_exit>
    12e6:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__negsi2>

000012ea <__divmodsi4_neg2>:
    12ea:	50 95       	com	r21
    12ec:	40 95       	com	r20
    12ee:	30 95       	com	r19
    12f0:	21 95       	neg	r18
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	4f 4f       	sbci	r20, 0xFF	; 255
    12f6:	5f 4f       	sbci	r21, 0xFF	; 255

000012f8 <__divmodsi4_exit>:
    12f8:	08 95       	ret

000012fa <__negsi2>:
    12fa:	90 95       	com	r25
    12fc:	80 95       	com	r24
    12fe:	70 95       	com	r23
    1300:	61 95       	neg	r22
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	08 95       	ret

0000130a <__muluhisi3>:
    130a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__umulhisi3>
    130e:	a5 9f       	mul	r26, r21
    1310:	90 0d       	add	r25, r0
    1312:	b4 9f       	mul	r27, r20
    1314:	90 0d       	add	r25, r0
    1316:	a4 9f       	mul	r26, r20
    1318:	80 0d       	add	r24, r0
    131a:	91 1d       	adc	r25, r1
    131c:	11 24       	eor	r1, r1
    131e:	08 95       	ret

00001320 <__mulshisi3>:
    1320:	b7 ff       	sbrs	r27, 7
    1322:	0c 94 85 09 	jmp	0x130a	; 0x130a <__muluhisi3>

00001326 <__mulohisi3>:
    1326:	0e 94 85 09 	call	0x130a	; 0x130a <__muluhisi3>
    132a:	82 1b       	sub	r24, r18
    132c:	93 0b       	sbc	r25, r19
    132e:	08 95       	ret

00001330 <__prologue_saves__>:
    1330:	2f 92       	push	r2
    1332:	3f 92       	push	r3
    1334:	4f 92       	push	r4
    1336:	5f 92       	push	r5
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	ca 1b       	sub	r28, r26
    135a:	db 0b       	sbc	r29, r27
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	09 94       	ijmp

00001368 <__epilogue_restores__>:
    1368:	2a 88       	ldd	r2, Y+18	; 0x12
    136a:	39 88       	ldd	r3, Y+17	; 0x11
    136c:	48 88       	ldd	r4, Y+16	; 0x10
    136e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1370:	6e 84       	ldd	r6, Y+14	; 0x0e
    1372:	7d 84       	ldd	r7, Y+13	; 0x0d
    1374:	8c 84       	ldd	r8, Y+12	; 0x0c
    1376:	9b 84       	ldd	r9, Y+11	; 0x0b
    1378:	aa 84       	ldd	r10, Y+10	; 0x0a
    137a:	b9 84       	ldd	r11, Y+9	; 0x09
    137c:	c8 84       	ldd	r12, Y+8	; 0x08
    137e:	df 80       	ldd	r13, Y+7	; 0x07
    1380:	ee 80       	ldd	r14, Y+6	; 0x06
    1382:	fd 80       	ldd	r15, Y+5	; 0x05
    1384:	0c 81       	ldd	r16, Y+4	; 0x04
    1386:	1b 81       	ldd	r17, Y+3	; 0x03
    1388:	aa 81       	ldd	r26, Y+2	; 0x02
    138a:	b9 81       	ldd	r27, Y+1	; 0x01
    138c:	ce 0f       	add	r28, r30
    138e:	d1 1d       	adc	r29, r1
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	ed 01       	movw	r28, r26
    139c:	08 95       	ret

0000139e <__udivmodsi4>:
    139e:	a1 e2       	ldi	r26, 0x21	; 33
    13a0:	1a 2e       	mov	r1, r26
    13a2:	aa 1b       	sub	r26, r26
    13a4:	bb 1b       	sub	r27, r27
    13a6:	fd 01       	movw	r30, r26
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <__udivmodsi4_ep>

000013aa <__udivmodsi4_loop>:
    13aa:	aa 1f       	adc	r26, r26
    13ac:	bb 1f       	adc	r27, r27
    13ae:	ee 1f       	adc	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	a2 17       	cp	r26, r18
    13b4:	b3 07       	cpc	r27, r19
    13b6:	e4 07       	cpc	r30, r20
    13b8:	f5 07       	cpc	r31, r21
    13ba:	20 f0       	brcs	.+8      	; 0x13c4 <__udivmodsi4_ep>
    13bc:	a2 1b       	sub	r26, r18
    13be:	b3 0b       	sbc	r27, r19
    13c0:	e4 0b       	sbc	r30, r20
    13c2:	f5 0b       	sbc	r31, r21

000013c4 <__udivmodsi4_ep>:
    13c4:	66 1f       	adc	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	1a 94       	dec	r1
    13ce:	69 f7       	brne	.-38     	; 0x13aa <__udivmodsi4_loop>
    13d0:	60 95       	com	r22
    13d2:	70 95       	com	r23
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	9b 01       	movw	r18, r22
    13da:	ac 01       	movw	r20, r24
    13dc:	bd 01       	movw	r22, r26
    13de:	cf 01       	movw	r24, r30
    13e0:	08 95       	ret

000013e2 <__umulhisi3>:
    13e2:	a2 9f       	mul	r26, r18
    13e4:	b0 01       	movw	r22, r0
    13e6:	b3 9f       	mul	r27, r19
    13e8:	c0 01       	movw	r24, r0
    13ea:	a3 9f       	mul	r26, r19
    13ec:	70 0d       	add	r23, r0
    13ee:	81 1d       	adc	r24, r1
    13f0:	11 24       	eor	r1, r1
    13f2:	91 1d       	adc	r25, r1
    13f4:	b2 9f       	mul	r27, r18
    13f6:	70 0d       	add	r23, r0
    13f8:	81 1d       	adc	r24, r1
    13fa:	11 24       	eor	r1, r1
    13fc:	91 1d       	adc	r25, r1
    13fe:	08 95       	ret

00001400 <_exit>:
    1400:	f8 94       	cli

00001402 <__stop_program>:
    1402:	ff cf       	rjmp	.-2      	; 0x1402 <__stop_program>
