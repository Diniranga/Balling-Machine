
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000153a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000153a  000015ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000b4  008000b4  00001622  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000193e  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088e  00000000  00000000  000030e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b80  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000495  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001248  00000000  00000000  00004bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005dfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	60 02       	muls	r22, r16
      56:	63 02       	muls	r22, r19
      58:	66 02       	muls	r22, r22
      5a:	69 02       	muls	r22, r25
      5c:	6c 02       	muls	r22, r28
      5e:	6f 02       	muls	r22, r31
      60:	72 02       	muls	r23, r18

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ea e3       	ldi	r30, 0x3A	; 58
      76:	f5 e1       	ldi	r31, 0x15	; 21
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a4 3b       	cpi	r26, 0xB4	; 180
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a4 eb       	ldi	r26, 0xB4	; 180
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a8 3b       	cpi	r26, 0xB8	; 184
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <main>
      98:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <time>:
      a0:	fc 01       	movw	r30, r24
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <__data_end>
      aa:	70 91 b5 00 	lds	r23, 0x00B5	; 0x8000b5 <__data_end+0x1>
      ae:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end+0x2>
      b2:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x3>
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	30 97       	sbiw	r30, 0x00	; 0
      ba:	21 f0       	breq	.+8      	; 0xc4 <time+0x24>
      bc:	60 83       	st	Z, r22
      be:	71 83       	std	Z+1, r23	; 0x01
      c0:	82 83       	std	Z+2, r24	; 0x02
      c2:	93 83       	std	Z+3, r25	; 0x03
      c4:	08 95       	ret

000000c6 <LDR>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c6:	ca 9b       	sbis	0x19, 2	; 25
      c8:	07 c0       	rjmp	.+14     	; 0xd8 <LDR+0x12>
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	80 61       	ori	r24, 0x10	; 16
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	82 b3       	in	r24, 0x12	; 18
      d2:	80 61       	ori	r24, 0x10	; 16
      d4:	82 bb       	out	0x12, r24	; 18
      d6:	08 95       	ret
      d8:	ca 9b       	sbis	0x19, 2	; 25
      da:	12 ba       	out	0x12, r1	; 18
      dc:	08 95       	ret

000000de <Servo>:
	_delay_loop_2(0);
	
}

void Servo(){
	DDRD = 0x20; //Makes RC0 output pin
      de:	80 e2       	ldi	r24, 0x20	; 32
      e0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
      e2:	12 ba       	out	0x12, r1	; 18
	PORTD = 0x20;
      e4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e6:	8f e9       	ldi	r24, 0x9F	; 159
      e8:	9f e0       	ldi	r25, 0x0F	; 15
      ea:	01 97       	sbiw	r24, 0x01	; 1
      ec:	f1 f7       	brne	.-4      	; 0xea <Servo+0xc>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <Servo+0x12>
      f0:	00 00       	nop
	_delay_us(1000);
	PORTD = 0x00;
      f2:	12 ba       	out	0x12, r1	; 18
      f4:	08 95       	ret

000000f6 <ADC_Init>:
	}

//-------------------------Temperature Sensonr---------------

void ADC_Init(){
	DDRA = 0x00;	        /* Make ADC port as input */
      f6:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;          /* Enable ADC, with freq/128  */
      f8:	87 e8       	ldi	r24, 0x87	; 135
      fa:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;           /* Vref: Avcc, ADC channel: 0 */
      fc:	80 e4       	ldi	r24, 0x40	; 64
      fe:	87 b9       	out	0x07, r24	; 7
     100:	08 95       	ret

00000102 <ADC_Read>:
}

int ADC_Read(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
     102:	87 70       	andi	r24, 0x07	; 7
     104:	80 64       	ori	r24, 0x40	; 64
     106:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
     108:	86 b1       	in	r24, 0x06	; 6
     10a:	80 64       	ori	r24, 0x40	; 64
     10c:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
     10e:	34 9b       	sbis	0x06, 4	; 6
     110:	fe cf       	rjmp	.-4      	; 0x10e <ADC_Read+0xc>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
     112:	86 b1       	in	r24, 0x06	; 6
     114:	80 61       	ori	r24, 0x10	; 16
     116:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     118:	8f e9       	ldi	r24, 0x9F	; 159
     11a:	9f e0       	ldi	r25, 0x0F	; 15
     11c:	01 97       	sbiw	r24, 0x01	; 1
     11e:	f1 f7       	brne	.-4      	; 0x11c <ADC_Read+0x1a>
     120:	00 c0       	rjmp	.+0      	; 0x122 <ADC_Read+0x20>
     122:	00 00       	nop
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
     124:	84 b1       	in	r24, 0x04	; 4
     126:	95 b1       	in	r25, 0x05	; 5
}
     128:	08 95       	ret

0000012a <lcdCommand>:

//-----------------LCD------------------

void lcdCommand( unsigned char cmd )
{
	LCD_port = (LCD_port & 0x0F) | (cmd & 0xF0); //send upper nibble (1111 0000)
     12a:	98 b3       	in	r25, 0x18	; 24
     12c:	9f 70       	andi	r25, 0x0F	; 15
     12e:	28 2f       	mov	r18, r24
     130:	20 7f       	andi	r18, 0xF0	; 240
     132:	92 2b       	or	r25, r18
     134:	98 bb       	out	0x18, r25	; 24
	//this is doing to using LCD in 4 bit mode
	
	LCD_port &= ~ (1<<RS);	
     136:	98 b3       	in	r25, 0x18	; 24
     138:	9e 7f       	andi	r25, 0xFE	; 254
     13a:	98 bb       	out	0x18, r25	; 24
	
	
	LCD_port |= (1<<EN);		
     13c:	98 b3       	in	r25, 0x18	; 24
     13e:	92 60       	ori	r25, 0x02	; 2
     140:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     142:	35 e0       	ldi	r19, 0x05	; 5
     144:	3a 95       	dec	r19
     146:	f1 f7       	brne	.-4      	; 0x144 <lcdCommand+0x1a>
     148:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~(1<<EN);     
     14a:	98 b3       	in	r25, 0x18	; 24
     14c:	9d 7f       	andi	r25, 0xFD	; 253
     14e:	98 bb       	out	0x18, r25	; 24
     150:	ef e1       	ldi	r30, 0x1F	; 31
     152:	f3 e0       	ldi	r31, 0x03	; 3
     154:	31 97       	sbiw	r30, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <lcdCommand+0x2a>
     158:	00 c0       	rjmp	.+0      	; 0x15a <lcdCommand+0x30>
     15a:	00 00       	nop

	_delay_us(200);

	LCD_port = (LCD_port & 0x0F) | (cmd << 4);  //send low nibble
     15c:	28 b3       	in	r18, 0x18	; 24
     15e:	f0 e1       	ldi	r31, 0x10	; 16
     160:	8f 9f       	mul	r24, r31
     162:	c0 01       	movw	r24, r0
     164:	11 24       	eor	r1, r1
     166:	92 2f       	mov	r25, r18
     168:	9f 70       	andi	r25, 0x0F	; 15
     16a:	89 2b       	or	r24, r25
     16c:	88 bb       	out	0x18, r24	; 24
	LCD_port |= (1<<EN); 
     16e:	88 b3       	in	r24, 0x18	; 24
     170:	82 60       	ori	r24, 0x02	; 2
     172:	88 bb       	out	0x18, r24	; 24
     174:	35 e0       	ldi	r19, 0x05	; 5
     176:	3a 95       	dec	r19
     178:	f1 f7       	brne	.-4      	; 0x176 <lcdCommand+0x4c>
     17a:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~ (1<<EN); 
     17c:	88 b3       	in	r24, 0x18	; 24
     17e:	8d 7f       	andi	r24, 0xFD	; 253
     180:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	8f e3       	ldi	r24, 0x3F	; 63
     184:	9f e1       	ldi	r25, 0x1F	; 31
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcdCommand+0x5c>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <lcdCommand+0x62>
     18c:	00 00       	nop
     18e:	08 95       	ret

00000190 <lcddata>:
	
	_delay_ms(2);
}
void lcddata( unsigned char data )
{
	LCD_port = (LCD_port & 0x0F) | (data & 0xF0);  // sending upper nibble 
     190:	98 b3       	in	r25, 0x18	; 24
     192:	9f 70       	andi	r25, 0x0F	; 15
     194:	28 2f       	mov	r18, r24
     196:	20 7f       	andi	r18, 0xF0	; 240
     198:	92 2b       	or	r25, r18
     19a:	98 bb       	out	0x18, r25	; 24
	LCD_port |= (1<<RS); 
     19c:	98 b3       	in	r25, 0x18	; 24
     19e:	91 60       	ori	r25, 0x01	; 1
     1a0:	98 bb       	out	0x18, r25	; 24
	LCD_port|= (1<<EN);  
     1a2:	98 b3       	in	r25, 0x18	; 24
     1a4:	92 60       	ori	r25, 0x02	; 2
     1a6:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a8:	35 e0       	ldi	r19, 0x05	; 5
     1aa:	3a 95       	dec	r19
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcddata+0x1a>
     1ae:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~ (1<<EN); 
     1b0:	98 b3       	in	r25, 0x18	; 24
     1b2:	9d 7f       	andi	r25, 0xFD	; 253
     1b4:	98 bb       	out	0x18, r25	; 24
     1b6:	ef e1       	ldi	r30, 0x1F	; 31
     1b8:	f3 e0       	ldi	r31, 0x03	; 3
     1ba:	31 97       	sbiw	r30, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcddata+0x2a>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcddata+0x30>
     1c0:	00 00       	nop

	_delay_us(200);

	LCD_port = (LCD_port & 0x0F) | (data << 4); 
     1c2:	28 b3       	in	r18, 0x18	; 24
     1c4:	f0 e1       	ldi	r31, 0x10	; 16
     1c6:	8f 9f       	mul	r24, r31
     1c8:	c0 01       	movw	r24, r0
     1ca:	11 24       	eor	r1, r1
     1cc:	92 2f       	mov	r25, r18
     1ce:	9f 70       	andi	r25, 0x0F	; 15
     1d0:	89 2b       	or	r24, r25
     1d2:	88 bb       	out	0x18, r24	; 24
	LCD_port |= (1<<EN); 
     1d4:	88 b3       	in	r24, 0x18	; 24
     1d6:	82 60       	ori	r24, 0x02	; 2
     1d8:	88 bb       	out	0x18, r24	; 24
     1da:	35 e0       	ldi	r19, 0x05	; 5
     1dc:	3a 95       	dec	r19
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcddata+0x4c>
     1e0:	00 00       	nop
	_delay_us(1);
	LCD_port &= ~ (1<<EN); 
     1e2:	88 b3       	in	r24, 0x18	; 24
     1e4:	8d 7f       	andi	r24, 0xFD	; 253
     1e6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e8:	8f e3       	ldi	r24, 0x3F	; 63
     1ea:	9f e1       	ldi	r25, 0x1F	; 31
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcddata+0x5c>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcddata+0x62>
     1f2:	00 00       	nop
     1f4:	08 95       	ret

000001f6 <lcdInit>:
	
	_delay_ms(2);
}
void lcdInit(void)			
{
	 DDRB = 0xFF;			
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	87 bb       	out	0x17, r24	; 23
     1fa:	2f ef       	ldi	r18, 0xFF	; 255
     1fc:	89 ef       	ldi	r24, 0xF9	; 249
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	21 50       	subi	r18, 0x01	; 1
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	90 40       	sbci	r25, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <lcdInit+0xa>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcdInit+0x14>
     20a:	00 00       	nop
	_delay_ms(20);			
	
	lcdCommand(0x02);		// send for 4 bit initialization of LCD 
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
	lcdCommand(0x28);        // 2 line, 5*7 matrix in 4-bit mode
     212:	88 e2       	ldi	r24, 0x28	; 40
     214:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
	lcdCommand(0x0E);        // Display on cursor on(we can send 0x0c or 0x0E)
     218:	8e e0       	ldi	r24, 0x0E	; 14
     21a:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
	lcdCommand(0x06);        // Increment cursor (shift cursor to right)
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
	lcdCommand(0x01);        //Clear display screen
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
     22a:	8f e3       	ldi	r24, 0x3F	; 63
     22c:	9f e1       	ldi	r25, 0x1F	; 31
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <lcdInit+0x38>
     232:	00 c0       	rjmp	.+0      	; 0x234 <lcdInit+0x3e>
     234:	00 00       	nop
     236:	08 95       	ret

00000238 <lcd_Print>:
	_delay_ms(2);
	
}
void lcd_Print (char *str)		
{
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		
     242:	c0 e0       	ldi	r28, 0x00	; 0
     244:	d0 e0       	ldi	r29, 0x00	; 0
     246:	03 c0       	rjmp	.+6      	; 0x24e <lcd_Print+0x16>
	{
		lcddata (str[i]);
     248:	0e 94 c8 00 	call	0x190	; 0x190 <lcddata>
	
}
void lcd_Print (char *str)		
{
	int i;
	for(i=0;str[i]!=0;i++)		
     24c:	21 96       	adiw	r28, 0x01	; 1
     24e:	f8 01       	movw	r30, r16
     250:	ec 0f       	add	r30, r28
     252:	fd 1f       	adc	r31, r29
     254:	80 81       	ld	r24, Z
     256:	81 11       	cpse	r24, r1
     258:	f7 cf       	rjmp	.-18     	; 0x248 <lcd_Print+0x10>
	{
		lcddata (str[i]);
	}
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <LCD_Clear>:
void LCD_Clear()
{
	lcdCommand (0x01);		
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	9f e1       	ldi	r25, 0x1F	; 31
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <LCD_Clear+0xa>
     272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_Clear+0x10>
     274:	00 00       	nop
	_delay_ms(2);
	lcdCommand (0x80);		
     276:	80 e8       	ldi	r24, 0x80	; 128
     278:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
     27c:	08 95       	ret

0000027e <keypad>:

//----------------------------Keypad------------------

unsigned char keypad()
{
	PORTC = 0b11111110; 
     27e:	8e ef       	ldi	r24, 0xFE	; 254
     280:	85 bb       	out	0x15, r24	; 21
 	if ((PINC & (1<<PINC4)) == 0) 
     282:	9c 99       	sbic	0x13, 4	; 19
     284:	0b c0       	rjmp	.+22     	; 0x29c <keypad+0x1e>
     286:	2f ef       	ldi	r18, 0xFF	; 255
     288:	89 ef       	ldi	r24, 0xF9	; 249
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	21 50       	subi	r18, 0x01	; 1
     28e:	80 40       	sbci	r24, 0x00	; 0
     290:	90 40       	sbci	r25, 0x00	; 0
     292:	e1 f7       	brne	.-8      	; 0x28c <keypad+0xe>
     294:	00 c0       	rjmp	.+0      	; 0x296 <keypad+0x18>
     296:	00 00       	nop
	{
		_delay_ms(20);
		return '7';
     298:	87 e3       	ldi	r24, 0x37	; 55
     29a:	08 95       	ret
	}
 	else if((PINC & (1<<PINC5)) == 0)
     29c:	9d 99       	sbic	0x13, 5	; 19
     29e:	0b c0       	rjmp	.+22     	; 0x2b6 <keypad+0x38>
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	89 ef       	ldi	r24, 0xF9	; 249
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <keypad+0x28>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <keypad+0x32>
     2b0:	00 00       	nop
	{
		_delay_ms(20);
		return '8';
     2b2:	88 e3       	ldi	r24, 0x38	; 56
     2b4:	08 95       	ret
	}
	else if((PINC & (1<<PINC6)) == 0)
     2b6:	9e 99       	sbic	0x13, 6	; 19
     2b8:	0b c0       	rjmp	.+22     	; 0x2d0 <keypad+0x52>
     2ba:	2f ef       	ldi	r18, 0xFF	; 255
     2bc:	89 ef       	ldi	r24, 0xF9	; 249
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	21 50       	subi	r18, 0x01	; 1
     2c2:	80 40       	sbci	r24, 0x00	; 0
     2c4:	90 40       	sbci	r25, 0x00	; 0
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <keypad+0x42>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <keypad+0x4c>
     2ca:	00 00       	nop
	{
		_delay_ms(20);
		return '9';
     2cc:	89 e3       	ldi	r24, 0x39	; 57
     2ce:	08 95       	ret
	}
	PORTC = 0b11111101; 
     2d0:	8d ef       	ldi	r24, 0xFD	; 253
     2d2:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1<<PINC4)) == 0) 
     2d4:	9c 99       	sbic	0x13, 4	; 19
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <keypad+0x70>
     2d8:	2f ef       	ldi	r18, 0xFF	; 255
     2da:	89 ef       	ldi	r24, 0xF9	; 249
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	21 50       	subi	r18, 0x01	; 1
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	90 40       	sbci	r25, 0x00	; 0
     2e4:	e1 f7       	brne	.-8      	; 0x2de <keypad+0x60>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <keypad+0x6a>
     2e8:	00 00       	nop
	{
		_delay_ms(20); 
		return '4';
     2ea:	84 e3       	ldi	r24, 0x34	; 52
     2ec:	08 95       	ret
	}
	else if((PINC & (1<<PINC5)) == 0)
     2ee:	9d 99       	sbic	0x13, 5	; 19
     2f0:	0b c0       	rjmp	.+22     	; 0x308 <keypad+0x8a>
     2f2:	2f ef       	ldi	r18, 0xFF	; 255
     2f4:	89 ef       	ldi	r24, 0xF9	; 249
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	21 50       	subi	r18, 0x01	; 1
     2fa:	80 40       	sbci	r24, 0x00	; 0
     2fc:	90 40       	sbci	r25, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <keypad+0x7a>
     300:	00 c0       	rjmp	.+0      	; 0x302 <keypad+0x84>
     302:	00 00       	nop
	{
		_delay_ms(20);
		return '5';
     304:	85 e3       	ldi	r24, 0x35	; 53
     306:	08 95       	ret
	}
	else if((PINC & (1<<PINC6)) == 0)
     308:	9e 99       	sbic	0x13, 6	; 19
     30a:	0b c0       	rjmp	.+22     	; 0x322 <keypad+0xa4>
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	89 ef       	ldi	r24, 0xF9	; 249
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <keypad+0x94>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <keypad+0x9e>
     31c:	00 00       	nop
	{
		_delay_ms(20);
		return '6';
     31e:	86 e3       	ldi	r24, 0x36	; 54
     320:	08 95       	ret
	}	
	PORTC = 0b11111011; 
     322:	8b ef       	ldi	r24, 0xFB	; 251
     324:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1<<PINC4)) == 0) 
     326:	9c 99       	sbic	0x13, 4	; 19
     328:	0b c0       	rjmp	.+22     	; 0x340 <keypad+0xc2>
     32a:	2f ef       	ldi	r18, 0xFF	; 255
     32c:	89 ef       	ldi	r24, 0xF9	; 249
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	21 50       	subi	r18, 0x01	; 1
     332:	80 40       	sbci	r24, 0x00	; 0
     334:	90 40       	sbci	r25, 0x00	; 0
     336:	e1 f7       	brne	.-8      	; 0x330 <keypad+0xb2>
     338:	00 c0       	rjmp	.+0      	; 0x33a <keypad+0xbc>
     33a:	00 00       	nop
	{
		_delay_ms(20); 
		return '1';
     33c:	81 e3       	ldi	r24, 0x31	; 49
     33e:	08 95       	ret
	}
	else if ((PINC & (1<<PINC5)) == 0) 
     340:	9d 99       	sbic	0x13, 5	; 19
     342:	0b c0       	rjmp	.+22     	; 0x35a <keypad+0xdc>
     344:	2f ef       	ldi	r18, 0xFF	; 255
     346:	89 ef       	ldi	r24, 0xF9	; 249
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	80 40       	sbci	r24, 0x00	; 0
     34e:	90 40       	sbci	r25, 0x00	; 0
     350:	e1 f7       	brne	.-8      	; 0x34a <keypad+0xcc>
     352:	00 c0       	rjmp	.+0      	; 0x354 <keypad+0xd6>
     354:	00 00       	nop
	{
		_delay_ms(20); 
		return '2';
     356:	82 e3       	ldi	r24, 0x32	; 50
     358:	08 95       	ret
	}
	else if((PINC & (1<<PINC6)) == 0)
     35a:	9e 99       	sbic	0x13, 6	; 19
     35c:	0b c0       	rjmp	.+22     	; 0x374 <keypad+0xf6>
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	89 ef       	ldi	r24, 0xF9	; 249
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	21 50       	subi	r18, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <keypad+0xe6>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <keypad+0xf0>
     36e:	00 00       	nop
	{
		_delay_ms(20);
		return '3';
     370:	83 e3       	ldi	r24, 0x33	; 51
     372:	08 95       	ret
	}	
	PORTC = 0b11110111;
     374:	87 ef       	ldi	r24, 0xF7	; 247
     376:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1<<PINC5)) == 0)
     378:	9d 99       	sbic	0x13, 5	; 19
     37a:	0b c0       	rjmp	.+22     	; 0x392 <keypad+0x114>
     37c:	2f ef       	ldi	r18, 0xFF	; 255
     37e:	89 ef       	ldi	r24, 0xF9	; 249
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	21 50       	subi	r18, 0x01	; 1
     384:	80 40       	sbci	r24, 0x00	; 0
     386:	90 40       	sbci	r25, 0x00	; 0
     388:	e1 f7       	brne	.-8      	; 0x382 <keypad+0x104>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <keypad+0x10e>
     38c:	00 00       	nop
	{
		_delay_ms(20); 
		return '0';
     38e:	80 e3       	ldi	r24, 0x30	; 48
     390:	08 95       	ret
	}
	
}
     392:	08 95       	ret

00000394 <ball_holder_stepper>:
//------------------------------  Ball Holder STEPPER MOTORS-----------------

void ball_holder_stepper(char a){

	
	DDRD |= 0x0F;
     394:	91 b3       	in	r25, 0x11	; 17
     396:	9f 60       	ori	r25, 0x0F	; 15
     398:	91 bb       	out	0x11, r25	; 17
	int period;
	//DDRD = 0x0F;		/* Make PORTD lower pins as output */
	period = 100;		/* Set period in between two steps */
	
	if(a=='a'){
     39a:	81 36       	cpi	r24, 0x61	; 97
     39c:	61 f4       	brne	.+24     	; 0x3b6 <ball_holder_stepper+0x22>
		PORTD = 0x06;
     39e:	86 e0       	ldi	r24, 0x06	; 6
     3a0:	82 bb       	out	0x12, r24	; 18
     3a2:	2f ef       	ldi	r18, 0xFF	; 255
     3a4:	81 ee       	ldi	r24, 0xE1	; 225
     3a6:	94 e0       	ldi	r25, 0x04	; 4
     3a8:	21 50       	subi	r18, 0x01	; 1
     3aa:	80 40       	sbci	r24, 0x00	; 0
     3ac:	90 40       	sbci	r25, 0x00	; 0
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <ball_holder_stepper+0x14>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <ball_holder_stepper+0x1e>
     3b2:	00 00       	nop
     3b4:	08 95       	ret
		_delay_ms(period);
	}
	else if(a=='b'){
     3b6:	82 36       	cpi	r24, 0x62	; 98
     3b8:	61 f4       	brne	.+24     	; 0x3d2 <ball_holder_stepper+0x3e>
		PORTD = 0x03;
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	82 bb       	out	0x12, r24	; 18
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	81 ee       	ldi	r24, 0xE1	; 225
     3c2:	94 e0       	ldi	r25, 0x04	; 4
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <ball_holder_stepper+0x30>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <ball_holder_stepper+0x3a>
     3ce:	00 00       	nop
     3d0:	08 95       	ret
		_delay_ms(period);	
	}
	else if(a=='c'){
     3d2:	83 36       	cpi	r24, 0x63	; 99
     3d4:	61 f4       	brne	.+24     	; 0x3ee <ball_holder_stepper+0x5a>
		PORTD = 0x09;
     3d6:	89 e0       	ldi	r24, 0x09	; 9
     3d8:	82 bb       	out	0x12, r24	; 18
     3da:	2f ef       	ldi	r18, 0xFF	; 255
     3dc:	81 ee       	ldi	r24, 0xE1	; 225
     3de:	94 e0       	ldi	r25, 0x04	; 4
     3e0:	21 50       	subi	r18, 0x01	; 1
     3e2:	80 40       	sbci	r24, 0x00	; 0
     3e4:	90 40       	sbci	r25, 0x00	; 0
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <ball_holder_stepper+0x4c>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <ball_holder_stepper+0x56>
     3ea:	00 00       	nop
     3ec:	08 95       	ret
		_delay_ms(period);
	}
	else{
		PORTD = 0x0C;
     3ee:	8c e0       	ldi	r24, 0x0C	; 12
     3f0:	82 bb       	out	0x12, r24	; 18
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	81 ee       	ldi	r24, 0xE1	; 225
     3f6:	94 e0       	ldi	r25, 0x04	; 4
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	80 40       	sbci	r24, 0x00	; 0
     3fc:	90 40       	sbci	r25, 0x00	; 0
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <ball_holder_stepper+0x64>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	08 95       	ret

00000406 <A>:
}

// -------------Angle making stepper motor-------------

int A(){
	PORTA=0x20;
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	8b bb       	out	0x1b, r24	; 27
     40a:	2f ef       	ldi	r18, 0xFF	; 255
     40c:	81 ee       	ldi	r24, 0xE1	; 225
     40e:	94 e0       	ldi	r25, 0x04	; 4
     410:	21 50       	subi	r18, 0x01	; 1
     412:	80 40       	sbci	r24, 0x00	; 0
     414:	90 40       	sbci	r25, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <A+0xa>
     418:	00 c0       	rjmp	.+0      	; 0x41a <A+0x14>
     41a:	00 00       	nop
	_delay_ms(100);
}
     41c:	08 95       	ret

0000041e <B>:
int B(){
	
	PORTA=0x40;
     41e:	80 e4       	ldi	r24, 0x40	; 64
     420:	8b bb       	out	0x1b, r24	; 27
     422:	2f ef       	ldi	r18, 0xFF	; 255
     424:	81 ee       	ldi	r24, 0xE1	; 225
     426:	94 e0       	ldi	r25, 0x04	; 4
     428:	21 50       	subi	r18, 0x01	; 1
     42a:	80 40       	sbci	r24, 0x00	; 0
     42c:	90 40       	sbci	r25, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <B+0xa>
     430:	00 c0       	rjmp	.+0      	; 0x432 <B+0x14>
     432:	00 00       	nop
	_delay_ms(100);
}
     434:	08 95       	ret

00000436 <C>:
int C(){
	
	PORTA=0x30;
     436:	80 e3       	ldi	r24, 0x30	; 48
     438:	8b bb       	out	0x1b, r24	; 27
     43a:	2f ef       	ldi	r18, 0xFF	; 255
     43c:	81 ee       	ldi	r24, 0xE1	; 225
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	21 50       	subi	r18, 0x01	; 1
     442:	80 40       	sbci	r24, 0x00	; 0
     444:	90 40       	sbci	r25, 0x00	; 0
     446:	e1 f7       	brne	.-8      	; 0x440 <C+0xa>
     448:	00 c0       	rjmp	.+0      	; 0x44a <C+0x14>
     44a:	00 00       	nop
	_delay_ms(100);
}
     44c:	08 95       	ret

0000044e <D>:
int D(){
	
	PORTA=0xc0;
     44e:	80 ec       	ldi	r24, 0xC0	; 192
     450:	8b bb       	out	0x1b, r24	; 27
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	81 ee       	ldi	r24, 0xE1	; 225
     456:	94 e0       	ldi	r25, 0x04	; 4
     458:	21 50       	subi	r18, 0x01	; 1
     45a:	80 40       	sbci	r24, 0x00	; 0
     45c:	90 40       	sbci	r25, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <D+0xa>
     460:	00 c0       	rjmp	.+0      	; 0x462 <D+0x14>
     462:	00 00       	nop
	_delay_ms(100);
}
     464:	08 95       	ret

00000466 <E>:
int E(){
	
	PORTA=0x10;
     466:	80 e1       	ldi	r24, 0x10	; 16
     468:	8b bb       	out	0x1b, r24	; 27
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	81 ee       	ldi	r24, 0xE1	; 225
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	21 50       	subi	r18, 0x01	; 1
     472:	80 40       	sbci	r24, 0x00	; 0
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <E+0xa>
     478:	00 c0       	rjmp	.+0      	; 0x47a <E+0x14>
     47a:	00 00       	nop
	_delay_ms(100);
}
     47c:	08 95       	ret

0000047e <F>:
int F(){
	
	PORTA=0x08;
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	8b bb       	out	0x1b, r24	; 27
     482:	2f ef       	ldi	r18, 0xFF	; 255
     484:	81 ee       	ldi	r24, 0xE1	; 225
     486:	94 e0       	ldi	r25, 0x04	; 4
     488:	21 50       	subi	r18, 0x01	; 1
     48a:	80 40       	sbci	r24, 0x00	; 0
     48c:	90 40       	sbci	r25, 0x00	; 0
     48e:	e1 f7       	brne	.-8      	; 0x488 <F+0xa>
     490:	00 c0       	rjmp	.+0      	; 0x492 <F+0x14>
     492:	00 00       	nop
	_delay_ms(100);
}
     494:	08 95       	ret

00000496 <G>:
int G(){
	
	PORTA=0x50;
     496:	80 e5       	ldi	r24, 0x50	; 80
     498:	8b bb       	out	0x1b, r24	; 27
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	81 ee       	ldi	r24, 0xE1	; 225
     49e:	94 e0       	ldi	r25, 0x04	; 4
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <G+0xa>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <G+0x14>
     4aa:	00 00       	nop
	_delay_ms(100);
}
     4ac:	08 95       	ret

000004ae <stepper_motor>:

int stepper_motor(int k){
	
	switch(k){
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	87 30       	cpi	r24, 0x07	; 7
     4b2:	91 05       	cpc	r25, r1
     4b4:	c8 f4       	brcc	.+50     	; 0x4e8 <stepper_motor+0x3a>
     4b6:	86 5d       	subi	r24, 0xD6	; 214
     4b8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ba:	fc 01       	movw	r30, r24
     4bc:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__tablejump2__>
		case 1:
		A();
     4c0:	0e 94 03 02 	call	0x406	; 0x406 <A>
		break;
     4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <stepper_motor+0x3a>
		case 2:
		B();
     4c6:	0e 94 0f 02 	call	0x41e	; 0x41e <B>
		break;
     4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <stepper_motor+0x3a>
		case 3:
		C();
     4cc:	0e 94 1b 02 	call	0x436	; 0x436 <C>
		break;
     4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <stepper_motor+0x3a>
		case 4:
		D();
     4d2:	0e 94 27 02 	call	0x44e	; 0x44e <D>
		break;
     4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <stepper_motor+0x3a>
		case 5:
		E();
     4d8:	0e 94 33 02 	call	0x466	; 0x466 <E>
		break;
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <stepper_motor+0x3a>
		case 6:
		F();
     4de:	0e 94 3f 02 	call	0x47e	; 0x47e <F>
		break;
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <stepper_motor+0x3a>
		case 7:
		G();
     4e4:	0e 94 4b 02 	call	0x496	; 0x496 <G>
		break;
		}
		return 0;
}
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	08 95       	ret

000004ee <InitPWM1>:

//------------------------DC Motor 1/2-------------------

void InitPWM1()
{
	TCCR2=(1<<WGM20)|(1<<WGM21)|(2<<COM20)|(2<<CS20);
     4ee:	8a e6       	ldi	r24, 0x6A	; 106
     4f0:	85 bd       	out	0x25, r24	; 37
	DDRD|=(1<<PD7);	
     4f2:	81 b3       	in	r24, 0x11	; 17
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	81 bb       	out	0x11, r24	; 17
     4f8:	08 95       	ret

000004fa <InitPWM2>:
}

void InitPWM2()
{
	TCCR0=(1<<WGM20)|(1<<WGM21)|(2<<COM20)|(2<<CS20);
     4fa:	8a e6       	ldi	r24, 0x6A	; 106
     4fc:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);	
     4fe:	87 b3       	in	r24, 0x17	; 23
     500:	88 60       	ori	r24, 0x08	; 8
     502:	87 bb       	out	0x17, r24	; 23
     504:	08 95       	ret

00000506 <SetPWMOutput1>:
}

void SetPWMOutput1(uint8_t duty)
{
	OCR2=duty;
     506:	83 bd       	out	0x23, r24	; 35
     508:	08 95       	ret

0000050a <SetPWMOutput2>:
}

void SetPWMOutput2(uint8_t duty)
{
	OCR0=duty;
     50a:	8c bf       	out	0x3c, r24	; 60
     50c:	08 95       	ret

0000050e <temperature>:



//---------------Temperature----------------

int temperature(){
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	2a 97       	sbiw	r28, 0x0a	; 10
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
	
	char Temperature[10];
	float celsius;

	lcdInit();                 // initialize 16x2 LCD
     52a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdInit>
	ADC_Init();                 // initialize ADC
     52e:	0e 94 7b 00 	call	0xf6	; 0xf6 <ADC_Init>

	LCD_Clear();
     532:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
	//lcd_Print("Temperature:");
	celsius = (ADC_Read(0)*4.88);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 81 00 	call	0x102	; 0x102 <ADC_Read>
     53c:	bc 01       	movw	r22, r24
     53e:	99 0f       	add	r25, r25
     540:	88 0b       	sbc	r24, r24
     542:	99 0b       	sbc	r25, r25
     544:	0e 94 96 05 	call	0xb2c	; 0xb2c <__floatsisf>
     548:	26 ef       	ldi	r18, 0xF6	; 246
     54a:	38 e2       	ldi	r19, 0x28	; 40
     54c:	4c e9       	ldi	r20, 0x9C	; 156
     54e:	50 e4       	ldi	r21, 0x40	; 64
     550:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
	celsius = (celsius/10.00);
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e2       	ldi	r20, 0x20	; 32
     55a:	51 e4       	ldi	r21, 0x41	; 65
     55c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divsf3>
	int ret=(int)celsius;
     560:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixsfsi>
     564:	86 2f       	mov	r24, r22
     566:	97 2f       	mov	r25, r23
     568:	8c 01       	movw	r16, r24
	sprintf(Temperature,"%d%cC", (int)celsius, degree_sysmbol);//convert integer value to ASCII string
     56a:	1f 92       	push	r1
     56c:	8f ed       	ldi	r24, 0xDF	; 223
     56e:	8f 93       	push	r24
     570:	7f 93       	push	r23
     572:	6f 93       	push	r22
     574:	84 e6       	ldi	r24, 0x64	; 100
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	ce 01       	movw	r24, r28
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	7c 01       	movw	r14, r24
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	0e 94 3e 07 	call	0xe7c	; 0xe7c <sprintf>
	//lcd_Print(Temperature);//send string data for printing
	//_delay_ms(1000);
	memset(Temperature,0,10);
     58a:	8a e0       	ldi	r24, 0x0A	; 10
     58c:	f7 01       	movw	r30, r14
     58e:	11 92       	st	Z+, r1
     590:	8a 95       	dec	r24
     592:	e9 f7       	brne	.-6      	; 0x58e <temperature+0x80>
	
	if(ret>25){
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	0a 31       	cpi	r16, 0x1A	; 26
     5a0:	11 05       	cpc	r17, r1
     5a2:	1c f0       	brlt	.+6      	; 0x5aa <temperature+0x9c>
		return 0;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <temperature+0xa0>
		}
	else{
		return 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     5ae:	2a 96       	adiw	r28, 0x0a	; 10
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <main>:


int main(void) 
{
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <main+0x1a>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <main+0x1c>
     5e4:	1f 92       	push	r1
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	srand(time(NULL));
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 50 00 	call	0xa0	; 0xa0 <time>
     5f2:	cb 01       	movw	r24, r22
     5f4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <srand>
	//-------------------------------enter minimum speed------------------------		
		
		unsigned char x;
		DDRC = 0x0F ;
     5f8:	8f e0       	ldi	r24, 0x0F	; 15
     5fa:	84 bb       	out	0x14, r24	; 20
		PORTC =0xF0;//11110000 Make all 4 columns 1 and rows 0
     5fc:	80 ef       	ldi	r24, 0xF0	; 240
     5fe:	85 bb       	out	0x15, r24	; 21
		
		lcdInit();
     600:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdInit>
		lcd_Print("Enter Minimun Speed:");
     604:	8a e6       	ldi	r24, 0x6A	; 106
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_Print>
		lcdCommand(0xC0);
     60c:	80 ec       	ldi	r24, 0xC0	; 192
     60e:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
		
		int w=1;
     612:	ee 24       	eor	r14, r14
     614:	e3 94       	inc	r14
     616:	f1 2c       	mov	r15, r1
		int temp=0;
		int speed1=0;
		while(w>0){
     618:	0a c0       	rjmp	.+20     	; 0x62e <main+0x66>
			x = keypad();
     61a:	0e 94 3f 01 	call	0x27e	; 0x27e <keypad>
     61e:	18 2f       	mov	r17, r24
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     620:	80 ed       	ldi	r24, 0xD0	; 208
     622:	81 0f       	add	r24, r17
     624:	8a 30       	cpi	r24, 0x0A	; 10
     626:	18 f4       	brcc	.+6      	; 0x62e <main+0x66>
				w-=1;
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	e2 1a       	sub	r14, r18
     62c:	f1 08       	sbc	r15, r1
		lcdCommand(0xC0);
		
		int w=1;
		int temp=0;
		int speed1=0;
		while(w>0){
     62e:	1e 14       	cp	r1, r14
     630:	1f 04       	cpc	r1, r15
     632:	9c f3       	brlt	.-26     	; 0x61a <main+0x52>
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
				w-=1;
			}
		}
		
		lcddata(x);
     634:	81 2f       	mov	r24, r17
     636:	0e 94 c8 00 	call	0x190	; 0x190 <lcddata>
		temp=(int)x-48;
     63a:	c1 2e       	mov	r12, r17
     63c:	d1 2c       	mov	r13, r1
     63e:	30 e3       	ldi	r19, 0x30	; 48
     640:	c3 1a       	sub	r12, r19
     642:	d1 08       	sbc	r13, r1
		speed1=speed1*10+temp;
		
		w=1;
     644:	ee 24       	eor	r14, r14
     646:	e3 94       	inc	r14
     648:	f1 2c       	mov	r15, r1
		temp=0;
		while(w>0){
     64a:	0a c0       	rjmp	.+20     	; 0x660 <main+0x98>
			x = keypad();
     64c:	0e 94 3f 01 	call	0x27e	; 0x27e <keypad>
     650:	18 2f       	mov	r17, r24
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     652:	80 ed       	ldi	r24, 0xD0	; 208
     654:	81 0f       	add	r24, r17
     656:	8a 30       	cpi	r24, 0x0A	; 10
     658:	18 f4       	brcc	.+6      	; 0x660 <main+0x98>
				w-=1;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	e8 1a       	sub	r14, r24
     65e:	f1 08       	sbc	r15, r1
		temp=(int)x-48;
		speed1=speed1*10+temp;
		
		w=1;
		temp=0;
		while(w>0){
     660:	1e 14       	cp	r1, r14
     662:	1f 04       	cpc	r1, r15
     664:	9c f3       	brlt	.-26     	; 0x64c <main+0x84>
			x = keypad();
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
				w-=1;
			}
		}
		lcddata(x);
     666:	81 2f       	mov	r24, r17
     668:	0e 94 c8 00 	call	0x190	; 0x190 <lcddata>
		temp=(int)x-48;
     66c:	a1 2e       	mov	r10, r17
     66e:	b1 2c       	mov	r11, r1
     670:	75 01       	movw	r14, r10
     672:	90 e3       	ldi	r25, 0x30	; 48
     674:	e9 1a       	sub	r14, r25
     676:	f1 08       	sbc	r15, r1
		speed1=speed1*10+temp;
     678:	56 01       	movw	r10, r12
     67a:	aa 0c       	add	r10, r10
     67c:	bb 1c       	adc	r11, r11
     67e:	cc 0c       	add	r12, r12
     680:	dd 1c       	adc	r13, r13
     682:	cc 0c       	add	r12, r12
     684:	dd 1c       	adc	r13, r13
     686:	cc 0c       	add	r12, r12
     688:	dd 1c       	adc	r13, r13
     68a:	ca 0c       	add	r12, r10
     68c:	db 1c       	adc	r13, r11
     68e:	57 01       	movw	r10, r14
     690:	ac 0c       	add	r10, r12
     692:	bd 1c       	adc	r11, r13
		
		
		w=1;
     694:	cc 24       	eor	r12, r12
     696:	c3 94       	inc	r12
     698:	d1 2c       	mov	r13, r1
		temp=0;
		while(w>0){
     69a:	0a c0       	rjmp	.+20     	; 0x6b0 <main+0xe8>
			x = keypad();
     69c:	0e 94 3f 01 	call	0x27e	; 0x27e <keypad>
     6a0:	18 2f       	mov	r17, r24
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     6a2:	80 ed       	ldi	r24, 0xD0	; 208
     6a4:	81 0f       	add	r24, r17
     6a6:	8a 30       	cpi	r24, 0x0A	; 10
     6a8:	18 f4       	brcc	.+6      	; 0x6b0 <main+0xe8>
				w-=1;
     6aa:	21 e0       	ldi	r18, 0x01	; 1
     6ac:	c2 1a       	sub	r12, r18
     6ae:	d1 08       	sbc	r13, r1
		speed1=speed1*10+temp;
		
		
		w=1;
		temp=0;
		while(w>0){
     6b0:	1c 14       	cp	r1, r12
     6b2:	1d 04       	cpc	r1, r13
     6b4:	9c f3       	brlt	.-26     	; 0x69c <main+0xd4>
			x = keypad();
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
				w-=1;
			}
		}
		lcddata(x);
     6b6:	81 2f       	mov	r24, r17
     6b8:	0e 94 c8 00 	call	0x190	; 0x190 <lcddata>
		temp=(int)x-48;
     6bc:	e1 2e       	mov	r14, r17
     6be:	f1 2c       	mov	r15, r1
     6c0:	c7 01       	movw	r24, r14
     6c2:	c0 97       	sbiw	r24, 0x30	; 48
		speed1=speed1*10+temp;
     6c4:	75 01       	movw	r14, r10
     6c6:	ee 0c       	add	r14, r14
     6c8:	ff 1c       	adc	r15, r15
     6ca:	aa 0c       	add	r10, r10
     6cc:	bb 1c       	adc	r11, r11
     6ce:	aa 0c       	add	r10, r10
     6d0:	bb 1c       	adc	r11, r11
     6d2:	aa 0c       	add	r10, r10
     6d4:	bb 1c       	adc	r11, r11
     6d6:	ae 0c       	add	r10, r14
     6d8:	bf 1c       	adc	r11, r15
     6da:	7c 01       	movw	r14, r24
     6dc:	ea 0c       	add	r14, r10
     6de:	fb 1c       	adc	r15, r11
		
		//------------------------Enter Maximum Speed---------------------------------------
		
		lcdInit();
     6e0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdInit>
		lcd_Print("Enter Maximum Speed:");
     6e4:	8f e7       	ldi	r24, 0x7F	; 127
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_Print>
		lcdCommand(0xC0);
     6ec:	80 ec       	ldi	r24, 0xC0	; 192
     6ee:	0e 94 95 00 	call	0x12a	; 0x12a <lcdCommand>
		
		w=1;
     6f2:	cc 24       	eor	r12, r12
     6f4:	c3 94       	inc	r12
     6f6:	d1 2c       	mov	r13, r1
		temp=0;
		int speed2=0;
		while(w>0){
     6f8:	0a c0       	rjmp	.+20     	; 0x70e <main+0x146>
			x = keypad();
     6fa:	0e 94 3f 01 	call	0x27e	; 0x27e <keypad>
     6fe:	18 2f       	mov	r17, r24
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     700:	80 ed       	ldi	r24, 0xD0	; 208
     702:	81 0f       	add	r24, r17
     704:	8a 30       	cpi	r24, 0x0A	; 10
     706:	18 f4       	brcc	.+6      	; 0x70e <main+0x146>
				w-=1;
     708:	31 e0       	ldi	r19, 0x01	; 1
     70a:	c3 1a       	sub	r12, r19
     70c:	d1 08       	sbc	r13, r1
		lcdCommand(0xC0);
		
		w=1;
		temp=0;
		int speed2=0;
		while(w>0){
     70e:	1c 14       	cp	r1, r12
     710:	1d 04       	cpc	r1, r13
     712:	9c f3       	brlt	.-26     	; 0x6fa <main+0x132>
			x = keypad();
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
				w-=1;
			}
		}
		lcddata(x);
     714:	81 2f       	mov	r24, r17
     716:	0e 94 c8 00 	call	0x190	; 0x190 <lcddata>
		temp=(int)x-48;
     71a:	21 2f       	mov	r18, r17
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	49 01       	movw	r8, r18
     720:	80 e3       	ldi	r24, 0x30	; 48
     722:	88 1a       	sub	r8, r24
     724:	91 08       	sbc	r9, r1
		speed2=speed2*10+temp;
		
		w=1;
     726:	aa 24       	eor	r10, r10
     728:	a3 94       	inc	r10
     72a:	b1 2c       	mov	r11, r1
		temp=0;
		while(w>0){
     72c:	0a c0       	rjmp	.+20     	; 0x742 <main+0x17a>
			x = keypad();
     72e:	0e 94 3f 01 	call	0x27e	; 0x27e <keypad>
     732:	18 2f       	mov	r17, r24
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     734:	80 ed       	ldi	r24, 0xD0	; 208
     736:	81 0f       	add	r24, r17
     738:	8a 30       	cpi	r24, 0x0A	; 10
     73a:	18 f4       	brcc	.+6      	; 0x742 <main+0x17a>
				w-=1;
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	a9 1a       	sub	r10, r25
     740:	b1 08       	sbc	r11, r1
		temp=(int)x-48;
		speed2=speed2*10+temp;
		
		w=1;
		temp=0;
		while(w>0){
     742:	1a 14       	cp	r1, r10
     744:	1b 04       	cpc	r1, r11
     746:	9c f3       	brlt	.-26     	; 0x72e <main+0x166>
			x = keypad();
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
				w-=1;
			}
		}
		lcddata(x);
     748:	81 2f       	mov	r24, r17
     74a:	0e 94 c8 00 	call	0x190	; 0x190 <lcddata>
		temp=(int)x-48;
     74e:	c1 2e       	mov	r12, r17
     750:	d1 2c       	mov	r13, r1
     752:	56 01       	movw	r10, r12
     754:	20 e3       	ldi	r18, 0x30	; 48
     756:	a2 1a       	sub	r10, r18
     758:	b1 08       	sbc	r11, r1
		speed2=speed2*10+temp;
     75a:	64 01       	movw	r12, r8
     75c:	cc 0c       	add	r12, r12
     75e:	dd 1c       	adc	r13, r13
     760:	94 01       	movw	r18, r8
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	22 0f       	add	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	c2 0e       	add	r12, r18
     770:	d3 1e       	adc	r13, r19
     772:	ca 0c       	add	r12, r10
     774:	db 1c       	adc	r13, r11
		
		w=1;
     776:	aa 24       	eor	r10, r10
     778:	a3 94       	inc	r10
     77a:	b1 2c       	mov	r11, r1
		temp=0;
		while(w>0){
     77c:	0a c0       	rjmp	.+20     	; 0x792 <main+0x1ca>
			x = keypad();
     77e:	0e 94 3f 01 	call	0x27e	; 0x27e <keypad>
     782:	18 2f       	mov	r17, r24
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
     784:	80 ed       	ldi	r24, 0xD0	; 208
     786:	81 0f       	add	r24, r17
     788:	8a 30       	cpi	r24, 0x0A	; 10
     78a:	18 f4       	brcc	.+6      	; 0x792 <main+0x1ca>
				w-=1;
     78c:	31 e0       	ldi	r19, 0x01	; 1
     78e:	a3 1a       	sub	r10, r19
     790:	b1 08       	sbc	r11, r1
		temp=(int)x-48;
		speed2=speed2*10+temp;
		
		w=1;
		temp=0;
		while(w>0){
     792:	1a 14       	cp	r1, r10
     794:	1b 04       	cpc	r1, r11
     796:	9c f3       	brlt	.-26     	; 0x77e <main+0x1b6>
			x = keypad();
			if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9'){
				w-=1;
			}
		}
		lcddata(x);
     798:	81 2f       	mov	r24, r17
     79a:	0e 94 c8 00 	call	0x190	; 0x190 <lcddata>
		temp=(int)x-48;
     79e:	81 2f       	mov	r24, r17
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	c0 97       	sbiw	r24, 0x30	; 48
		speed2=speed2*10+temp;
     7a4:	56 01       	movw	r10, r12
     7a6:	aa 0c       	add	r10, r10
     7a8:	bb 1c       	adc	r11, r11
     7aa:	cc 0c       	add	r12, r12
     7ac:	dd 1c       	adc	r13, r13
     7ae:	cc 0c       	add	r12, r12
     7b0:	dd 1c       	adc	r13, r13
     7b2:	cc 0c       	add	r12, r12
     7b4:	dd 1c       	adc	r13, r13
     7b6:	ac 0c       	add	r10, r12
     7b8:	bd 1c       	adc	r11, r13
     7ba:	a8 0e       	add	r10, r24
     7bc:	b9 1e       	adc	r11, r25
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	90 e7       	ldi	r25, 0x70	; 112
     7c2:	22 e0       	ldi	r18, 0x02	; 2
     7c4:	81 50       	subi	r24, 0x01	; 1
     7c6:	90 40       	sbci	r25, 0x00	; 0
     7c8:	20 40       	sbci	r18, 0x00	; 0
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <main+0x1fc>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <main+0x206>
     7ce:	00 00       	nop
		
		 //----------get ready notification-------------
		 
		 
		_delay_ms(50);
		LCD_Clear();
     7d0:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
		lcd_Print("Get ready");
     7d4:	84 e9       	ldi	r24, 0x94	; 148
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_Print>
     7dc:	3f ef       	ldi	r19, 0xFF	; 255
     7de:	80 e7       	ldi	r24, 0x70	; 112
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	31 50       	subi	r19, 0x01	; 1
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <main+0x21a>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <main+0x224>
     7ec:	00 00       	nop
		_delay_ms(50);
		LCD_Clear();
     7ee:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
	

		int lower =speed1, upper = speed2;
		char pos='a';
		int k;
		for(int g=0;g<20;g++){
     7f2:	00 e0       	ldi	r16, 0x00	; 0
     7f4:	10 e0       	ldi	r17, 0x00	; 0
		LCD_Clear();
					
	

		int lower =speed1, upper = speed2;
		char pos='a';
     7f6:	0f 2e       	mov	r0, r31
     7f8:	f1 e6       	ldi	r31, 0x61	; 97
     7fa:	9f 2e       	mov	r9, r31
     7fc:	f0 2d       	mov	r31, r0
		int k;
		for(int g=0;g<20;g++){
     7fe:	d4 c0       	rjmp	.+424    	; 0x9a8 <__stack+0x149>
			
			if(temperature()==1){
     800:	0e 94 87 02 	call	0x50e	; 0x50e <temperature>
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	09 f0       	breq	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	bb c0       	rjmp	.+374    	; 0x980 <__stack+0x121>
				
				LDR();
     80a:	0e 94 63 00 	call	0xc6	; 0xc6 <LDR>
			   //----------dc motor speed control-------------
		
				uint8_t num = (rand() % (upper - lower + 1)) + lower;
     80e:	0e 94 09 07 	call	0xe12	; 0xe12 <rand>
     812:	b5 01       	movw	r22, r10
     814:	6e 19       	sub	r22, r14
     816:	7f 09       	sbc	r23, r15
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__divmodhi4>
     820:	8e 0d       	add	r24, r14
		
				int num1 = num;
     822:	c8 2e       	mov	r12, r24
     824:	d1 2c       	mov	r13, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     826:	4a e0       	ldi	r20, 0x0A	; 10
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	c6 01       	movw	r24, r12
     830:	0e 94 19 07 	call	0xe32	; 0xe32 <__itoa_ncheck>
				char snum[5];
				itoa(num1, snum, 10);
				lcd_Print(snum);
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_Print>
				lcd_Print(" kmh");
     83c:	8e e9       	ldi	r24, 0x9E	; 158
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_Print>
     844:	2f ef       	ldi	r18, 0xFF	; 255
     846:	31 ee       	ldi	r19, 0xE1	; 225
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	21 50       	subi	r18, 0x01	; 1
     84c:	30 40       	sbci	r19, 0x00	; 0
     84e:	80 40       	sbci	r24, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     852:	00 c0       	rjmp	.+0      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     854:	00 00       	nop
				//----------make the direction of the machine-------------
		
				
				_delay_ms(100);
				
				DDRA=0xF0;
     856:	80 ef       	ldi	r24, 0xF0	; 240
     858:	8a bb       	out	0x1a, r24	; 26
				k=(rand()%7)+1;
     85a:	0e 94 09 07 	call	0xe12	; 0xe12 <rand>
     85e:	67 e0       	ldi	r22, 0x07	; 7
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__divmodhi4>
				stepper_motor(k);
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	0e 94 57 02 	call	0x4ae	; 0x4ae <stepper_motor>
				
				Servo();
     86c:	0e 94 6f 00 	call	0xde	; 0xde <Servo>
     870:	9f ef       	ldi	r25, 0xFF	; 255
     872:	21 ee       	ldi	r18, 0xE1	; 225
     874:	34 e0       	ldi	r19, 0x04	; 4
     876:	91 50       	subi	r25, 0x01	; 1
     878:	20 40       	sbci	r18, 0x00	; 0
     87a:	30 40       	sbci	r19, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <__stack+0x17>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
     880:	00 00       	nop
				_delay_ms(100);
				
				//----------mControl Speed----------------
				
				InitPWM1();
     882:	0e 94 77 02 	call	0x4ee	; 0x4ee <InitPWM1>
				InitPWM2();
     886:	0e 94 7d 02 	call	0x4fa	; 0x4fa <InitPWM2>
		
				if(num1>80 && num1<120){
     88a:	c6 01       	movw	r24, r12
     88c:	81 55       	subi	r24, 0x51	; 81
     88e:	91 09       	sbc	r25, r1
     890:	87 97       	sbiw	r24, 0x27	; 39
     892:	38 f4       	brcc	.+14     	; 0x8a2 <__stack+0x43>
					SetPWMOutput1(120);
     894:	88 e7       	ldi	r24, 0x78	; 120
     896:	0e 94 83 02 	call	0x506	; 0x506 <SetPWMOutput1>
					SetPWMOutput2(10);
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	0e 94 85 02 	call	0x50a	; 0x50a <SetPWMOutput2>
     8a0:	14 c0       	rjmp	.+40     	; 0x8ca <__stack+0x6b>
				}
				else if(num1>120 && num1<130){
     8a2:	89 e7       	ldi	r24, 0x79	; 121
     8a4:	c8 1a       	sub	r12, r24
     8a6:	d1 08       	sbc	r13, r1
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	c9 16       	cp	r12, r25
     8ac:	d1 04       	cpc	r13, r1
     8ae:	38 f4       	brcc	.+14     	; 0x8be <__stack+0x5f>
					SetPWMOutput1(10);
     8b0:	8a e0       	ldi	r24, 0x0A	; 10
     8b2:	0e 94 83 02 	call	0x506	; 0x506 <SetPWMOutput1>
					SetPWMOutput2(120);
     8b6:	88 e7       	ldi	r24, 0x78	; 120
     8b8:	0e 94 85 02 	call	0x50a	; 0x50a <SetPWMOutput2>
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <__stack+0x6b>
				}
				else{
					SetPWMOutput1(5);
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	0e 94 83 02 	call	0x506	; 0x506 <SetPWMOutput1>
					SetPWMOutput2(5);
     8c4:	85 e0       	ldi	r24, 0x05	; 5
     8c6:	0e 94 85 02 	call	0x50a	; 0x50a <SetPWMOutput2>
     8ca:	2f ef       	ldi	r18, 0xFF	; 255
     8cc:	31 ee       	ldi	r19, 0xE1	; 225
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	21 50       	subi	r18, 0x01	; 1
     8d2:	30 40       	sbci	r19, 0x00	; 0
     8d4:	80 40       	sbci	r24, 0x00	; 0
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <__stack+0x7b>
     8da:	00 00       	nop
		
				_delay_ms(100);
		
				//-------------Buzzer Alarm---------------
	
				DDRA=0x08;
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	8a bb       	out	0x1a, r24	; 26
				PORTA=0x08;
     8e0:	8b bb       	out	0x1b, r24	; 27
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
     8e4:	21 ee       	ldi	r18, 0xE1	; 225
     8e6:	34 e0       	ldi	r19, 0x04	; 4
     8e8:	91 50       	subi	r25, 0x01	; 1
     8ea:	20 40       	sbci	r18, 0x00	; 0
     8ec:	30 40       	sbci	r19, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__stack+0x89>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <__stack+0x93>
     8f2:	00 00       	nop
				_delay_ms(100);
				PORTA=0x00;
     8f4:	1b ba       	out	0x1b, r1	; 27
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	90 e7       	ldi	r25, 0x70	; 112
     8fa:	22 e0       	ldi	r18, 0x02	; 2
     8fc:	81 50       	subi	r24, 0x01	; 1
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	20 40       	sbci	r18, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <__stack+0x9d>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0xa7>
     906:	00 00       	nop
	
				//----------ball holder rotation-------------
		
				_delay_ms(50);
				DDRD |= 0xFF;
     908:	81 b3       	in	r24, 0x11	; 17
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	81 bb       	out	0x11, r24	; 17
				PORTD |= 0xFF;
     90e:	92 b3       	in	r25, 0x12	; 18
     910:	82 bb       	out	0x12, r24	; 18
		
				if(pos=='a'){
     912:	31 e6       	ldi	r19, 0x61	; 97
     914:	93 12       	cpse	r9, r19
     916:	08 c0       	rjmp	.+16     	; 0x928 <__stack+0xc9>
					ball_holder_stepper(pos);
     918:	89 2d       	mov	r24, r9
     91a:	0e 94 ca 01 	call	0x394	; 0x394 <ball_holder_stepper>
					pos='b';
     91e:	0f 2e       	mov	r0, r31
     920:	f2 e6       	ldi	r31, 0x62	; 98
     922:	9f 2e       	mov	r9, r31
     924:	f0 2d       	mov	r31, r0
     926:	20 c0       	rjmp	.+64     	; 0x968 <__stack+0x109>
				}
				else if(pos=='b'){
     928:	82 e6       	ldi	r24, 0x62	; 98
     92a:	98 12       	cpse	r9, r24
     92c:	08 c0       	rjmp	.+16     	; 0x93e <__stack+0xdf>
					ball_holder_stepper(pos);
     92e:	89 2d       	mov	r24, r9
     930:	0e 94 ca 01 	call	0x394	; 0x394 <ball_holder_stepper>
					pos='c';
     934:	0f 2e       	mov	r0, r31
     936:	f3 e6       	ldi	r31, 0x63	; 99
     938:	9f 2e       	mov	r9, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	15 c0       	rjmp	.+42     	; 0x968 <__stack+0x109>
				}
				else if(pos=='c'){
     93e:	93 e6       	ldi	r25, 0x63	; 99
     940:	99 12       	cpse	r9, r25
     942:	08 c0       	rjmp	.+16     	; 0x954 <__stack+0xf5>
					ball_holder_stepper(pos);
     944:	89 2d       	mov	r24, r9
     946:	0e 94 ca 01 	call	0x394	; 0x394 <ball_holder_stepper>
					pos='d';
     94a:	0f 2e       	mov	r0, r31
     94c:	f4 e6       	ldi	r31, 0x64	; 100
     94e:	9f 2e       	mov	r9, r31
     950:	f0 2d       	mov	r31, r0
     952:	0a c0       	rjmp	.+20     	; 0x968 <__stack+0x109>
				}
				else if(pos=='d'){
     954:	24 e6       	ldi	r18, 0x64	; 100
     956:	92 12       	cpse	r9, r18
     958:	07 c0       	rjmp	.+14     	; 0x968 <__stack+0x109>
					ball_holder_stepper(pos);
     95a:	89 2d       	mov	r24, r9
     95c:	0e 94 ca 01 	call	0x394	; 0x394 <ball_holder_stepper>
					pos='a';
     960:	0f 2e       	mov	r0, r31
     962:	f1 e6       	ldi	r31, 0x61	; 97
     964:	9f 2e       	mov	r9, r31
     966:	f0 2d       	mov	r31, r0
				}
				
				else{
				}
		
				LCD_Clear();
     968:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
     96c:	3f ef       	ldi	r19, 0xFF	; 255
     96e:	81 ee       	ldi	r24, 0xE1	; 225
     970:	94 e0       	ldi	r25, 0x04	; 4
     972:	31 50       	subi	r19, 0x01	; 1
     974:	80 40       	sbci	r24, 0x00	; 0
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <__stack+0x113>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <__stack+0x11d>
     97c:	00 00       	nop
     97e:	12 c0       	rjmp	.+36     	; 0x9a4 <__stack+0x145>
				_delay_ms(100);
			}
			
			else{
				lcdInit();
     980:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcdInit>
				lcd_Print("High Temperature");
     984:	83 ea       	ldi	r24, 0xA3	; 163
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_Print>
				DDRA=0x02;
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	9a bb       	out	0x1a, r25	; 26
				PORTA=0x02;
     990:	9b bb       	out	0x1b, r25	; 27
     992:	2a ea       	ldi	r18, 0xAA	; 170
     994:	3a ea       	ldi	r19, 0xAA	; 170
     996:	8a ea       	ldi	r24, 0xAA	; 170
     998:	9a e2       	ldi	r25, 0x2A	; 42
     99a:	21 50       	subi	r18, 0x01	; 1
     99c:	30 40       	sbci	r19, 0x00	; 0
     99e:	80 40       	sbci	r24, 0x00	; 0
     9a0:	90 40       	sbci	r25, 0x00	; 0
     9a2:	d9 f7       	brne	.-10     	; 0x99a <__stack+0x13b>
	

		int lower =speed1, upper = speed2;
		char pos='a';
		int k;
		for(int g=0;g<20;g++){
     9a4:	0f 5f       	subi	r16, 0xFF	; 255
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
     9a8:	04 31       	cpi	r16, 0x14	; 20
     9aa:	11 05       	cpc	r17, r1
     9ac:	0c f4       	brge	.+2      	; 0x9b0 <__stack+0x151>
     9ae:	28 cf       	rjmp	.-432    	; 0x800 <__DATA_REGION_LENGTH__>
			}
		}

	return 0;	

     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	8f 90       	pop	r8
     9d6:	08 95       	ret

000009d8 <__divsf3>:
     9d8:	0e 94 00 05 	call	0xa00	; 0xa00 <__divsf3x>
     9dc:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_round>
     9e0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_pscB>
     9e4:	58 f0       	brcs	.+22     	; 0x9fc <__divsf3+0x24>
     9e6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_pscA>
     9ea:	40 f0       	brcs	.+16     	; 0x9fc <__divsf3+0x24>
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__divsf3+0x20>
     9ee:	5f 3f       	cpi	r21, 0xFF	; 255
     9f0:	29 f0       	breq	.+10     	; 0x9fc <__divsf3+0x24>
     9f2:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_inf>
     9f6:	51 11       	cpse	r21, r1
     9f8:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_szero>
     9fc:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__fp_nan>

00000a00 <__divsf3x>:
     a00:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_split3>
     a04:	68 f3       	brcs	.-38     	; 0x9e0 <__divsf3+0x8>

00000a06 <__divsf3_pse>:
     a06:	99 23       	and	r25, r25
     a08:	b1 f3       	breq	.-20     	; 0x9f6 <__divsf3+0x1e>
     a0a:	55 23       	and	r21, r21
     a0c:	91 f3       	breq	.-28     	; 0x9f2 <__divsf3+0x1a>
     a0e:	95 1b       	sub	r25, r21
     a10:	55 0b       	sbc	r21, r21
     a12:	bb 27       	eor	r27, r27
     a14:	aa 27       	eor	r26, r26
     a16:	62 17       	cp	r22, r18
     a18:	73 07       	cpc	r23, r19
     a1a:	84 07       	cpc	r24, r20
     a1c:	38 f0       	brcs	.+14     	; 0xa2c <__divsf3_pse+0x26>
     a1e:	9f 5f       	subi	r25, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	22 0f       	add	r18, r18
     a24:	33 1f       	adc	r19, r19
     a26:	44 1f       	adc	r20, r20
     a28:	aa 1f       	adc	r26, r26
     a2a:	a9 f3       	breq	.-22     	; 0xa16 <__divsf3_pse+0x10>
     a2c:	35 d0       	rcall	.+106    	; 0xa98 <__divsf3_pse+0x92>
     a2e:	0e 2e       	mov	r0, r30
     a30:	3a f0       	brmi	.+14     	; 0xa40 <__divsf3_pse+0x3a>
     a32:	e0 e8       	ldi	r30, 0x80	; 128
     a34:	32 d0       	rcall	.+100    	; 0xa9a <__divsf3_pse+0x94>
     a36:	91 50       	subi	r25, 0x01	; 1
     a38:	50 40       	sbci	r21, 0x00	; 0
     a3a:	e6 95       	lsr	r30
     a3c:	00 1c       	adc	r0, r0
     a3e:	ca f7       	brpl	.-14     	; 0xa32 <__divsf3_pse+0x2c>
     a40:	2b d0       	rcall	.+86     	; 0xa98 <__divsf3_pse+0x92>
     a42:	fe 2f       	mov	r31, r30
     a44:	29 d0       	rcall	.+82     	; 0xa98 <__divsf3_pse+0x92>
     a46:	66 0f       	add	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	88 1f       	adc	r24, r24
     a4c:	bb 1f       	adc	r27, r27
     a4e:	26 17       	cp	r18, r22
     a50:	37 07       	cpc	r19, r23
     a52:	48 07       	cpc	r20, r24
     a54:	ab 07       	cpc	r26, r27
     a56:	b0 e8       	ldi	r27, 0x80	; 128
     a58:	09 f0       	breq	.+2      	; 0xa5c <__divsf3_pse+0x56>
     a5a:	bb 0b       	sbc	r27, r27
     a5c:	80 2d       	mov	r24, r0
     a5e:	bf 01       	movw	r22, r30
     a60:	ff 27       	eor	r31, r31
     a62:	93 58       	subi	r25, 0x83	; 131
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	3a f0       	brmi	.+14     	; 0xa76 <__divsf3_pse+0x70>
     a68:	9e 3f       	cpi	r25, 0xFE	; 254
     a6a:	51 05       	cpc	r21, r1
     a6c:	78 f0       	brcs	.+30     	; 0xa8c <__divsf3_pse+0x86>
     a6e:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_inf>
     a72:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_szero>
     a76:	5f 3f       	cpi	r21, 0xFF	; 255
     a78:	e4 f3       	brlt	.-8      	; 0xa72 <__divsf3_pse+0x6c>
     a7a:	98 3e       	cpi	r25, 0xE8	; 232
     a7c:	d4 f3       	brlt	.-12     	; 0xa72 <__divsf3_pse+0x6c>
     a7e:	86 95       	lsr	r24
     a80:	77 95       	ror	r23
     a82:	67 95       	ror	r22
     a84:	b7 95       	ror	r27
     a86:	f7 95       	ror	r31
     a88:	9f 5f       	subi	r25, 0xFF	; 255
     a8a:	c9 f7       	brne	.-14     	; 0xa7e <__divsf3_pse+0x78>
     a8c:	88 0f       	add	r24, r24
     a8e:	91 1d       	adc	r25, r1
     a90:	96 95       	lsr	r25
     a92:	87 95       	ror	r24
     a94:	97 f9       	bld	r25, 7
     a96:	08 95       	ret
     a98:	e1 e0       	ldi	r30, 0x01	; 1
     a9a:	66 0f       	add	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	88 1f       	adc	r24, r24
     aa0:	bb 1f       	adc	r27, r27
     aa2:	62 17       	cp	r22, r18
     aa4:	73 07       	cpc	r23, r19
     aa6:	84 07       	cpc	r24, r20
     aa8:	ba 07       	cpc	r27, r26
     aaa:	20 f0       	brcs	.+8      	; 0xab4 <__divsf3_pse+0xae>
     aac:	62 1b       	sub	r22, r18
     aae:	73 0b       	sbc	r23, r19
     ab0:	84 0b       	sbc	r24, r20
     ab2:	ba 0b       	sbc	r27, r26
     ab4:	ee 1f       	adc	r30, r30
     ab6:	88 f7       	brcc	.-30     	; 0xa9a <__divsf3_pse+0x94>
     ab8:	e0 95       	com	r30
     aba:	08 95       	ret

00000abc <__fixsfsi>:
     abc:	0e 94 65 05 	call	0xaca	; 0xaca <__fixunssfsi>
     ac0:	68 94       	set
     ac2:	b1 11       	cpse	r27, r1
     ac4:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_szero>
     ac8:	08 95       	ret

00000aca <__fixunssfsi>:
     aca:	0e 94 01 06 	call	0xc02	; 0xc02 <__fp_splitA>
     ace:	88 f0       	brcs	.+34     	; 0xaf2 <__fixunssfsi+0x28>
     ad0:	9f 57       	subi	r25, 0x7F	; 127
     ad2:	98 f0       	brcs	.+38     	; 0xafa <__fixunssfsi+0x30>
     ad4:	b9 2f       	mov	r27, r25
     ad6:	99 27       	eor	r25, r25
     ad8:	b7 51       	subi	r27, 0x17	; 23
     ada:	b0 f0       	brcs	.+44     	; 0xb08 <__fixunssfsi+0x3e>
     adc:	e1 f0       	breq	.+56     	; 0xb16 <__fixunssfsi+0x4c>
     ade:	66 0f       	add	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	88 1f       	adc	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	1a f0       	brmi	.+6      	; 0xaee <__fixunssfsi+0x24>
     ae8:	ba 95       	dec	r27
     aea:	c9 f7       	brne	.-14     	; 0xade <__fixunssfsi+0x14>
     aec:	14 c0       	rjmp	.+40     	; 0xb16 <__fixunssfsi+0x4c>
     aee:	b1 30       	cpi	r27, 0x01	; 1
     af0:	91 f0       	breq	.+36     	; 0xb16 <__fixunssfsi+0x4c>
     af2:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_zero>
     af6:	b1 e0       	ldi	r27, 0x01	; 1
     af8:	08 95       	ret
     afa:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_zero>
     afe:	67 2f       	mov	r22, r23
     b00:	78 2f       	mov	r23, r24
     b02:	88 27       	eor	r24, r24
     b04:	b8 5f       	subi	r27, 0xF8	; 248
     b06:	39 f0       	breq	.+14     	; 0xb16 <__fixunssfsi+0x4c>
     b08:	b9 3f       	cpi	r27, 0xF9	; 249
     b0a:	cc f3       	brlt	.-14     	; 0xafe <__fixunssfsi+0x34>
     b0c:	86 95       	lsr	r24
     b0e:	77 95       	ror	r23
     b10:	67 95       	ror	r22
     b12:	b3 95       	inc	r27
     b14:	d9 f7       	brne	.-10     	; 0xb0c <__fixunssfsi+0x42>
     b16:	3e f4       	brtc	.+14     	; 0xb26 <__fixunssfsi+0x5c>
     b18:	90 95       	com	r25
     b1a:	80 95       	com	r24
     b1c:	70 95       	com	r23
     b1e:	61 95       	neg	r22
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	8f 4f       	sbci	r24, 0xFF	; 255
     b24:	9f 4f       	sbci	r25, 0xFF	; 255
     b26:	08 95       	ret

00000b28 <__floatunsisf>:
     b28:	e8 94       	clt
     b2a:	09 c0       	rjmp	.+18     	; 0xb3e <__floatsisf+0x12>

00000b2c <__floatsisf>:
     b2c:	97 fb       	bst	r25, 7
     b2e:	3e f4       	brtc	.+14     	; 0xb3e <__floatsisf+0x12>
     b30:	90 95       	com	r25
     b32:	80 95       	com	r24
     b34:	70 95       	com	r23
     b36:	61 95       	neg	r22
     b38:	7f 4f       	sbci	r23, 0xFF	; 255
     b3a:	8f 4f       	sbci	r24, 0xFF	; 255
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	99 23       	and	r25, r25
     b40:	a9 f0       	breq	.+42     	; 0xb6c <__floatsisf+0x40>
     b42:	f9 2f       	mov	r31, r25
     b44:	96 e9       	ldi	r25, 0x96	; 150
     b46:	bb 27       	eor	r27, r27
     b48:	93 95       	inc	r25
     b4a:	f6 95       	lsr	r31
     b4c:	87 95       	ror	r24
     b4e:	77 95       	ror	r23
     b50:	67 95       	ror	r22
     b52:	b7 95       	ror	r27
     b54:	f1 11       	cpse	r31, r1
     b56:	f8 cf       	rjmp	.-16     	; 0xb48 <__floatsisf+0x1c>
     b58:	fa f4       	brpl	.+62     	; 0xb98 <__floatsisf+0x6c>
     b5a:	bb 0f       	add	r27, r27
     b5c:	11 f4       	brne	.+4      	; 0xb62 <__floatsisf+0x36>
     b5e:	60 ff       	sbrs	r22, 0
     b60:	1b c0       	rjmp	.+54     	; 0xb98 <__floatsisf+0x6c>
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	8f 4f       	sbci	r24, 0xFF	; 255
     b68:	9f 4f       	sbci	r25, 0xFF	; 255
     b6a:	16 c0       	rjmp	.+44     	; 0xb98 <__floatsisf+0x6c>
     b6c:	88 23       	and	r24, r24
     b6e:	11 f0       	breq	.+4      	; 0xb74 <__floatsisf+0x48>
     b70:	96 e9       	ldi	r25, 0x96	; 150
     b72:	11 c0       	rjmp	.+34     	; 0xb96 <__floatsisf+0x6a>
     b74:	77 23       	and	r23, r23
     b76:	21 f0       	breq	.+8      	; 0xb80 <__floatsisf+0x54>
     b78:	9e e8       	ldi	r25, 0x8E	; 142
     b7a:	87 2f       	mov	r24, r23
     b7c:	76 2f       	mov	r23, r22
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <__floatsisf+0x5e>
     b80:	66 23       	and	r22, r22
     b82:	71 f0       	breq	.+28     	; 0xba0 <__floatsisf+0x74>
     b84:	96 e8       	ldi	r25, 0x86	; 134
     b86:	86 2f       	mov	r24, r22
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	2a f0       	brmi	.+10     	; 0xb98 <__floatsisf+0x6c>
     b8e:	9a 95       	dec	r25
     b90:	66 0f       	add	r22, r22
     b92:	77 1f       	adc	r23, r23
     b94:	88 1f       	adc	r24, r24
     b96:	da f7       	brpl	.-10     	; 0xb8e <__floatsisf+0x62>
     b98:	88 0f       	add	r24, r24
     b9a:	96 95       	lsr	r25
     b9c:	87 95       	ror	r24
     b9e:	97 f9       	bld	r25, 7
     ba0:	08 95       	ret

00000ba2 <__fp_inf>:
     ba2:	97 f9       	bld	r25, 7
     ba4:	9f 67       	ori	r25, 0x7F	; 127
     ba6:	80 e8       	ldi	r24, 0x80	; 128
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	08 95       	ret

00000bae <__fp_nan>:
     bae:	9f ef       	ldi	r25, 0xFF	; 255
     bb0:	80 ec       	ldi	r24, 0xC0	; 192
     bb2:	08 95       	ret

00000bb4 <__fp_pscA>:
     bb4:	00 24       	eor	r0, r0
     bb6:	0a 94       	dec	r0
     bb8:	16 16       	cp	r1, r22
     bba:	17 06       	cpc	r1, r23
     bbc:	18 06       	cpc	r1, r24
     bbe:	09 06       	cpc	r0, r25
     bc0:	08 95       	ret

00000bc2 <__fp_pscB>:
     bc2:	00 24       	eor	r0, r0
     bc4:	0a 94       	dec	r0
     bc6:	12 16       	cp	r1, r18
     bc8:	13 06       	cpc	r1, r19
     bca:	14 06       	cpc	r1, r20
     bcc:	05 06       	cpc	r0, r21
     bce:	08 95       	ret

00000bd0 <__fp_round>:
     bd0:	09 2e       	mov	r0, r25
     bd2:	03 94       	inc	r0
     bd4:	00 0c       	add	r0, r0
     bd6:	11 f4       	brne	.+4      	; 0xbdc <__fp_round+0xc>
     bd8:	88 23       	and	r24, r24
     bda:	52 f0       	brmi	.+20     	; 0xbf0 <__fp_round+0x20>
     bdc:	bb 0f       	add	r27, r27
     bde:	40 f4       	brcc	.+16     	; 0xbf0 <__fp_round+0x20>
     be0:	bf 2b       	or	r27, r31
     be2:	11 f4       	brne	.+4      	; 0xbe8 <__fp_round+0x18>
     be4:	60 ff       	sbrs	r22, 0
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <__fp_round+0x20>
     be8:	6f 5f       	subi	r22, 0xFF	; 255
     bea:	7f 4f       	sbci	r23, 0xFF	; 255
     bec:	8f 4f       	sbci	r24, 0xFF	; 255
     bee:	9f 4f       	sbci	r25, 0xFF	; 255
     bf0:	08 95       	ret

00000bf2 <__fp_split3>:
     bf2:	57 fd       	sbrc	r21, 7
     bf4:	90 58       	subi	r25, 0x80	; 128
     bf6:	44 0f       	add	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	59 f0       	breq	.+22     	; 0xc12 <__fp_splitA+0x10>
     bfc:	5f 3f       	cpi	r21, 0xFF	; 255
     bfe:	71 f0       	breq	.+28     	; 0xc1c <__fp_splitA+0x1a>
     c00:	47 95       	ror	r20

00000c02 <__fp_splitA>:
     c02:	88 0f       	add	r24, r24
     c04:	97 fb       	bst	r25, 7
     c06:	99 1f       	adc	r25, r25
     c08:	61 f0       	breq	.+24     	; 0xc22 <__fp_splitA+0x20>
     c0a:	9f 3f       	cpi	r25, 0xFF	; 255
     c0c:	79 f0       	breq	.+30     	; 0xc2c <__fp_splitA+0x2a>
     c0e:	87 95       	ror	r24
     c10:	08 95       	ret
     c12:	12 16       	cp	r1, r18
     c14:	13 06       	cpc	r1, r19
     c16:	14 06       	cpc	r1, r20
     c18:	55 1f       	adc	r21, r21
     c1a:	f2 cf       	rjmp	.-28     	; 0xc00 <__fp_split3+0xe>
     c1c:	46 95       	lsr	r20
     c1e:	f1 df       	rcall	.-30     	; 0xc02 <__fp_splitA>
     c20:	08 c0       	rjmp	.+16     	; 0xc32 <__fp_splitA+0x30>
     c22:	16 16       	cp	r1, r22
     c24:	17 06       	cpc	r1, r23
     c26:	18 06       	cpc	r1, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	f1 cf       	rjmp	.-30     	; 0xc0e <__fp_splitA+0xc>
     c2c:	86 95       	lsr	r24
     c2e:	71 05       	cpc	r23, r1
     c30:	61 05       	cpc	r22, r1
     c32:	08 94       	sec
     c34:	08 95       	ret

00000c36 <__fp_zero>:
     c36:	e8 94       	clt

00000c38 <__fp_szero>:
     c38:	bb 27       	eor	r27, r27
     c3a:	66 27       	eor	r22, r22
     c3c:	77 27       	eor	r23, r23
     c3e:	cb 01       	movw	r24, r22
     c40:	97 f9       	bld	r25, 7
     c42:	08 95       	ret

00000c44 <__mulsf3>:
     c44:	0e 94 35 06 	call	0xc6a	; 0xc6a <__mulsf3x>
     c48:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_round>
     c4c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_pscA>
     c50:	38 f0       	brcs	.+14     	; 0xc60 <__mulsf3+0x1c>
     c52:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_pscB>
     c56:	20 f0       	brcs	.+8      	; 0xc60 <__mulsf3+0x1c>
     c58:	95 23       	and	r25, r21
     c5a:	11 f0       	breq	.+4      	; 0xc60 <__mulsf3+0x1c>
     c5c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_inf>
     c60:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__fp_nan>
     c64:	11 24       	eor	r1, r1
     c66:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_szero>

00000c6a <__mulsf3x>:
     c6a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_split3>
     c6e:	70 f3       	brcs	.-36     	; 0xc4c <__mulsf3+0x8>

00000c70 <__mulsf3_pse>:
     c70:	95 9f       	mul	r25, r21
     c72:	c1 f3       	breq	.-16     	; 0xc64 <__mulsf3+0x20>
     c74:	95 0f       	add	r25, r21
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	55 1f       	adc	r21, r21
     c7a:	62 9f       	mul	r22, r18
     c7c:	f0 01       	movw	r30, r0
     c7e:	72 9f       	mul	r23, r18
     c80:	bb 27       	eor	r27, r27
     c82:	f0 0d       	add	r31, r0
     c84:	b1 1d       	adc	r27, r1
     c86:	63 9f       	mul	r22, r19
     c88:	aa 27       	eor	r26, r26
     c8a:	f0 0d       	add	r31, r0
     c8c:	b1 1d       	adc	r27, r1
     c8e:	aa 1f       	adc	r26, r26
     c90:	64 9f       	mul	r22, r20
     c92:	66 27       	eor	r22, r22
     c94:	b0 0d       	add	r27, r0
     c96:	a1 1d       	adc	r26, r1
     c98:	66 1f       	adc	r22, r22
     c9a:	82 9f       	mul	r24, r18
     c9c:	22 27       	eor	r18, r18
     c9e:	b0 0d       	add	r27, r0
     ca0:	a1 1d       	adc	r26, r1
     ca2:	62 1f       	adc	r22, r18
     ca4:	73 9f       	mul	r23, r19
     ca6:	b0 0d       	add	r27, r0
     ca8:	a1 1d       	adc	r26, r1
     caa:	62 1f       	adc	r22, r18
     cac:	83 9f       	mul	r24, r19
     cae:	a0 0d       	add	r26, r0
     cb0:	61 1d       	adc	r22, r1
     cb2:	22 1f       	adc	r18, r18
     cb4:	74 9f       	mul	r23, r20
     cb6:	33 27       	eor	r19, r19
     cb8:	a0 0d       	add	r26, r0
     cba:	61 1d       	adc	r22, r1
     cbc:	23 1f       	adc	r18, r19
     cbe:	84 9f       	mul	r24, r20
     cc0:	60 0d       	add	r22, r0
     cc2:	21 1d       	adc	r18, r1
     cc4:	82 2f       	mov	r24, r18
     cc6:	76 2f       	mov	r23, r22
     cc8:	6a 2f       	mov	r22, r26
     cca:	11 24       	eor	r1, r1
     ccc:	9f 57       	subi	r25, 0x7F	; 127
     cce:	50 40       	sbci	r21, 0x00	; 0
     cd0:	9a f0       	brmi	.+38     	; 0xcf8 <__mulsf3_pse+0x88>
     cd2:	f1 f0       	breq	.+60     	; 0xd10 <__mulsf3_pse+0xa0>
     cd4:	88 23       	and	r24, r24
     cd6:	4a f0       	brmi	.+18     	; 0xcea <__mulsf3_pse+0x7a>
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	bb 1f       	adc	r27, r27
     cde:	66 1f       	adc	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	88 1f       	adc	r24, r24
     ce4:	91 50       	subi	r25, 0x01	; 1
     ce6:	50 40       	sbci	r21, 0x00	; 0
     ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__mulsf3_pse+0x64>
     cea:	9e 3f       	cpi	r25, 0xFE	; 254
     cec:	51 05       	cpc	r21, r1
     cee:	80 f0       	brcs	.+32     	; 0xd10 <__mulsf3_pse+0xa0>
     cf0:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_inf>
     cf4:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_szero>
     cf8:	5f 3f       	cpi	r21, 0xFF	; 255
     cfa:	e4 f3       	brlt	.-8      	; 0xcf4 <__mulsf3_pse+0x84>
     cfc:	98 3e       	cpi	r25, 0xE8	; 232
     cfe:	d4 f3       	brlt	.-12     	; 0xcf4 <__mulsf3_pse+0x84>
     d00:	86 95       	lsr	r24
     d02:	77 95       	ror	r23
     d04:	67 95       	ror	r22
     d06:	b7 95       	ror	r27
     d08:	f7 95       	ror	r31
     d0a:	e7 95       	ror	r30
     d0c:	9f 5f       	subi	r25, 0xFF	; 255
     d0e:	c1 f7       	brne	.-16     	; 0xd00 <__mulsf3_pse+0x90>
     d10:	fe 2b       	or	r31, r30
     d12:	88 0f       	add	r24, r24
     d14:	91 1d       	adc	r25, r1
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	97 f9       	bld	r25, 7
     d1c:	08 95       	ret

00000d1e <__divmodhi4>:
     d1e:	97 fb       	bst	r25, 7
     d20:	07 2e       	mov	r0, r23
     d22:	16 f4       	brtc	.+4      	; 0xd28 <__divmodhi4+0xa>
     d24:	00 94       	com	r0
     d26:	07 d0       	rcall	.+14     	; 0xd36 <__divmodhi4_neg1>
     d28:	77 fd       	sbrc	r23, 7
     d2a:	09 d0       	rcall	.+18     	; 0xd3e <__divmodhi4_neg2>
     d2c:	0e 94 a9 06 	call	0xd52	; 0xd52 <__udivmodhi4>
     d30:	07 fc       	sbrc	r0, 7
     d32:	05 d0       	rcall	.+10     	; 0xd3e <__divmodhi4_neg2>
     d34:	3e f4       	brtc	.+14     	; 0xd44 <__divmodhi4_exit>

00000d36 <__divmodhi4_neg1>:
     d36:	90 95       	com	r25
     d38:	81 95       	neg	r24
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	08 95       	ret

00000d3e <__divmodhi4_neg2>:
     d3e:	70 95       	com	r23
     d40:	61 95       	neg	r22
     d42:	7f 4f       	sbci	r23, 0xFF	; 255

00000d44 <__divmodhi4_exit>:
     d44:	08 95       	ret

00000d46 <__tablejump2__>:
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	05 90       	lpm	r0, Z+
     d4c:	f4 91       	lpm	r31, Z
     d4e:	e0 2d       	mov	r30, r0
     d50:	09 94       	ijmp

00000d52 <__udivmodhi4>:
     d52:	aa 1b       	sub	r26, r26
     d54:	bb 1b       	sub	r27, r27
     d56:	51 e1       	ldi	r21, 0x11	; 17
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <__udivmodhi4_ep>

00000d5a <__udivmodhi4_loop>:
     d5a:	aa 1f       	adc	r26, r26
     d5c:	bb 1f       	adc	r27, r27
     d5e:	a6 17       	cp	r26, r22
     d60:	b7 07       	cpc	r27, r23
     d62:	10 f0       	brcs	.+4      	; 0xd68 <__udivmodhi4_ep>
     d64:	a6 1b       	sub	r26, r22
     d66:	b7 0b       	sbc	r27, r23

00000d68 <__udivmodhi4_ep>:
     d68:	88 1f       	adc	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	5a 95       	dec	r21
     d6e:	a9 f7       	brne	.-22     	; 0xd5a <__udivmodhi4_loop>
     d70:	80 95       	com	r24
     d72:	90 95       	com	r25
     d74:	bc 01       	movw	r22, r24
     d76:	cd 01       	movw	r24, r26
     d78:	08 95       	ret

00000d7a <do_rand>:
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	68 81       	ld	r22, Y
     d92:	79 81       	ldd	r23, Y+1	; 0x01
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	61 15       	cp	r22, r1
     d9a:	71 05       	cpc	r23, r1
     d9c:	81 05       	cpc	r24, r1
     d9e:	91 05       	cpc	r25, r1
     da0:	21 f4       	brne	.+8      	; 0xdaa <do_rand+0x30>
     da2:	64 e2       	ldi	r22, 0x24	; 36
     da4:	79 ed       	ldi	r23, 0xD9	; 217
     da6:	8b e5       	ldi	r24, 0x5B	; 91
     da8:	97 e0       	ldi	r25, 0x07	; 7
     daa:	2d e1       	ldi	r18, 0x1D	; 29
     dac:	33 ef       	ldi	r19, 0xF3	; 243
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divmodsi4>
     db6:	49 01       	movw	r8, r18
     db8:	5a 01       	movw	r10, r20
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	a7 ea       	ldi	r26, 0xA7	; 167
     dc0:	b1 e4       	ldi	r27, 0x41	; 65
     dc2:	0e 94 20 0a 	call	0x1440	; 0x1440 <__muluhisi3>
     dc6:	6b 01       	movw	r12, r22
     dc8:	7c 01       	movw	r14, r24
     dca:	ac ee       	ldi	r26, 0xEC	; 236
     dcc:	b4 ef       	ldi	r27, 0xF4	; 244
     dce:	a5 01       	movw	r20, r10
     dd0:	94 01       	movw	r18, r8
     dd2:	0e 94 2e 0a 	call	0x145c	; 0x145c <__mulohisi3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	8c 0d       	add	r24, r12
     ddc:	9d 1d       	adc	r25, r13
     dde:	ae 1d       	adc	r26, r14
     de0:	bf 1d       	adc	r27, r15
     de2:	b7 ff       	sbrs	r27, 7
     de4:	03 c0       	rjmp	.+6      	; 0xdec <do_rand+0x72>
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	a1 09       	sbc	r26, r1
     dea:	b0 48       	sbci	r27, 0x80	; 128
     dec:	88 83       	st	Y, r24
     dee:	99 83       	std	Y+1, r25	; 0x01
     df0:	aa 83       	std	Y+2, r26	; 0x02
     df2:	bb 83       	std	Y+3, r27	; 0x03
     df4:	9f 77       	andi	r25, 0x7F	; 127
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	08 95       	ret

00000e0c <rand_r>:
     e0c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <do_rand>
     e10:	08 95       	ret

00000e12 <rand>:
     e12:	80 e6       	ldi	r24, 0x60	; 96
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 bd 06 	call	0xd7a	; 0xd7a <do_rand>
     e1a:	08 95       	ret

00000e1c <srand>:
     e1c:	a0 e0       	ldi	r26, 0x00	; 0
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     e24:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e28:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     e2c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     e30:	08 95       	ret

00000e32 <__itoa_ncheck>:
     e32:	bb 27       	eor	r27, r27
     e34:	4a 30       	cpi	r20, 0x0A	; 10
     e36:	31 f4       	brne	.+12     	; 0xe44 <__itoa_ncheck+0x12>
     e38:	99 23       	and	r25, r25
     e3a:	22 f4       	brpl	.+8      	; 0xe44 <__itoa_ncheck+0x12>
     e3c:	bd e2       	ldi	r27, 0x2D	; 45
     e3e:	90 95       	com	r25
     e40:	81 95       	neg	r24
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__utoa_common>

00000e48 <__utoa_ncheck>:
     e48:	bb 27       	eor	r27, r27

00000e4a <__utoa_common>:
     e4a:	fb 01       	movw	r30, r22
     e4c:	55 27       	eor	r21, r21
     e4e:	aa 27       	eor	r26, r26
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	aa 1f       	adc	r26, r26
     e56:	a4 17       	cp	r26, r20
     e58:	10 f0       	brcs	.+4      	; 0xe5e <__utoa_common+0x14>
     e5a:	a4 1b       	sub	r26, r20
     e5c:	83 95       	inc	r24
     e5e:	50 51       	subi	r21, 0x10	; 16
     e60:	b9 f7       	brne	.-18     	; 0xe50 <__utoa_common+0x6>
     e62:	a0 5d       	subi	r26, 0xD0	; 208
     e64:	aa 33       	cpi	r26, 0x3A	; 58
     e66:	08 f0       	brcs	.+2      	; 0xe6a <__utoa_common+0x20>
     e68:	a9 5d       	subi	r26, 0xD9	; 217
     e6a:	a1 93       	st	Z+, r26
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	79 f7       	brne	.-34     	; 0xe4e <__utoa_common+0x4>
     e70:	b1 11       	cpse	r27, r1
     e72:	b1 93       	st	Z+, r27
     e74:	11 92       	st	Z+, r1
     e76:	cb 01       	movw	r24, r22
     e78:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <strrev>

00000e7c <sprintf>:
     e7c:	ae e0       	ldi	r26, 0x0E	; 14
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e4       	ldi	r30, 0x44	; 68
     e82:	f7 e0       	ldi	r31, 0x07	; 7
     e84:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__prologue_saves__+0x1c>
     e88:	0d 89       	ldd	r16, Y+21	; 0x15
     e8a:	1e 89       	ldd	r17, Y+22	; 0x16
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	8c 83       	std	Y+4, r24	; 0x04
     e90:	1a 83       	std	Y+2, r17	; 0x02
     e92:	09 83       	std	Y+1, r16	; 0x01
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	9f e7       	ldi	r25, 0x7F	; 127
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	ae 01       	movw	r20, r28
     e9e:	47 5e       	subi	r20, 0xE7	; 231
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	6f 89       	ldd	r22, Y+23	; 0x17
     ea4:	78 8d       	ldd	r23, Y+24	; 0x18
     ea6:	ce 01       	movw	r24, r28
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	0e 94 60 07 	call	0xec0	; 0xec0 <vfprintf>
     eae:	ef 81       	ldd	r30, Y+7	; 0x07
     eb0:	f8 85       	ldd	r31, Y+8	; 0x08
     eb2:	e0 0f       	add	r30, r16
     eb4:	f1 1f       	adc	r31, r17
     eb6:	10 82       	st	Z, r1
     eb8:	2e 96       	adiw	r28, 0x0e	; 14
     eba:	e4 e0       	ldi	r30, 0x04	; 4
     ebc:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__epilogue_restores__+0x1c>

00000ec0 <vfprintf>:
     ec0:	ab e0       	ldi	r26, 0x0B	; 11
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e6 e6       	ldi	r30, 0x66	; 102
     ec6:	f7 e0       	ldi	r31, 0x07	; 7
     ec8:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__prologue_saves__>
     ecc:	6c 01       	movw	r12, r24
     ece:	7b 01       	movw	r14, r22
     ed0:	8a 01       	movw	r16, r20
     ed2:	fc 01       	movw	r30, r24
     ed4:	17 82       	std	Z+7, r1	; 0x07
     ed6:	16 82       	std	Z+6, r1	; 0x06
     ed8:	83 81       	ldd	r24, Z+3	; 0x03
     eda:	81 ff       	sbrs	r24, 1
     edc:	cc c1       	rjmp	.+920    	; 0x1276 <vfprintf+0x3b6>
     ede:	ce 01       	movw	r24, r28
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	3c 01       	movw	r6, r24
     ee4:	f6 01       	movw	r30, r12
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	f7 01       	movw	r30, r14
     eea:	93 fd       	sbrc	r25, 3
     eec:	85 91       	lpm	r24, Z+
     eee:	93 ff       	sbrs	r25, 3
     ef0:	81 91       	ld	r24, Z+
     ef2:	7f 01       	movw	r14, r30
     ef4:	88 23       	and	r24, r24
     ef6:	09 f4       	brne	.+2      	; 0xefa <vfprintf+0x3a>
     ef8:	ba c1       	rjmp	.+884    	; 0x126e <vfprintf+0x3ae>
     efa:	85 32       	cpi	r24, 0x25	; 37
     efc:	39 f4       	brne	.+14     	; 0xf0c <vfprintf+0x4c>
     efe:	93 fd       	sbrc	r25, 3
     f00:	85 91       	lpm	r24, Z+
     f02:	93 ff       	sbrs	r25, 3
     f04:	81 91       	ld	r24, Z+
     f06:	7f 01       	movw	r14, r30
     f08:	85 32       	cpi	r24, 0x25	; 37
     f0a:	29 f4       	brne	.+10     	; 0xf16 <vfprintf+0x56>
     f0c:	b6 01       	movw	r22, r12
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
     f14:	e7 cf       	rjmp	.-50     	; 0xee4 <vfprintf+0x24>
     f16:	91 2c       	mov	r9, r1
     f18:	21 2c       	mov	r2, r1
     f1a:	31 2c       	mov	r3, r1
     f1c:	ff e1       	ldi	r31, 0x1F	; 31
     f1e:	f3 15       	cp	r31, r3
     f20:	d8 f0       	brcs	.+54     	; 0xf58 <vfprintf+0x98>
     f22:	8b 32       	cpi	r24, 0x2B	; 43
     f24:	79 f0       	breq	.+30     	; 0xf44 <vfprintf+0x84>
     f26:	38 f4       	brcc	.+14     	; 0xf36 <vfprintf+0x76>
     f28:	80 32       	cpi	r24, 0x20	; 32
     f2a:	79 f0       	breq	.+30     	; 0xf4a <vfprintf+0x8a>
     f2c:	83 32       	cpi	r24, 0x23	; 35
     f2e:	a1 f4       	brne	.+40     	; 0xf58 <vfprintf+0x98>
     f30:	23 2d       	mov	r18, r3
     f32:	20 61       	ori	r18, 0x10	; 16
     f34:	1d c0       	rjmp	.+58     	; 0xf70 <vfprintf+0xb0>
     f36:	8d 32       	cpi	r24, 0x2D	; 45
     f38:	61 f0       	breq	.+24     	; 0xf52 <vfprintf+0x92>
     f3a:	80 33       	cpi	r24, 0x30	; 48
     f3c:	69 f4       	brne	.+26     	; 0xf58 <vfprintf+0x98>
     f3e:	23 2d       	mov	r18, r3
     f40:	21 60       	ori	r18, 0x01	; 1
     f42:	16 c0       	rjmp	.+44     	; 0xf70 <vfprintf+0xb0>
     f44:	83 2d       	mov	r24, r3
     f46:	82 60       	ori	r24, 0x02	; 2
     f48:	38 2e       	mov	r3, r24
     f4a:	e3 2d       	mov	r30, r3
     f4c:	e4 60       	ori	r30, 0x04	; 4
     f4e:	3e 2e       	mov	r3, r30
     f50:	2a c0       	rjmp	.+84     	; 0xfa6 <vfprintf+0xe6>
     f52:	f3 2d       	mov	r31, r3
     f54:	f8 60       	ori	r31, 0x08	; 8
     f56:	1d c0       	rjmp	.+58     	; 0xf92 <vfprintf+0xd2>
     f58:	37 fc       	sbrc	r3, 7
     f5a:	2d c0       	rjmp	.+90     	; 0xfb6 <vfprintf+0xf6>
     f5c:	20 ed       	ldi	r18, 0xD0	; 208
     f5e:	28 0f       	add	r18, r24
     f60:	2a 30       	cpi	r18, 0x0A	; 10
     f62:	40 f0       	brcs	.+16     	; 0xf74 <vfprintf+0xb4>
     f64:	8e 32       	cpi	r24, 0x2E	; 46
     f66:	b9 f4       	brne	.+46     	; 0xf96 <vfprintf+0xd6>
     f68:	36 fc       	sbrc	r3, 6
     f6a:	81 c1       	rjmp	.+770    	; 0x126e <vfprintf+0x3ae>
     f6c:	23 2d       	mov	r18, r3
     f6e:	20 64       	ori	r18, 0x40	; 64
     f70:	32 2e       	mov	r3, r18
     f72:	19 c0       	rjmp	.+50     	; 0xfa6 <vfprintf+0xe6>
     f74:	36 fe       	sbrs	r3, 6
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <vfprintf+0xc4>
     f78:	8a e0       	ldi	r24, 0x0A	; 10
     f7a:	98 9e       	mul	r9, r24
     f7c:	20 0d       	add	r18, r0
     f7e:	11 24       	eor	r1, r1
     f80:	92 2e       	mov	r9, r18
     f82:	11 c0       	rjmp	.+34     	; 0xfa6 <vfprintf+0xe6>
     f84:	ea e0       	ldi	r30, 0x0A	; 10
     f86:	2e 9e       	mul	r2, r30
     f88:	20 0d       	add	r18, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	22 2e       	mov	r2, r18
     f8e:	f3 2d       	mov	r31, r3
     f90:	f0 62       	ori	r31, 0x20	; 32
     f92:	3f 2e       	mov	r3, r31
     f94:	08 c0       	rjmp	.+16     	; 0xfa6 <vfprintf+0xe6>
     f96:	8c 36       	cpi	r24, 0x6C	; 108
     f98:	21 f4       	brne	.+8      	; 0xfa2 <vfprintf+0xe2>
     f9a:	83 2d       	mov	r24, r3
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	38 2e       	mov	r3, r24
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <vfprintf+0xe6>
     fa2:	88 36       	cpi	r24, 0x68	; 104
     fa4:	41 f4       	brne	.+16     	; 0xfb6 <vfprintf+0xf6>
     fa6:	f7 01       	movw	r30, r14
     fa8:	93 fd       	sbrc	r25, 3
     faa:	85 91       	lpm	r24, Z+
     fac:	93 ff       	sbrs	r25, 3
     fae:	81 91       	ld	r24, Z+
     fb0:	7f 01       	movw	r14, r30
     fb2:	81 11       	cpse	r24, r1
     fb4:	b3 cf       	rjmp	.-154    	; 0xf1c <vfprintf+0x5c>
     fb6:	98 2f       	mov	r25, r24
     fb8:	9f 7d       	andi	r25, 0xDF	; 223
     fba:	95 54       	subi	r25, 0x45	; 69
     fbc:	93 30       	cpi	r25, 0x03	; 3
     fbe:	28 f4       	brcc	.+10     	; 0xfca <vfprintf+0x10a>
     fc0:	0c 5f       	subi	r16, 0xFC	; 252
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	9f e3       	ldi	r25, 0x3F	; 63
     fc6:	99 83       	std	Y+1, r25	; 0x01
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <vfprintf+0x124>
     fca:	83 36       	cpi	r24, 0x63	; 99
     fcc:	31 f0       	breq	.+12     	; 0xfda <vfprintf+0x11a>
     fce:	83 37       	cpi	r24, 0x73	; 115
     fd0:	71 f0       	breq	.+28     	; 0xfee <vfprintf+0x12e>
     fd2:	83 35       	cpi	r24, 0x53	; 83
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <vfprintf+0x118>
     fd6:	59 c0       	rjmp	.+178    	; 0x108a <vfprintf+0x1ca>
     fd8:	21 c0       	rjmp	.+66     	; 0x101c <vfprintf+0x15c>
     fda:	f8 01       	movw	r30, r16
     fdc:	80 81       	ld	r24, Z
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	0e 5f       	subi	r16, 0xFE	; 254
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	88 24       	eor	r8, r8
     fe6:	83 94       	inc	r8
     fe8:	91 2c       	mov	r9, r1
     fea:	53 01       	movw	r10, r6
     fec:	13 c0       	rjmp	.+38     	; 0x1014 <vfprintf+0x154>
     fee:	28 01       	movw	r4, r16
     ff0:	f2 e0       	ldi	r31, 0x02	; 2
     ff2:	4f 0e       	add	r4, r31
     ff4:	51 1c       	adc	r5, r1
     ff6:	f8 01       	movw	r30, r16
     ff8:	a0 80       	ld	r10, Z
     ffa:	b1 80       	ldd	r11, Z+1	; 0x01
     ffc:	36 fe       	sbrs	r3, 6
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <vfprintf+0x146>
    1000:	69 2d       	mov	r22, r9
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x14a>
    1006:	6f ef       	ldi	r22, 0xFF	; 255
    1008:	7f ef       	ldi	r23, 0xFF	; 255
    100a:	c5 01       	movw	r24, r10
    100c:	0e 94 4c 09 	call	0x1298	; 0x1298 <strnlen>
    1010:	4c 01       	movw	r8, r24
    1012:	82 01       	movw	r16, r4
    1014:	f3 2d       	mov	r31, r3
    1016:	ff 77       	andi	r31, 0x7F	; 127
    1018:	3f 2e       	mov	r3, r31
    101a:	16 c0       	rjmp	.+44     	; 0x1048 <vfprintf+0x188>
    101c:	28 01       	movw	r4, r16
    101e:	22 e0       	ldi	r18, 0x02	; 2
    1020:	42 0e       	add	r4, r18
    1022:	51 1c       	adc	r5, r1
    1024:	f8 01       	movw	r30, r16
    1026:	a0 80       	ld	r10, Z
    1028:	b1 80       	ldd	r11, Z+1	; 0x01
    102a:	36 fe       	sbrs	r3, 6
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <vfprintf+0x174>
    102e:	69 2d       	mov	r22, r9
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x178>
    1034:	6f ef       	ldi	r22, 0xFF	; 255
    1036:	7f ef       	ldi	r23, 0xFF	; 255
    1038:	c5 01       	movw	r24, r10
    103a:	0e 94 41 09 	call	0x1282	; 0x1282 <strnlen_P>
    103e:	4c 01       	movw	r8, r24
    1040:	f3 2d       	mov	r31, r3
    1042:	f0 68       	ori	r31, 0x80	; 128
    1044:	3f 2e       	mov	r3, r31
    1046:	82 01       	movw	r16, r4
    1048:	33 fc       	sbrc	r3, 3
    104a:	1b c0       	rjmp	.+54     	; 0x1082 <vfprintf+0x1c2>
    104c:	82 2d       	mov	r24, r2
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	88 16       	cp	r8, r24
    1052:	99 06       	cpc	r9, r25
    1054:	b0 f4       	brcc	.+44     	; 0x1082 <vfprintf+0x1c2>
    1056:	b6 01       	movw	r22, r12
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    1060:	2a 94       	dec	r2
    1062:	f4 cf       	rjmp	.-24     	; 0x104c <vfprintf+0x18c>
    1064:	f5 01       	movw	r30, r10
    1066:	37 fc       	sbrc	r3, 7
    1068:	85 91       	lpm	r24, Z+
    106a:	37 fe       	sbrs	r3, 7
    106c:	81 91       	ld	r24, Z+
    106e:	5f 01       	movw	r10, r30
    1070:	b6 01       	movw	r22, r12
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    1078:	21 10       	cpse	r2, r1
    107a:	2a 94       	dec	r2
    107c:	21 e0       	ldi	r18, 0x01	; 1
    107e:	82 1a       	sub	r8, r18
    1080:	91 08       	sbc	r9, r1
    1082:	81 14       	cp	r8, r1
    1084:	91 04       	cpc	r9, r1
    1086:	71 f7       	brne	.-36     	; 0x1064 <vfprintf+0x1a4>
    1088:	e8 c0       	rjmp	.+464    	; 0x125a <vfprintf+0x39a>
    108a:	84 36       	cpi	r24, 0x64	; 100
    108c:	11 f0       	breq	.+4      	; 0x1092 <vfprintf+0x1d2>
    108e:	89 36       	cpi	r24, 0x69	; 105
    1090:	41 f5       	brne	.+80     	; 0x10e2 <vfprintf+0x222>
    1092:	f8 01       	movw	r30, r16
    1094:	37 fe       	sbrs	r3, 7
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <vfprintf+0x1e6>
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	0c 5f       	subi	r16, 0xFC	; 252
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <vfprintf+0x1f6>
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	07 2e       	mov	r0, r23
    10ac:	00 0c       	add	r0, r0
    10ae:	88 0b       	sbc	r24, r24
    10b0:	99 0b       	sbc	r25, r25
    10b2:	0e 5f       	subi	r16, 0xFE	; 254
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	f3 2d       	mov	r31, r3
    10b8:	ff 76       	andi	r31, 0x6F	; 111
    10ba:	3f 2e       	mov	r3, r31
    10bc:	97 ff       	sbrs	r25, 7
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <vfprintf+0x212>
    10c0:	90 95       	com	r25
    10c2:	80 95       	com	r24
    10c4:	70 95       	com	r23
    10c6:	61 95       	neg	r22
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	f0 68       	ori	r31, 0x80	; 128
    10d0:	3f 2e       	mov	r3, r31
    10d2:	2a e0       	ldi	r18, 0x0A	; 10
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	a3 01       	movw	r20, r6
    10d8:	0e 94 a3 09 	call	0x1346	; 0x1346 <__ultoa_invert>
    10dc:	88 2e       	mov	r8, r24
    10de:	86 18       	sub	r8, r6
    10e0:	45 c0       	rjmp	.+138    	; 0x116c <vfprintf+0x2ac>
    10e2:	85 37       	cpi	r24, 0x75	; 117
    10e4:	31 f4       	brne	.+12     	; 0x10f2 <vfprintf+0x232>
    10e6:	23 2d       	mov	r18, r3
    10e8:	2f 7e       	andi	r18, 0xEF	; 239
    10ea:	b2 2e       	mov	r11, r18
    10ec:	2a e0       	ldi	r18, 0x0A	; 10
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	25 c0       	rjmp	.+74     	; 0x113c <vfprintf+0x27c>
    10f2:	93 2d       	mov	r25, r3
    10f4:	99 7f       	andi	r25, 0xF9	; 249
    10f6:	b9 2e       	mov	r11, r25
    10f8:	8f 36       	cpi	r24, 0x6F	; 111
    10fa:	c1 f0       	breq	.+48     	; 0x112c <vfprintf+0x26c>
    10fc:	18 f4       	brcc	.+6      	; 0x1104 <vfprintf+0x244>
    10fe:	88 35       	cpi	r24, 0x58	; 88
    1100:	79 f0       	breq	.+30     	; 0x1120 <vfprintf+0x260>
    1102:	b5 c0       	rjmp	.+362    	; 0x126e <vfprintf+0x3ae>
    1104:	80 37       	cpi	r24, 0x70	; 112
    1106:	19 f0       	breq	.+6      	; 0x110e <vfprintf+0x24e>
    1108:	88 37       	cpi	r24, 0x78	; 120
    110a:	21 f0       	breq	.+8      	; 0x1114 <vfprintf+0x254>
    110c:	b0 c0       	rjmp	.+352    	; 0x126e <vfprintf+0x3ae>
    110e:	e9 2f       	mov	r30, r25
    1110:	e0 61       	ori	r30, 0x10	; 16
    1112:	be 2e       	mov	r11, r30
    1114:	b4 fe       	sbrs	r11, 4
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <vfprintf+0x272>
    1118:	fb 2d       	mov	r31, r11
    111a:	f4 60       	ori	r31, 0x04	; 4
    111c:	bf 2e       	mov	r11, r31
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <vfprintf+0x272>
    1120:	34 fe       	sbrs	r3, 4
    1122:	0a c0       	rjmp	.+20     	; 0x1138 <vfprintf+0x278>
    1124:	29 2f       	mov	r18, r25
    1126:	26 60       	ori	r18, 0x06	; 6
    1128:	b2 2e       	mov	r11, r18
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <vfprintf+0x278>
    112c:	28 e0       	ldi	r18, 0x08	; 8
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	05 c0       	rjmp	.+10     	; 0x113c <vfprintf+0x27c>
    1132:	20 e1       	ldi	r18, 0x10	; 16
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <vfprintf+0x27c>
    1138:	20 e1       	ldi	r18, 0x10	; 16
    113a:	32 e0       	ldi	r19, 0x02	; 2
    113c:	f8 01       	movw	r30, r16
    113e:	b7 fe       	sbrs	r11, 7
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <vfprintf+0x290>
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	0c 5f       	subi	r16, 0xFC	; 252
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	06 c0       	rjmp	.+12     	; 0x115c <vfprintf+0x29c>
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 5f       	subi	r16, 0xFE	; 254
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	a3 01       	movw	r20, r6
    115e:	0e 94 a3 09 	call	0x1346	; 0x1346 <__ultoa_invert>
    1162:	88 2e       	mov	r8, r24
    1164:	86 18       	sub	r8, r6
    1166:	fb 2d       	mov	r31, r11
    1168:	ff 77       	andi	r31, 0x7F	; 127
    116a:	3f 2e       	mov	r3, r31
    116c:	36 fe       	sbrs	r3, 6
    116e:	0d c0       	rjmp	.+26     	; 0x118a <vfprintf+0x2ca>
    1170:	23 2d       	mov	r18, r3
    1172:	2e 7f       	andi	r18, 0xFE	; 254
    1174:	a2 2e       	mov	r10, r18
    1176:	89 14       	cp	r8, r9
    1178:	58 f4       	brcc	.+22     	; 0x1190 <vfprintf+0x2d0>
    117a:	34 fe       	sbrs	r3, 4
    117c:	0b c0       	rjmp	.+22     	; 0x1194 <vfprintf+0x2d4>
    117e:	32 fc       	sbrc	r3, 2
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <vfprintf+0x2d4>
    1182:	83 2d       	mov	r24, r3
    1184:	8e 7e       	andi	r24, 0xEE	; 238
    1186:	a8 2e       	mov	r10, r24
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <vfprintf+0x2d4>
    118a:	b8 2c       	mov	r11, r8
    118c:	a3 2c       	mov	r10, r3
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <vfprintf+0x2d6>
    1190:	b8 2c       	mov	r11, r8
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <vfprintf+0x2d6>
    1194:	b9 2c       	mov	r11, r9
    1196:	a4 fe       	sbrs	r10, 4
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <vfprintf+0x2f8>
    119a:	fe 01       	movw	r30, r28
    119c:	e8 0d       	add	r30, r8
    119e:	f1 1d       	adc	r31, r1
    11a0:	80 81       	ld	r24, Z
    11a2:	80 33       	cpi	r24, 0x30	; 48
    11a4:	21 f4       	brne	.+8      	; 0x11ae <vfprintf+0x2ee>
    11a6:	9a 2d       	mov	r25, r10
    11a8:	99 7e       	andi	r25, 0xE9	; 233
    11aa:	a9 2e       	mov	r10, r25
    11ac:	09 c0       	rjmp	.+18     	; 0x11c0 <vfprintf+0x300>
    11ae:	a2 fe       	sbrs	r10, 2
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <vfprintf+0x2fe>
    11b2:	b3 94       	inc	r11
    11b4:	b3 94       	inc	r11
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <vfprintf+0x300>
    11b8:	8a 2d       	mov	r24, r10
    11ba:	86 78       	andi	r24, 0x86	; 134
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <vfprintf+0x300>
    11be:	b3 94       	inc	r11
    11c0:	a3 fc       	sbrc	r10, 3
    11c2:	11 c0       	rjmp	.+34     	; 0x11e6 <vfprintf+0x326>
    11c4:	a0 fe       	sbrs	r10, 0
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <vfprintf+0x314>
    11c8:	b2 14       	cp	r11, r2
    11ca:	88 f4       	brcc	.+34     	; 0x11ee <vfprintf+0x32e>
    11cc:	28 0c       	add	r2, r8
    11ce:	92 2c       	mov	r9, r2
    11d0:	9b 18       	sub	r9, r11
    11d2:	0e c0       	rjmp	.+28     	; 0x11f0 <vfprintf+0x330>
    11d4:	b2 14       	cp	r11, r2
    11d6:	60 f4       	brcc	.+24     	; 0x11f0 <vfprintf+0x330>
    11d8:	b6 01       	movw	r22, r12
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    11e2:	b3 94       	inc	r11
    11e4:	f7 cf       	rjmp	.-18     	; 0x11d4 <vfprintf+0x314>
    11e6:	b2 14       	cp	r11, r2
    11e8:	18 f4       	brcc	.+6      	; 0x11f0 <vfprintf+0x330>
    11ea:	2b 18       	sub	r2, r11
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0x332>
    11ee:	98 2c       	mov	r9, r8
    11f0:	21 2c       	mov	r2, r1
    11f2:	a4 fe       	sbrs	r10, 4
    11f4:	10 c0       	rjmp	.+32     	; 0x1216 <vfprintf+0x356>
    11f6:	b6 01       	movw	r22, r12
    11f8:	80 e3       	ldi	r24, 0x30	; 48
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    1200:	a2 fe       	sbrs	r10, 2
    1202:	17 c0       	rjmp	.+46     	; 0x1232 <vfprintf+0x372>
    1204:	a1 fc       	sbrc	r10, 1
    1206:	03 c0       	rjmp	.+6      	; 0x120e <vfprintf+0x34e>
    1208:	88 e7       	ldi	r24, 0x78	; 120
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <vfprintf+0x352>
    120e:	88 e5       	ldi	r24, 0x58	; 88
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	b6 01       	movw	r22, r12
    1214:	0c c0       	rjmp	.+24     	; 0x122e <vfprintf+0x36e>
    1216:	8a 2d       	mov	r24, r10
    1218:	86 78       	andi	r24, 0x86	; 134
    121a:	59 f0       	breq	.+22     	; 0x1232 <vfprintf+0x372>
    121c:	a1 fe       	sbrs	r10, 1
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <vfprintf+0x364>
    1220:	8b e2       	ldi	r24, 0x2B	; 43
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <vfprintf+0x366>
    1224:	80 e2       	ldi	r24, 0x20	; 32
    1226:	a7 fc       	sbrc	r10, 7
    1228:	8d e2       	ldi	r24, 0x2D	; 45
    122a:	b6 01       	movw	r22, r12
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    1232:	89 14       	cp	r8, r9
    1234:	38 f4       	brcc	.+14     	; 0x1244 <vfprintf+0x384>
    1236:	b6 01       	movw	r22, r12
    1238:	80 e3       	ldi	r24, 0x30	; 48
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    1240:	9a 94       	dec	r9
    1242:	f7 cf       	rjmp	.-18     	; 0x1232 <vfprintf+0x372>
    1244:	8a 94       	dec	r8
    1246:	f3 01       	movw	r30, r6
    1248:	e8 0d       	add	r30, r8
    124a:	f1 1d       	adc	r31, r1
    124c:	80 81       	ld	r24, Z
    124e:	b6 01       	movw	r22, r12
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    1256:	81 10       	cpse	r8, r1
    1258:	f5 cf       	rjmp	.-22     	; 0x1244 <vfprintf+0x384>
    125a:	22 20       	and	r2, r2
    125c:	09 f4       	brne	.+2      	; 0x1260 <vfprintf+0x3a0>
    125e:	42 ce       	rjmp	.-892    	; 0xee4 <vfprintf+0x24>
    1260:	b6 01       	movw	r22, r12
    1262:	80 e2       	ldi	r24, 0x20	; 32
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 67 09 	call	0x12ce	; 0x12ce <fputc>
    126a:	2a 94       	dec	r2
    126c:	f6 cf       	rjmp	.-20     	; 0x125a <vfprintf+0x39a>
    126e:	f6 01       	movw	r30, r12
    1270:	86 81       	ldd	r24, Z+6	; 0x06
    1272:	97 81       	ldd	r25, Z+7	; 0x07
    1274:	02 c0       	rjmp	.+4      	; 0x127a <vfprintf+0x3ba>
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    127a:	2b 96       	adiw	r28, 0x0b	; 11
    127c:	e2 e1       	ldi	r30, 0x12	; 18
    127e:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__epilogue_restores__>

00001282 <strnlen_P>:
    1282:	fc 01       	movw	r30, r24
    1284:	05 90       	lpm	r0, Z+
    1286:	61 50       	subi	r22, 0x01	; 1
    1288:	70 40       	sbci	r23, 0x00	; 0
    128a:	01 10       	cpse	r0, r1
    128c:	d8 f7       	brcc	.-10     	; 0x1284 <strnlen_P+0x2>
    128e:	80 95       	com	r24
    1290:	90 95       	com	r25
    1292:	8e 0f       	add	r24, r30
    1294:	9f 1f       	adc	r25, r31
    1296:	08 95       	ret

00001298 <strnlen>:
    1298:	fc 01       	movw	r30, r24
    129a:	61 50       	subi	r22, 0x01	; 1
    129c:	70 40       	sbci	r23, 0x00	; 0
    129e:	01 90       	ld	r0, Z+
    12a0:	01 10       	cpse	r0, r1
    12a2:	d8 f7       	brcc	.-10     	; 0x129a <strnlen+0x2>
    12a4:	80 95       	com	r24
    12a6:	90 95       	com	r25
    12a8:	8e 0f       	add	r24, r30
    12aa:	9f 1f       	adc	r25, r31
    12ac:	08 95       	ret

000012ae <strrev>:
    12ae:	dc 01       	movw	r26, r24
    12b0:	fc 01       	movw	r30, r24
    12b2:	67 2f       	mov	r22, r23
    12b4:	71 91       	ld	r23, Z+
    12b6:	77 23       	and	r23, r23
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <strrev+0x4>
    12ba:	32 97       	sbiw	r30, 0x02	; 2
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <strrev+0x18>
    12be:	7c 91       	ld	r23, X
    12c0:	6d 93       	st	X+, r22
    12c2:	70 83       	st	Z, r23
    12c4:	62 91       	ld	r22, -Z
    12c6:	ae 17       	cp	r26, r30
    12c8:	bf 07       	cpc	r27, r31
    12ca:	c8 f3       	brcs	.-14     	; 0x12be <strrev+0x10>
    12cc:	08 95       	ret

000012ce <fputc>:
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	fb 01       	movw	r30, r22
    12d8:	23 81       	ldd	r18, Z+3	; 0x03
    12da:	21 fd       	sbrc	r18, 1
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <fputc+0x16>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	9f ef       	ldi	r25, 0xFF	; 255
    12e2:	2c c0       	rjmp	.+88     	; 0x133c <fputc+0x6e>
    12e4:	22 ff       	sbrs	r18, 2
    12e6:	16 c0       	rjmp	.+44     	; 0x1314 <fputc+0x46>
    12e8:	46 81       	ldd	r20, Z+6	; 0x06
    12ea:	57 81       	ldd	r21, Z+7	; 0x07
    12ec:	24 81       	ldd	r18, Z+4	; 0x04
    12ee:	35 81       	ldd	r19, Z+5	; 0x05
    12f0:	42 17       	cp	r20, r18
    12f2:	53 07       	cpc	r21, r19
    12f4:	44 f4       	brge	.+16     	; 0x1306 <fputc+0x38>
    12f6:	a0 81       	ld	r26, Z
    12f8:	b1 81       	ldd	r27, Z+1	; 0x01
    12fa:	9d 01       	movw	r18, r26
    12fc:	2f 5f       	subi	r18, 0xFF	; 255
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	31 83       	std	Z+1, r19	; 0x01
    1302:	20 83       	st	Z, r18
    1304:	8c 93       	st	X, r24
    1306:	26 81       	ldd	r18, Z+6	; 0x06
    1308:	37 81       	ldd	r19, Z+7	; 0x07
    130a:	2f 5f       	subi	r18, 0xFF	; 255
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	37 83       	std	Z+7, r19	; 0x07
    1310:	26 83       	std	Z+6, r18	; 0x06
    1312:	14 c0       	rjmp	.+40     	; 0x133c <fputc+0x6e>
    1314:	8b 01       	movw	r16, r22
    1316:	ec 01       	movw	r28, r24
    1318:	fb 01       	movw	r30, r22
    131a:	00 84       	ldd	r0, Z+8	; 0x08
    131c:	f1 85       	ldd	r31, Z+9	; 0x09
    131e:	e0 2d       	mov	r30, r0
    1320:	09 95       	icall
    1322:	89 2b       	or	r24, r25
    1324:	e1 f6       	brne	.-72     	; 0x12de <fputc+0x10>
    1326:	d8 01       	movw	r26, r16
    1328:	16 96       	adiw	r26, 0x06	; 6
    132a:	8d 91       	ld	r24, X+
    132c:	9c 91       	ld	r25, X
    132e:	17 97       	sbiw	r26, 0x07	; 7
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	17 96       	adiw	r26, 0x07	; 7
    1334:	9c 93       	st	X, r25
    1336:	8e 93       	st	-X, r24
    1338:	16 97       	sbiw	r26, 0x06	; 6
    133a:	ce 01       	movw	r24, r28
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <__ultoa_invert>:
    1346:	fa 01       	movw	r30, r20
    1348:	aa 27       	eor	r26, r26
    134a:	28 30       	cpi	r18, 0x08	; 8
    134c:	51 f1       	breq	.+84     	; 0x13a2 <__ultoa_invert+0x5c>
    134e:	20 31       	cpi	r18, 0x10	; 16
    1350:	81 f1       	breq	.+96     	; 0x13b2 <__ultoa_invert+0x6c>
    1352:	e8 94       	clt
    1354:	6f 93       	push	r22
    1356:	6e 7f       	andi	r22, 0xFE	; 254
    1358:	6e 5f       	subi	r22, 0xFE	; 254
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	af 4f       	sbci	r26, 0xFF	; 255
    1362:	b1 e0       	ldi	r27, 0x01	; 1
    1364:	3e d0       	rcall	.+124    	; 0x13e2 <__ultoa_invert+0x9c>
    1366:	b4 e0       	ldi	r27, 0x04	; 4
    1368:	3c d0       	rcall	.+120    	; 0x13e2 <__ultoa_invert+0x9c>
    136a:	67 0f       	add	r22, r23
    136c:	78 1f       	adc	r23, r24
    136e:	89 1f       	adc	r24, r25
    1370:	9a 1f       	adc	r25, r26
    1372:	a1 1d       	adc	r26, r1
    1374:	68 0f       	add	r22, r24
    1376:	79 1f       	adc	r23, r25
    1378:	8a 1f       	adc	r24, r26
    137a:	91 1d       	adc	r25, r1
    137c:	a1 1d       	adc	r26, r1
    137e:	6a 0f       	add	r22, r26
    1380:	71 1d       	adc	r23, r1
    1382:	81 1d       	adc	r24, r1
    1384:	91 1d       	adc	r25, r1
    1386:	a1 1d       	adc	r26, r1
    1388:	20 d0       	rcall	.+64     	; 0x13ca <__ultoa_invert+0x84>
    138a:	09 f4       	brne	.+2      	; 0x138e <__ultoa_invert+0x48>
    138c:	68 94       	set
    138e:	3f 91       	pop	r19
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	26 9f       	mul	r18, r22
    1394:	11 24       	eor	r1, r1
    1396:	30 19       	sub	r19, r0
    1398:	30 5d       	subi	r19, 0xD0	; 208
    139a:	31 93       	st	Z+, r19
    139c:	de f6       	brtc	.-74     	; 0x1354 <__ultoa_invert+0xe>
    139e:	cf 01       	movw	r24, r30
    13a0:	08 95       	ret
    13a2:	46 2f       	mov	r20, r22
    13a4:	47 70       	andi	r20, 0x07	; 7
    13a6:	40 5d       	subi	r20, 0xD0	; 208
    13a8:	41 93       	st	Z+, r20
    13aa:	b3 e0       	ldi	r27, 0x03	; 3
    13ac:	0f d0       	rcall	.+30     	; 0x13cc <__ultoa_invert+0x86>
    13ae:	c9 f7       	brne	.-14     	; 0x13a2 <__ultoa_invert+0x5c>
    13b0:	f6 cf       	rjmp	.-20     	; 0x139e <__ultoa_invert+0x58>
    13b2:	46 2f       	mov	r20, r22
    13b4:	4f 70       	andi	r20, 0x0F	; 15
    13b6:	40 5d       	subi	r20, 0xD0	; 208
    13b8:	4a 33       	cpi	r20, 0x3A	; 58
    13ba:	18 f0       	brcs	.+6      	; 0x13c2 <__ultoa_invert+0x7c>
    13bc:	49 5d       	subi	r20, 0xD9	; 217
    13be:	31 fd       	sbrc	r19, 1
    13c0:	40 52       	subi	r20, 0x20	; 32
    13c2:	41 93       	st	Z+, r20
    13c4:	02 d0       	rcall	.+4      	; 0x13ca <__ultoa_invert+0x84>
    13c6:	a9 f7       	brne	.-22     	; 0x13b2 <__ultoa_invert+0x6c>
    13c8:	ea cf       	rjmp	.-44     	; 0x139e <__ultoa_invert+0x58>
    13ca:	b4 e0       	ldi	r27, 0x04	; 4
    13cc:	a6 95       	lsr	r26
    13ce:	97 95       	ror	r25
    13d0:	87 95       	ror	r24
    13d2:	77 95       	ror	r23
    13d4:	67 95       	ror	r22
    13d6:	ba 95       	dec	r27
    13d8:	c9 f7       	brne	.-14     	; 0x13cc <__ultoa_invert+0x86>
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	61 05       	cpc	r22, r1
    13de:	71 05       	cpc	r23, r1
    13e0:	08 95       	ret
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	0a 2e       	mov	r0, r26
    13e8:	06 94       	lsr	r0
    13ea:	57 95       	ror	r21
    13ec:	47 95       	ror	r20
    13ee:	37 95       	ror	r19
    13f0:	27 95       	ror	r18
    13f2:	ba 95       	dec	r27
    13f4:	c9 f7       	brne	.-14     	; 0x13e8 <__ultoa_invert+0xa2>
    13f6:	62 0f       	add	r22, r18
    13f8:	73 1f       	adc	r23, r19
    13fa:	84 1f       	adc	r24, r20
    13fc:	95 1f       	adc	r25, r21
    13fe:	a0 1d       	adc	r26, r0
    1400:	08 95       	ret

00001402 <__divmodsi4>:
    1402:	05 2e       	mov	r0, r21
    1404:	97 fb       	bst	r25, 7
    1406:	1e f4       	brtc	.+6      	; 0x140e <__divmodsi4+0xc>
    1408:	00 94       	com	r0
    140a:	0e 94 18 0a 	call	0x1430	; 0x1430 <__negsi2>
    140e:	57 fd       	sbrc	r21, 7
    1410:	07 d0       	rcall	.+14     	; 0x1420 <__divmodsi4_neg2>
    1412:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__udivmodsi4>
    1416:	07 fc       	sbrc	r0, 7
    1418:	03 d0       	rcall	.+6      	; 0x1420 <__divmodsi4_neg2>
    141a:	4e f4       	brtc	.+18     	; 0x142e <__divmodsi4_exit>
    141c:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__negsi2>

00001420 <__divmodsi4_neg2>:
    1420:	50 95       	com	r21
    1422:	40 95       	com	r20
    1424:	30 95       	com	r19
    1426:	21 95       	neg	r18
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	4f 4f       	sbci	r20, 0xFF	; 255
    142c:	5f 4f       	sbci	r21, 0xFF	; 255

0000142e <__divmodsi4_exit>:
    142e:	08 95       	ret

00001430 <__negsi2>:
    1430:	90 95       	com	r25
    1432:	80 95       	com	r24
    1434:	70 95       	com	r23
    1436:	61 95       	neg	r22
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	08 95       	ret

00001440 <__muluhisi3>:
    1440:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__umulhisi3>
    1444:	a5 9f       	mul	r26, r21
    1446:	90 0d       	add	r25, r0
    1448:	b4 9f       	mul	r27, r20
    144a:	90 0d       	add	r25, r0
    144c:	a4 9f       	mul	r26, r20
    144e:	80 0d       	add	r24, r0
    1450:	91 1d       	adc	r25, r1
    1452:	11 24       	eor	r1, r1
    1454:	08 95       	ret

00001456 <__mulshisi3>:
    1456:	b7 ff       	sbrs	r27, 7
    1458:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__muluhisi3>

0000145c <__mulohisi3>:
    145c:	0e 94 20 0a 	call	0x1440	; 0x1440 <__muluhisi3>
    1460:	82 1b       	sub	r24, r18
    1462:	93 0b       	sbc	r25, r19
    1464:	08 95       	ret

00001466 <__prologue_saves__>:
    1466:	2f 92       	push	r2
    1468:	3f 92       	push	r3
    146a:	4f 92       	push	r4
    146c:	5f 92       	push	r5
    146e:	6f 92       	push	r6
    1470:	7f 92       	push	r7
    1472:	8f 92       	push	r8
    1474:	9f 92       	push	r9
    1476:	af 92       	push	r10
    1478:	bf 92       	push	r11
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	ca 1b       	sub	r28, r26
    1490:	db 0b       	sbc	r29, r27
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	09 94       	ijmp

0000149e <__epilogue_restores__>:
    149e:	2a 88       	ldd	r2, Y+18	; 0x12
    14a0:	39 88       	ldd	r3, Y+17	; 0x11
    14a2:	48 88       	ldd	r4, Y+16	; 0x10
    14a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    14a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    14a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    14aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    14b0:	b9 84       	ldd	r11, Y+9	; 0x09
    14b2:	c8 84       	ldd	r12, Y+8	; 0x08
    14b4:	df 80       	ldd	r13, Y+7	; 0x07
    14b6:	ee 80       	ldd	r14, Y+6	; 0x06
    14b8:	fd 80       	ldd	r15, Y+5	; 0x05
    14ba:	0c 81       	ldd	r16, Y+4	; 0x04
    14bc:	1b 81       	ldd	r17, Y+3	; 0x03
    14be:	aa 81       	ldd	r26, Y+2	; 0x02
    14c0:	b9 81       	ldd	r27, Y+1	; 0x01
    14c2:	ce 0f       	add	r28, r30
    14c4:	d1 1d       	adc	r29, r1
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	ed 01       	movw	r28, r26
    14d2:	08 95       	ret

000014d4 <__udivmodsi4>:
    14d4:	a1 e2       	ldi	r26, 0x21	; 33
    14d6:	1a 2e       	mov	r1, r26
    14d8:	aa 1b       	sub	r26, r26
    14da:	bb 1b       	sub	r27, r27
    14dc:	fd 01       	movw	r30, r26
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <__udivmodsi4_ep>

000014e0 <__udivmodsi4_loop>:
    14e0:	aa 1f       	adc	r26, r26
    14e2:	bb 1f       	adc	r27, r27
    14e4:	ee 1f       	adc	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	a2 17       	cp	r26, r18
    14ea:	b3 07       	cpc	r27, r19
    14ec:	e4 07       	cpc	r30, r20
    14ee:	f5 07       	cpc	r31, r21
    14f0:	20 f0       	brcs	.+8      	; 0x14fa <__udivmodsi4_ep>
    14f2:	a2 1b       	sub	r26, r18
    14f4:	b3 0b       	sbc	r27, r19
    14f6:	e4 0b       	sbc	r30, r20
    14f8:	f5 0b       	sbc	r31, r21

000014fa <__udivmodsi4_ep>:
    14fa:	66 1f       	adc	r22, r22
    14fc:	77 1f       	adc	r23, r23
    14fe:	88 1f       	adc	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	1a 94       	dec	r1
    1504:	69 f7       	brne	.-38     	; 0x14e0 <__udivmodsi4_loop>
    1506:	60 95       	com	r22
    1508:	70 95       	com	r23
    150a:	80 95       	com	r24
    150c:	90 95       	com	r25
    150e:	9b 01       	movw	r18, r22
    1510:	ac 01       	movw	r20, r24
    1512:	bd 01       	movw	r22, r26
    1514:	cf 01       	movw	r24, r30
    1516:	08 95       	ret

00001518 <__umulhisi3>:
    1518:	a2 9f       	mul	r26, r18
    151a:	b0 01       	movw	r22, r0
    151c:	b3 9f       	mul	r27, r19
    151e:	c0 01       	movw	r24, r0
    1520:	a3 9f       	mul	r26, r19
    1522:	70 0d       	add	r23, r0
    1524:	81 1d       	adc	r24, r1
    1526:	11 24       	eor	r1, r1
    1528:	91 1d       	adc	r25, r1
    152a:	b2 9f       	mul	r27, r18
    152c:	70 0d       	add	r23, r0
    152e:	81 1d       	adc	r24, r1
    1530:	11 24       	eor	r1, r1
    1532:	91 1d       	adc	r25, r1
    1534:	08 95       	ret

00001536 <_exit>:
    1536:	f8 94       	cli

00001538 <__stop_program>:
    1538:	ff cf       	rjmp	.-2      	; 0x1538 <__stop_program>
